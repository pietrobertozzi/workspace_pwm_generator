
pwm_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08007450  08007450  00008450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078e0  080078e0  000095d0  2**0
                  CONTENTS
  4 .ARM          00000008  080078e0  080078e0  000088e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078e8  080078e8  000095d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078e8  080078e8  000088e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080078ec  080078ec  000088ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005d0  20000000  080078f0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000758  200005d0  08007ec0  000095d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d28  08007ec0  00009d28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000095d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a28  00000000  00000000  00009600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030fe  00000000  00000000  0001d028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00020128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d57  00000000  00000000  00021260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001be30  00000000  00000000  00021fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f7c  00000000  00000000  0003dde7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab57f  00000000  00000000  00053d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff2e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004da4  00000000  00000000  000ff328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001040cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005d0 	.word	0x200005d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007438 	.word	0x08007438

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005d4 	.word	0x200005d4
 80001cc:	08007438 	.word	0x08007438

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  mainTaskInit(MAINTASK_INIT_PHASE_1);
 8000594:	2000      	movs	r0, #0
 8000596:	f004 fbe5 	bl	8004d64 <mainTaskInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fb38 	bl	8000c0e <HAL_Init>

  /* USER CODE BEGIN Init */
  mainTaskInit(MAINTASK_INIT_PHASE_INIT);
 800059e:	2001      	movs	r0, #1
 80005a0:	f004 fbe0 	bl	8004d64 <mainTaskInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f80f 	bl	80005c6 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  mainTaskInit(MAINTASK_INIT_PHASE_SYSINIT);
 80005a8:	2002      	movs	r0, #2
 80005aa:	f004 fbdb 	bl	8004d64 <mainTaskInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f945 	bl	800083c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 f913 	bl	80007dc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005b6:	f000 f855 	bl	8000664 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  mainTaskInit(MAINTASK_INIT_PHASE_2);
 80005ba:	2003      	movs	r0, #3
 80005bc:	f004 fbd2 	bl	8004d64 <mainTaskInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mainTaskLoopIteration();
 80005c0:	f004 fc0c 	bl	8004ddc <mainTaskLoopIteration>
 80005c4:	e7fc      	b.n	80005c0 <main+0x30>

080005c6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b096      	sub	sp, #88	@ 0x58
 80005ca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	2244      	movs	r2, #68	@ 0x44
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f006 fa99 	bl	8006b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005da:	463b      	mov	r3, r7
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005e8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ec:	f000 fec6 	bl	800137c <HAL_PWREx_ControlVoltageScaling>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f6:	f000 f96b 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fa:	2302      	movs	r3, #2
 80005fc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000604:	2340      	movs	r3, #64	@ 0x40
 8000606:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000608:	2302      	movs	r3, #2
 800060a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800060c:	2302      	movs	r3, #2
 800060e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000614:	2308      	movs	r3, #8
 8000616:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	4618      	mov	r0, r3
 8000626:	f000 feff 	bl	8001428 <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000630:	f000 f94e 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2303      	movs	r3, #3
 800063a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000648:	463b      	mov	r3, r7
 800064a:	2103      	movs	r1, #3
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fb4d 	bl	8001cec <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000658:	f000 f93a 	bl	80008d0 <Error_Handler>
  }
}
 800065c:	bf00      	nop
 800065e:	3758      	adds	r7, #88	@ 0x58
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b09a      	sub	sp, #104	@ 0x68
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800066a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000678:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000684:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
 8000694:	615a      	str	r2, [r3, #20]
 8000696:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	222c      	movs	r2, #44	@ 0x2c
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f006 fa34 	bl	8006b0c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006a4:	4b4b      	ldr	r3, [pc, #300]	@ (80007d4 <MX_TIM1_Init+0x170>)
 80006a6:	4a4c      	ldr	r2, [pc, #304]	@ (80007d8 <MX_TIM1_Init+0x174>)
 80006a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 80006aa:	4b4a      	ldr	r3, [pc, #296]	@ (80007d4 <MX_TIM1_Init+0x170>)
 80006ac:	223f      	movs	r2, #63	@ 0x3f
 80006ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b0:	4b48      	ldr	r3, [pc, #288]	@ (80007d4 <MX_TIM1_Init+0x170>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80006b6:	4b47      	ldr	r3, [pc, #284]	@ (80007d4 <MX_TIM1_Init+0x170>)
 80006b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006be:	4b45      	ldr	r3, [pc, #276]	@ (80007d4 <MX_TIM1_Init+0x170>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006c4:	4b43      	ldr	r3, [pc, #268]	@ (80007d4 <MX_TIM1_Init+0x170>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006ca:	4b42      	ldr	r3, [pc, #264]	@ (80007d4 <MX_TIM1_Init+0x170>)
 80006cc:	2280      	movs	r2, #128	@ 0x80
 80006ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006d0:	4840      	ldr	r0, [pc, #256]	@ (80007d4 <MX_TIM1_Init+0x170>)
 80006d2:	f001 feb5 	bl	8002440 <HAL_TIM_Base_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80006dc:	f000 f8f8 	bl	80008d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006ea:	4619      	mov	r1, r3
 80006ec:	4839      	ldr	r0, [pc, #228]	@ (80007d4 <MX_TIM1_Init+0x170>)
 80006ee:	f002 f951 	bl	8002994 <HAL_TIM_ConfigClockSource>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80006f8:	f000 f8ea 	bl	80008d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006fc:	4835      	ldr	r0, [pc, #212]	@ (80007d4 <MX_TIM1_Init+0x170>)
 80006fe:	f001 fef6 	bl	80024ee <HAL_TIM_PWM_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000708:	f000 f8e2 	bl	80008d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800070c:	2300      	movs	r3, #0
 800070e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000710:	2300      	movs	r3, #0
 8000712:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000718:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800071c:	4619      	mov	r1, r3
 800071e:	482d      	ldr	r0, [pc, #180]	@ (80007d4 <MX_TIM1_Init+0x170>)
 8000720:	f002 fe4e 	bl	80033c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800072a:	f000 f8d1 	bl	80008d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800072e:	2360      	movs	r3, #96	@ 0x60
 8000730:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000736:	2300      	movs	r3, #0
 8000738:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800073a:	2300      	movs	r3, #0
 800073c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000746:	2300      	movs	r3, #0
 8000748:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800074a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800074e:	2200      	movs	r2, #0
 8000750:	4619      	mov	r1, r3
 8000752:	4820      	ldr	r0, [pc, #128]	@ (80007d4 <MX_TIM1_Init+0x170>)
 8000754:	f002 f80a 	bl	800276c <HAL_TIM_PWM_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800075e:	f000 f8b7 	bl	80008d0 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 8000762:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000766:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000768:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800076c:	2204      	movs	r2, #4
 800076e:	4619      	mov	r1, r3
 8000770:	4818      	ldr	r0, [pc, #96]	@ (80007d4 <MX_TIM1_Init+0x170>)
 8000772:	f001 fffb 	bl	800276c <HAL_TIM_PWM_ConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 800077c:	f000 f8a8 	bl	80008d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000794:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000798:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	4619      	mov	r1, r3
 80007b4:	4807      	ldr	r0, [pc, #28]	@ (80007d4 <MX_TIM1_Init+0x170>)
 80007b6:	f002 fe69 	bl	800348c <HAL_TIMEx_ConfigBreakDeadTime>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 80007c0:	f000 f886 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007c4:	4803      	ldr	r0, [pc, #12]	@ (80007d4 <MX_TIM1_Init+0x170>)
 80007c6:	f000 f8cd 	bl	8000964 <HAL_TIM_MspPostInit>

}
 80007ca:	bf00      	nop
 80007cc:	3768      	adds	r7, #104	@ 0x68
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200005ec 	.word	0x200005ec
 80007d8:	40012c00 	.word	0x40012c00

080007dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007e2:	4a15      	ldr	r2, [pc, #84]	@ (8000838 <MX_USART2_UART_Init+0x5c>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e6:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_USART2_UART_Init+0x58>)
 8000820:	f002 fed1 	bl	80035c6 <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800082a:	f000 f851 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000638 	.word	0x20000638
 8000838:	40004400 	.word	0x40004400

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	4b1d      	ldr	r3, [pc, #116]	@ (80008c8 <MX_GPIO_Init+0x8c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	4a1c      	ldr	r2, [pc, #112]	@ (80008c8 <MX_GPIO_Init+0x8c>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085e:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <MX_GPIO_Init+0x8c>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <MX_GPIO_Init+0x8c>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	4a16      	ldr	r2, [pc, #88]	@ (80008c8 <MX_GPIO_Init+0x8c>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000876:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <MX_GPIO_Init+0x8c>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_GPIO_Init+0x8c>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	4a10      	ldr	r2, [pc, #64]	@ (80008c8 <MX_GPIO_Init+0x8c>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <MX_GPIO_Init+0x8c>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2108      	movs	r1, #8
 800089e:	480b      	ldr	r0, [pc, #44]	@ (80008cc <MX_GPIO_Init+0x90>)
 80008a0:	f000 fd2c 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80008a4:	2308      	movs	r3, #8
 80008a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	4619      	mov	r1, r3
 80008ba:	4804      	ldr	r0, [pc, #16]	@ (80008cc <MX_GPIO_Init+0x90>)
 80008bc:	f000 fbac 	bl	8001018 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c0:	bf00      	nop
 80008c2:	3720      	adds	r7, #32
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40021000 	.word	0x40021000
 80008cc:	48000400 	.word	0x48000400

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <Error_Handler+0x8>

080008dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <HAL_MspInit+0x44>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000920 <HAL_MspInit+0x44>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <HAL_MspInit+0x44>)
 80008f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <HAL_MspInit+0x44>)
 80008fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fe:	4a08      	ldr	r2, [pc, #32]	@ (8000920 <HAL_MspInit+0x44>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000904:	6593      	str	r3, [r2, #88]	@ 0x58
 8000906:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <HAL_MspInit+0x44>)
 8000908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000

08000924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0a      	ldr	r2, [pc, #40]	@ (800095c <HAL_TIM_Base_MspInit+0x38>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d10b      	bne.n	800094e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000936:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <HAL_TIM_Base_MspInit+0x3c>)
 8000938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800093a:	4a09      	ldr	r2, [pc, #36]	@ (8000960 <HAL_TIM_Base_MspInit+0x3c>)
 800093c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000940:	6613      	str	r3, [r2, #96]	@ 0x60
 8000942:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <HAL_TIM_Base_MspInit+0x3c>)
 8000944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000946:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800094e:	bf00      	nop
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40012c00 	.word	0x40012c00
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a12      	ldr	r2, [pc, #72]	@ (80009cc <HAL_TIM_MspPostInit+0x68>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d11d      	bne.n	80009c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <HAL_TIM_MspPostInit+0x6c>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098a:	4a11      	ldr	r2, [pc, #68]	@ (80009d0 <HAL_TIM_MspPostInit+0x6c>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000992:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <HAL_TIM_MspPostInit+0x6c>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800099e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80009b0:	2301      	movs	r3, #1
 80009b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	4619      	mov	r1, r3
 80009ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009be:	f000 fb2b 	bl	8001018 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009c2:	bf00      	nop
 80009c4:	3720      	adds	r7, #32
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40012c00 	.word	0x40012c00
 80009d0:	40021000 	.word	0x40021000

080009d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b096      	sub	sp, #88	@ 0x58
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	2234      	movs	r2, #52	@ 0x34
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f006 f889 	bl	8006b0c <memset>
  if(huart->Instance==USART2)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a2c      	ldr	r2, [pc, #176]	@ (8000ab0 <HAL_UART_MspInit+0xdc>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d150      	bne.n	8000aa6 <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 fb8f 	bl	8002134 <HAL_RCCEx_PeriphCLKConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a1c:	f7ff ff58 	bl	80008d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a20:	4b24      	ldr	r3, [pc, #144]	@ (8000ab4 <HAL_UART_MspInit+0xe0>)
 8000a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a24:	4a23      	ldr	r2, [pc, #140]	@ (8000ab4 <HAL_UART_MspInit+0xe0>)
 8000a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a2c:	4b21      	ldr	r3, [pc, #132]	@ (8000ab4 <HAL_UART_MspInit+0xe0>)
 8000a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab4 <HAL_UART_MspInit+0xe0>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ab4 <HAL_UART_MspInit+0xe0>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a44:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab4 <HAL_UART_MspInit+0xe0>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a50:	2304      	movs	r3, #4
 8000a52:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a60:	2307      	movs	r3, #7
 8000a62:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6e:	f000 fad3 	bl	8001018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a76:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a84:	2303      	movs	r3, #3
 8000a86:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a92:	f000 fac1 	bl	8001018 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2026      	movs	r0, #38	@ 0x26
 8000a9c:	f000 fa07 	bl	8000eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aa0:	2026      	movs	r0, #38	@ 0x26
 8000aa2:	f000 fa20 	bl	8000ee6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3758      	adds	r7, #88	@ 0x58
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40004400 	.word	0x40004400
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <NMI_Handler+0x4>

08000ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <MemManage_Handler+0x4>

08000ad0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <UsageFault_Handler+0x4>

08000ae0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0e:	f000 f8d3 	bl	8000cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b1c:	4802      	ldr	r0, [pc, #8]	@ (8000b28 <USART2_IRQHandler+0x10>)
 8000b1e:	f002 fe75 	bl	800380c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000638 	.word	0x20000638

08000b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b34:	4a14      	ldr	r2, [pc, #80]	@ (8000b88 <_sbrk+0x5c>)
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <_sbrk+0x60>)
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b40:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b48:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <_sbrk+0x64>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	@ (8000b94 <_sbrk+0x68>)
 8000b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d207      	bcs.n	8000b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b5c:	f005 fff4 	bl	8006b48 <__errno>
 8000b60:	4603      	mov	r3, r0
 8000b62:	220c      	movs	r2, #12
 8000b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	e009      	b.n	8000b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b72:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4a05      	ldr	r2, [pc, #20]	@ (8000b90 <_sbrk+0x64>)
 8000b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20008000 	.word	0x20008000
 8000b8c:	00000400 	.word	0x00000400
 8000b90:	200006c0 	.word	0x200006c0
 8000b94:	20000d28 	.word	0x20000d28

08000b98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	@ (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc0:	f7ff ffea 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc4:	480c      	ldr	r0, [pc, #48]	@ (8000bf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bc6:	490d      	ldr	r1, [pc, #52]	@ (8000bfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c00 <LoopForever+0xe>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0a      	ldr	r2, [pc, #40]	@ (8000c04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c08 <LoopForever+0x16>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bea:	f005 ffb3 	bl	8006b54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bee:	f7ff fccf 	bl	8000590 <main>

08000bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf2:	e7fe      	b.n	8000bf2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	200005d0 	.word	0x200005d0
  ldr r2, =_sidata
 8000c00:	080078f0 	.word	0x080078f0
  ldr r2, =_sbss
 8000c04:	200005d0 	.word	0x200005d0
  ldr r4, =_ebss
 8000c08:	20000d28 	.word	0x20000d28

08000c0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC1_2_IRQHandler>

08000c0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c14:	2300      	movs	r3, #0
 8000c16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f000 f93d 	bl	8000e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f000 f80e 	bl	8000c40 <HAL_InitTick>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d002      	beq.n	8000c30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	71fb      	strb	r3, [r7, #7]
 8000c2e:	e001      	b.n	8000c34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c30:	f7ff fe54 	bl	80008dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c34:	79fb      	ldrb	r3, [r7, #7]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c4c:	4b17      	ldr	r3, [pc, #92]	@ (8000cac <HAL_InitTick+0x6c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d023      	beq.n	8000c9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c54:	4b16      	ldr	r3, [pc, #88]	@ (8000cb0 <HAL_InitTick+0x70>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <HAL_InitTick+0x6c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f949 	bl	8000f02 <HAL_SYSTICK_Config>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10f      	bne.n	8000c96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d809      	bhi.n	8000c90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f000 f913 	bl	8000eae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c88:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <HAL_InitTick+0x74>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	e007      	b.n	8000ca0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
 8000c94:	e004      	b.n	8000ca0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	73fb      	strb	r3, [r7, #15]
 8000c9a:	e001      	b.n	8000ca0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	20000004 	.word	0x20000004

08000cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_IncTick+0x20>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_IncTick+0x24>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <HAL_IncTick+0x24>)
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	200006c4 	.word	0x200006c4

08000ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	@ (8000cf4 <HAL_GetTick+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	200006c4 	.word	0x200006c4

08000cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	db0b      	blt.n	8000d86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	f003 021f 	and.w	r2, r3, #31
 8000d74:	4907      	ldr	r1, [pc, #28]	@ (8000d94 <__NVIC_EnableIRQ+0x38>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db0a      	blt.n	8000dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	490c      	ldr	r1, [pc, #48]	@ (8000de4 <__NVIC_SetPriority+0x4c>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	0112      	lsls	r2, r2, #4
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc0:	e00a      	b.n	8000dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4908      	ldr	r1, [pc, #32]	@ (8000de8 <__NVIC_SetPriority+0x50>)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3b04      	subs	r3, #4
 8000dd0:	0112      	lsls	r2, r2, #4
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	761a      	strb	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	@ 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf28      	it	cs
 8000e0a:	2304      	movcs	r3, #4
 8000e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3304      	adds	r3, #4
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d902      	bls.n	8000e1c <NVIC_EncodePriority+0x30>
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3b03      	subs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <NVIC_EncodePriority+0x32>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	401a      	ands	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	4313      	orrs	r3, r2
         );
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3724      	adds	r7, #36	@ 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e64:	d301      	bcc.n	8000e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00f      	b.n	8000e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e94 <SysTick_Config+0x40>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e72:	210f      	movs	r1, #15
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f7ff ff8e 	bl	8000d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e7c:	4b05      	ldr	r3, [pc, #20]	@ (8000e94 <SysTick_Config+0x40>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e82:	4b04      	ldr	r3, [pc, #16]	@ (8000e94 <SysTick_Config+0x40>)
 8000e84:	2207      	movs	r2, #7
 8000e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	e000e010 	.word	0xe000e010

08000e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ff29 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b086      	sub	sp, #24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
 8000eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec0:	f7ff ff3e 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000ec4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	68b9      	ldr	r1, [r7, #8]
 8000eca:	6978      	ldr	r0, [r7, #20]
 8000ecc:	f7ff ff8e 	bl	8000dec <NVIC_EncodePriority>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff5d 	bl	8000d98 <__NVIC_SetPriority>
}
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff31 	bl	8000d5c <__NVIC_EnableIRQ>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffa2 	bl	8000e54 <SysTick_Config>
 8000f10:	4603      	mov	r3, r0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b085      	sub	sp, #20
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d008      	beq.n	8000f44 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2204      	movs	r2, #4
 8000f36:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e022      	b.n	8000f8a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 020e 	bic.w	r2, r2, #14
 8000f52:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 0201 	bic.w	r2, r2, #1
 8000f62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f68:	f003 021c 	and.w	r2, r3, #28
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f70:	2101      	movs	r1, #1
 8000f72:	fa01 f202 	lsl.w	r2, r1, r2
 8000f76:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b084      	sub	sp, #16
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d005      	beq.n	8000fba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2204      	movs	r2, #4
 8000fb2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	e029      	b.n	800100e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f022 020e 	bic.w	r2, r2, #14
 8000fc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 0201 	bic.w	r2, r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fde:	f003 021c 	and.w	r2, r3, #28
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fec:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	4798      	blx	r3
    }
  }
  return status;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001026:	e14e      	b.n	80012c6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	2101      	movs	r1, #1
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	4013      	ands	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 8140 	beq.w	80012c0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b01      	cmp	r3, #1
 800104a:	d005      	beq.n	8001058 <HAL_GPIO_Init+0x40>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d130      	bne.n	80010ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800108e:	2201      	movs	r2, #1
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	091b      	lsrs	r3, r3, #4
 80010a4:	f003 0201 	and.w	r2, r3, #1
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d017      	beq.n	80010f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d123      	bne.n	800114a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	691a      	ldr	r2, [r3, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	6939      	ldr	r1, [r7, #16]
 8001146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0203 	and.w	r2, r3, #3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 809a 	beq.w	80012c0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118c:	4b55      	ldr	r3, [pc, #340]	@ (80012e4 <HAL_GPIO_Init+0x2cc>)
 800118e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001190:	4a54      	ldr	r2, [pc, #336]	@ (80012e4 <HAL_GPIO_Init+0x2cc>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6613      	str	r3, [r2, #96]	@ 0x60
 8001198:	4b52      	ldr	r3, [pc, #328]	@ (80012e4 <HAL_GPIO_Init+0x2cc>)
 800119a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011a4:	4a50      	ldr	r2, [pc, #320]	@ (80012e8 <HAL_GPIO_Init+0x2d0>)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011ce:	d013      	beq.n	80011f8 <HAL_GPIO_Init+0x1e0>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a46      	ldr	r2, [pc, #280]	@ (80012ec <HAL_GPIO_Init+0x2d4>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d00d      	beq.n	80011f4 <HAL_GPIO_Init+0x1dc>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a45      	ldr	r2, [pc, #276]	@ (80012f0 <HAL_GPIO_Init+0x2d8>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d007      	beq.n	80011f0 <HAL_GPIO_Init+0x1d8>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a44      	ldr	r2, [pc, #272]	@ (80012f4 <HAL_GPIO_Init+0x2dc>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d101      	bne.n	80011ec <HAL_GPIO_Init+0x1d4>
 80011e8:	2303      	movs	r3, #3
 80011ea:	e006      	b.n	80011fa <HAL_GPIO_Init+0x1e2>
 80011ec:	2307      	movs	r3, #7
 80011ee:	e004      	b.n	80011fa <HAL_GPIO_Init+0x1e2>
 80011f0:	2302      	movs	r3, #2
 80011f2:	e002      	b.n	80011fa <HAL_GPIO_Init+0x1e2>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <HAL_GPIO_Init+0x1e2>
 80011f8:	2300      	movs	r3, #0
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	f002 0203 	and.w	r2, r2, #3
 8001200:	0092      	lsls	r2, r2, #2
 8001202:	4093      	lsls	r3, r2
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800120a:	4937      	ldr	r1, [pc, #220]	@ (80012e8 <HAL_GPIO_Init+0x2d0>)
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001218:	4b37      	ldr	r3, [pc, #220]	@ (80012f8 <HAL_GPIO_Init+0x2e0>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800123c:	4a2e      	ldr	r2, [pc, #184]	@ (80012f8 <HAL_GPIO_Init+0x2e0>)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001242:	4b2d      	ldr	r3, [pc, #180]	@ (80012f8 <HAL_GPIO_Init+0x2e0>)
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001266:	4a24      	ldr	r2, [pc, #144]	@ (80012f8 <HAL_GPIO_Init+0x2e0>)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800126c:	4b22      	ldr	r3, [pc, #136]	@ (80012f8 <HAL_GPIO_Init+0x2e0>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	43db      	mvns	r3, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001290:	4a19      	ldr	r2, [pc, #100]	@ (80012f8 <HAL_GPIO_Init+0x2e0>)
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001296:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <HAL_GPIO_Init+0x2e0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	43db      	mvns	r3, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ba:	4a0f      	ldr	r2, [pc, #60]	@ (80012f8 <HAL_GPIO_Init+0x2e0>)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3301      	adds	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	fa22 f303 	lsr.w	r3, r2, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f47f aea9 	bne.w	8001028 <HAL_GPIO_Init+0x10>
  }
}
 80012d6:	bf00      	nop
 80012d8:	bf00      	nop
 80012da:	371c      	adds	r7, #28
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000
 80012ec:	48000400 	.word	0x48000400
 80012f0:	48000800 	.word	0x48000800
 80012f4:	48000c00 	.word	0x48000c00
 80012f8:	40010400 	.word	0x40010400

080012fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
 8001308:	4613      	mov	r3, r2
 800130a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800130c:	787b      	ldrb	r3, [r7, #1]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001318:	e002      	b.n	8001320 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800131a:	887a      	ldrh	r2, [r7, #2]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800133e:	887a      	ldrh	r2, [r7, #2]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4013      	ands	r3, r2
 8001344:	041a      	lsls	r2, r3, #16
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	43d9      	mvns	r1, r3
 800134a:	887b      	ldrh	r3, [r7, #2]
 800134c:	400b      	ands	r3, r1
 800134e:	431a      	orrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	619a      	str	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001364:	4b04      	ldr	r3, [pc, #16]	@ (8001378 <HAL_PWREx_GetVoltageRange+0x18>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40007000 	.word	0x40007000

0800137c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800138a:	d130      	bne.n	80013ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800138c:	4b23      	ldr	r3, [pc, #140]	@ (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001398:	d038      	beq.n	800140c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800139a:	4b20      	ldr	r3, [pc, #128]	@ (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013a2:	4a1e      	ldr	r2, [pc, #120]	@ (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2232      	movs	r2, #50	@ 0x32
 80013b0:	fb02 f303 	mul.w	r3, r2, r3
 80013b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001424 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	0c9b      	lsrs	r3, r3, #18
 80013bc:	3301      	adds	r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c0:	e002      	b.n	80013c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c8:	4b14      	ldr	r3, [pc, #80]	@ (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013d4:	d102      	bne.n	80013dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f2      	bne.n	80013c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013dc:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013e8:	d110      	bne.n	800140c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e00f      	b.n	800140e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013ee:	4b0b      	ldr	r3, [pc, #44]	@ (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013fa:	d007      	beq.n	800140c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013fc:	4b07      	ldr	r3, [pc, #28]	@ (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001404:	4a05      	ldr	r2, [pc, #20]	@ (800141c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001406:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800140a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40007000 	.word	0x40007000
 8001420:	20000000 	.word	0x20000000
 8001424:	431bde83 	.word	0x431bde83

08001428 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	@ 0x28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d102      	bne.n	800143c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	f000 bc4f 	b.w	8001cda <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800143c:	4b97      	ldr	r3, [pc, #604]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 030c 	and.w	r3, r3, #12
 8001444:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001446:	4b95      	ldr	r3, [pc, #596]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0310 	and.w	r3, r3, #16
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80e6 	beq.w	800162a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800145e:	6a3b      	ldr	r3, [r7, #32]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d007      	beq.n	8001474 <HAL_RCC_OscConfig+0x4c>
 8001464:	6a3b      	ldr	r3, [r7, #32]
 8001466:	2b0c      	cmp	r3, #12
 8001468:	f040 808d 	bne.w	8001586 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	2b01      	cmp	r3, #1
 8001470:	f040 8089 	bne.w	8001586 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001474:	4b89      	ldr	r3, [pc, #548]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d006      	beq.n	800148e <HAL_RCC_OscConfig+0x66>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	f000 bc26 	b.w	8001cda <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001492:	4b82      	ldr	r3, [pc, #520]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d004      	beq.n	80014a8 <HAL_RCC_OscConfig+0x80>
 800149e:	4b7f      	ldr	r3, [pc, #508]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014a6:	e005      	b.n	80014b4 <HAL_RCC_OscConfig+0x8c>
 80014a8:	4b7c      	ldr	r3, [pc, #496]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 80014aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014ae:	091b      	lsrs	r3, r3, #4
 80014b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d224      	bcs.n	8001502 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 fdd9 	bl	8002074 <RCC_SetFlashLatencyFromMSIRange>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d002      	beq.n	80014ce <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	f000 bc06 	b.w	8001cda <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ce:	4b73      	ldr	r3, [pc, #460]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a72      	ldr	r2, [pc, #456]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 80014d4:	f043 0308 	orr.w	r3, r3, #8
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4b70      	ldr	r3, [pc, #448]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e6:	496d      	ldr	r1, [pc, #436]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ec:	4b6b      	ldr	r3, [pc, #428]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	4968      	ldr	r1, [pc, #416]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
 8001500:	e025      	b.n	800154e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001502:	4b66      	ldr	r3, [pc, #408]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a65      	ldr	r2, [pc, #404]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 8001508:	f043 0308 	orr.w	r3, r3, #8
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	4b63      	ldr	r3, [pc, #396]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151a:	4960      	ldr	r1, [pc, #384]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 800151c:	4313      	orrs	r3, r2
 800151e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001520:	4b5e      	ldr	r3, [pc, #376]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	495b      	ldr	r1, [pc, #364]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 8001530:	4313      	orrs	r3, r2
 8001532:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001534:	6a3b      	ldr	r3, [r7, #32]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d109      	bne.n	800154e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153e:	4618      	mov	r0, r3
 8001540:	f000 fd98 	bl	8002074 <RCC_SetFlashLatencyFromMSIRange>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e3c5      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800154e:	f000 fccd 	bl	8001eec <HAL_RCC_GetSysClockFreq>
 8001552:	4602      	mov	r2, r0
 8001554:	4b51      	ldr	r3, [pc, #324]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	091b      	lsrs	r3, r3, #4
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	4950      	ldr	r1, [pc, #320]	@ (80016a0 <HAL_RCC_OscConfig+0x278>)
 8001560:	5ccb      	ldrb	r3, [r1, r3]
 8001562:	f003 031f 	and.w	r3, r3, #31
 8001566:	fa22 f303 	lsr.w	r3, r2, r3
 800156a:	4a4e      	ldr	r2, [pc, #312]	@ (80016a4 <HAL_RCC_OscConfig+0x27c>)
 800156c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800156e:	4b4e      	ldr	r3, [pc, #312]	@ (80016a8 <HAL_RCC_OscConfig+0x280>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fb64 	bl	8000c40 <HAL_InitTick>
 8001578:	4603      	mov	r3, r0
 800157a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800157c:	7dfb      	ldrb	r3, [r7, #23]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d052      	beq.n	8001628 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	e3a9      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d032      	beq.n	80015f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800158e:	4b43      	ldr	r3, [pc, #268]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a42      	ldr	r2, [pc, #264]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800159a:	f7ff fba1 	bl	8000ce0 <HAL_GetTick>
 800159e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015a2:	f7ff fb9d 	bl	8000ce0 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e392      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015b4:	4b39      	ldr	r3, [pc, #228]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c0:	4b36      	ldr	r3, [pc, #216]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a35      	ldr	r2, [pc, #212]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 80015c6:	f043 0308 	orr.w	r3, r3, #8
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	4b33      	ldr	r3, [pc, #204]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d8:	4930      	ldr	r1, [pc, #192]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015de:	4b2f      	ldr	r3, [pc, #188]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	492b      	ldr	r1, [pc, #172]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	604b      	str	r3, [r1, #4]
 80015f2:	e01a      	b.n	800162a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015f4:	4b29      	ldr	r3, [pc, #164]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a28      	ldr	r2, [pc, #160]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 80015fa:	f023 0301 	bic.w	r3, r3, #1
 80015fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001600:	f7ff fb6e 	bl	8000ce0 <HAL_GetTick>
 8001604:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001608:	f7ff fb6a 	bl	8000ce0 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e35f      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800161a:	4b20      	ldr	r3, [pc, #128]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x1e0>
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001628:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d073      	beq.n	800171e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001636:	6a3b      	ldr	r3, [r7, #32]
 8001638:	2b08      	cmp	r3, #8
 800163a:	d005      	beq.n	8001648 <HAL_RCC_OscConfig+0x220>
 800163c:	6a3b      	ldr	r3, [r7, #32]
 800163e:	2b0c      	cmp	r3, #12
 8001640:	d10e      	bne.n	8001660 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	2b03      	cmp	r3, #3
 8001646:	d10b      	bne.n	8001660 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001648:	4b14      	ldr	r3, [pc, #80]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d063      	beq.n	800171c <HAL_RCC_OscConfig+0x2f4>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d15f      	bne.n	800171c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e33c      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001668:	d106      	bne.n	8001678 <HAL_RCC_OscConfig+0x250>
 800166a:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a0b      	ldr	r2, [pc, #44]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 8001670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e025      	b.n	80016c4 <HAL_RCC_OscConfig+0x29c>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001680:	d114      	bne.n	80016ac <HAL_RCC_OscConfig+0x284>
 8001682:	4b06      	ldr	r3, [pc, #24]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a05      	ldr	r2, [pc, #20]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 8001688:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	4b03      	ldr	r3, [pc, #12]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a02      	ldr	r2, [pc, #8]	@ (800169c <HAL_RCC_OscConfig+0x274>)
 8001694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e013      	b.n	80016c4 <HAL_RCC_OscConfig+0x29c>
 800169c:	40021000 	.word	0x40021000
 80016a0:	08007764 	.word	0x08007764
 80016a4:	20000000 	.word	0x20000000
 80016a8:	20000004 	.word	0x20000004
 80016ac:	4b8f      	ldr	r3, [pc, #572]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a8e      	ldr	r2, [pc, #568]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80016b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b8c      	ldr	r3, [pc, #560]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a8b      	ldr	r2, [pc, #556]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80016be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d013      	beq.n	80016f4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff fb08 	bl	8000ce0 <HAL_GetTick>
 80016d0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff fb04 	bl	8000ce0 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	@ 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e2f9      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016e6:	4b81      	ldr	r3, [pc, #516]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x2ac>
 80016f2:	e014      	b.n	800171e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff faf4 	bl	8000ce0 <HAL_GetTick>
 80016f8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016fc:	f7ff faf0 	bl	8000ce0 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	@ 0x64
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e2e5      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800170e:	4b77      	ldr	r3, [pc, #476]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x2d4>
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d060      	beq.n	80017ec <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	2b04      	cmp	r3, #4
 800172e:	d005      	beq.n	800173c <HAL_RCC_OscConfig+0x314>
 8001730:	6a3b      	ldr	r3, [r7, #32]
 8001732:	2b0c      	cmp	r3, #12
 8001734:	d119      	bne.n	800176a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d116      	bne.n	800176a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800173c:	4b6b      	ldr	r3, [pc, #428]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_OscConfig+0x32c>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e2c2      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001754:	4b65      	ldr	r3, [pc, #404]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	061b      	lsls	r3, r3, #24
 8001762:	4962      	ldr	r1, [pc, #392]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001768:	e040      	b.n	80017ec <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d023      	beq.n	80017ba <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001772:	4b5e      	ldr	r3, [pc, #376]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a5d      	ldr	r2, [pc, #372]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800177c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177e:	f7ff faaf 	bl	8000ce0 <HAL_GetTick>
 8001782:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001786:	f7ff faab 	bl	8000ce0 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e2a0      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001798:	4b54      	ldr	r3, [pc, #336]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f0      	beq.n	8001786 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a4:	4b51      	ldr	r3, [pc, #324]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	061b      	lsls	r3, r3, #24
 80017b2:	494e      	ldr	r1, [pc, #312]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
 80017b8:	e018      	b.n	80017ec <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ba:	4b4c      	ldr	r3, [pc, #304]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a4b      	ldr	r2, [pc, #300]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c6:	f7ff fa8b 	bl	8000ce0 <HAL_GetTick>
 80017ca:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ce:	f7ff fa87 	bl	8000ce0 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e27c      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e0:	4b42      	ldr	r3, [pc, #264]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f0      	bne.n	80017ce <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 8082 	beq.w	80018fe <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d05f      	beq.n	80018c2 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001802:	4b3a      	ldr	r3, [pc, #232]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001808:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699a      	ldr	r2, [r3, #24]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	429a      	cmp	r2, r3
 8001816:	d037      	beq.n	8001888 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d006      	beq.n	8001830 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e254      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d01b      	beq.n	8001872 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800183a:	4b2c      	ldr	r3, [pc, #176]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 800183c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001840:	4a2a      	ldr	r2, [pc, #168]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001842:	f023 0301 	bic.w	r3, r3, #1
 8001846:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800184a:	f7ff fa49 	bl	8000ce0 <HAL_GetTick>
 800184e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001852:	f7ff fa45 	bl	8000ce0 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b11      	cmp	r3, #17
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e23a      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001864:	4b21      	ldr	r3, [pc, #132]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001866:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1ef      	bne.n	8001852 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001872:	4b1e      	ldr	r3, [pc, #120]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001874:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001878:	f023 0210 	bic.w	r2, r3, #16
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	491a      	ldr	r1, [pc, #104]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001882:	4313      	orrs	r3, r2
 8001884:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001888:	4b18      	ldr	r3, [pc, #96]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 800188a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800188e:	4a17      	ldr	r2, [pc, #92]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001898:	f7ff fa22 	bl	8000ce0 <HAL_GetTick>
 800189c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a0:	f7ff fa1e 	bl	8000ce0 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b11      	cmp	r3, #17
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e213      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018b2:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80018b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0ef      	beq.n	80018a0 <HAL_RCC_OscConfig+0x478>
 80018c0:	e01d      	b.n	80018fe <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c2:	4b0a      	ldr	r3, [pc, #40]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018c8:	4a08      	ldr	r2, [pc, #32]	@ (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80018ca:	f023 0301 	bic.w	r3, r3, #1
 80018ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d2:	f7ff fa05 	bl	8000ce0 <HAL_GetTick>
 80018d6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018d8:	e00a      	b.n	80018f0 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018da:	f7ff fa01 	bl	8000ce0 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b11      	cmp	r3, #17
 80018e6:	d903      	bls.n	80018f0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e1f6      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
 80018ec:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f0:	4ba9      	ldr	r3, [pc, #676]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 80018f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1ed      	bne.n	80018da <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 80bd 	beq.w	8001a86 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800190c:	2300      	movs	r3, #0
 800190e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001912:	4ba1      	ldr	r3, [pc, #644]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 8001914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10e      	bne.n	800193c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	4b9e      	ldr	r3, [pc, #632]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001922:	4a9d      	ldr	r2, [pc, #628]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 8001924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001928:	6593      	str	r3, [r2, #88]	@ 0x58
 800192a:	4b9b      	ldr	r3, [pc, #620]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001936:	2301      	movs	r3, #1
 8001938:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800193c:	4b97      	ldr	r3, [pc, #604]	@ (8001b9c <HAL_RCC_OscConfig+0x774>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001944:	2b00      	cmp	r3, #0
 8001946:	d118      	bne.n	800197a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001948:	4b94      	ldr	r3, [pc, #592]	@ (8001b9c <HAL_RCC_OscConfig+0x774>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a93      	ldr	r2, [pc, #588]	@ (8001b9c <HAL_RCC_OscConfig+0x774>)
 800194e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001952:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001954:	f7ff f9c4 	bl	8000ce0 <HAL_GetTick>
 8001958:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195c:	f7ff f9c0 	bl	8000ce0 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e1b5      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800196e:	4b8b      	ldr	r3, [pc, #556]	@ (8001b9c <HAL_RCC_OscConfig+0x774>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d02c      	beq.n	80019e0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001986:	4b84      	ldr	r3, [pc, #528]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 8001988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800198c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001998:	497f      	ldr	r1, [pc, #508]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 800199a:	4313      	orrs	r3, r2
 800199c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d010      	beq.n	80019ce <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019ac:	4b7a      	ldr	r3, [pc, #488]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 80019ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b2:	4a79      	ldr	r2, [pc, #484]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019bc:	4b76      	ldr	r3, [pc, #472]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 80019be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019c2:	4a75      	ldr	r2, [pc, #468]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019cc:	e018      	b.n	8001a00 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019ce:	4b72      	ldr	r3, [pc, #456]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 80019d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d4:	4a70      	ldr	r2, [pc, #448]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019de:	e00f      	b.n	8001a00 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019e0:	4b6d      	ldr	r3, [pc, #436]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 80019e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019e6:	4a6c      	ldr	r2, [pc, #432]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 80019e8:	f023 0301 	bic.w	r3, r3, #1
 80019ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019f0:	4b69      	ldr	r3, [pc, #420]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 80019f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019f6:	4a68      	ldr	r2, [pc, #416]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 80019f8:	f023 0304 	bic.w	r3, r3, #4
 80019fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d016      	beq.n	8001a36 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a08:	f7ff f96a 	bl	8000ce0 <HAL_GetTick>
 8001a0c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a10:	f7ff f966 	bl	8000ce0 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e159      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a26:	4b5c      	ldr	r3, [pc, #368]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 8001a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0ed      	beq.n	8001a10 <HAL_RCC_OscConfig+0x5e8>
 8001a34:	e01d      	b.n	8001a72 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a36:	f7ff f953 	bl	8000ce0 <HAL_GetTick>
 8001a3a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a3c:	e00a      	b.n	8001a54 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7ff f94f 	bl	8000ce0 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e142      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a54:	4b50      	ldr	r3, [pc, #320]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 8001a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1ed      	bne.n	8001a3e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001a62:	4b4d      	ldr	r3, [pc, #308]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 8001a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a68:	4a4b      	ldr	r2, [pc, #300]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 8001a6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d105      	bne.n	8001a86 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a7a:	4b47      	ldr	r3, [pc, #284]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7e:	4a46      	ldr	r2, [pc, #280]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 8001a80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a84:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0320 	and.w	r3, r3, #32
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d03c      	beq.n	8001b0c <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d01c      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a9a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 8001a9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001aa0:	4a3d      	ldr	r2, [pc, #244]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aaa:	f7ff f919 	bl	8000ce0 <HAL_GetTick>
 8001aae:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ab2:	f7ff f915 	bl	8000ce0 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e10a      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ac4:	4b34      	ldr	r3, [pc, #208]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 8001ac6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0ef      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x68a>
 8001ad2:	e01b      	b.n	8001b0c <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ad4:	4b30      	ldr	r3, [pc, #192]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 8001ad6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ada:	4a2f      	ldr	r2, [pc, #188]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 8001adc:	f023 0301 	bic.w	r3, r3, #1
 8001ae0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae4:	f7ff f8fc 	bl	8000ce0 <HAL_GetTick>
 8001ae8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aec:	f7ff f8f8 	bl	8000ce0 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e0ed      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001afe:	4b26      	ldr	r3, [pc, #152]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 8001b00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1ef      	bne.n	8001aec <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80e1 	beq.w	8001cd8 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	f040 80b5 	bne.w	8001c8a <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b20:	4b1d      	ldr	r3, [pc, #116]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f003 0203 	and.w	r2, r3, #3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d124      	bne.n	8001b7e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d11b      	bne.n	8001b7e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b50:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d113      	bne.n	8001b7e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b60:	085b      	lsrs	r3, r3, #1
 8001b62:	3b01      	subs	r3, #1
 8001b64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d109      	bne.n	8001b7e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b74:	085b      	lsrs	r3, r3, #1
 8001b76:	3b01      	subs	r3, #1
 8001b78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d05f      	beq.n	8001c3e <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	2b0c      	cmp	r3, #12
 8001b82:	d05a      	beq.n	8001c3a <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b84:	4b04      	ldr	r3, [pc, #16]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a03      	ldr	r2, [pc, #12]	@ (8001b98 <HAL_RCC_OscConfig+0x770>)
 8001b8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b90:	f7ff f8a6 	bl	8000ce0 <HAL_GetTick>
 8001b94:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b96:	e00c      	b.n	8001bb2 <HAL_RCC_OscConfig+0x78a>
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7ff f89e 	bl	8000ce0 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e093      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb2:	4b4c      	ldr	r3, [pc, #304]	@ (8001ce4 <HAL_RCC_OscConfig+0x8bc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bbe:	4b49      	ldr	r3, [pc, #292]	@ (8001ce4 <HAL_RCC_OscConfig+0x8bc>)
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	4b49      	ldr	r3, [pc, #292]	@ (8001ce8 <HAL_RCC_OscConfig+0x8c0>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001bce:	3a01      	subs	r2, #1
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	4311      	orrs	r1, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001bd8:	0212      	lsls	r2, r2, #8
 8001bda:	4311      	orrs	r1, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001be0:	0852      	lsrs	r2, r2, #1
 8001be2:	3a01      	subs	r2, #1
 8001be4:	0552      	lsls	r2, r2, #21
 8001be6:	4311      	orrs	r1, r2
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001bec:	0852      	lsrs	r2, r2, #1
 8001bee:	3a01      	subs	r2, #1
 8001bf0:	0652      	lsls	r2, r2, #25
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	493b      	ldr	r1, [pc, #236]	@ (8001ce4 <HAL_RCC_OscConfig+0x8bc>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bfa:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce4 <HAL_RCC_OscConfig+0x8bc>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a39      	ldr	r2, [pc, #228]	@ (8001ce4 <HAL_RCC_OscConfig+0x8bc>)
 8001c00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c04:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c06:	4b37      	ldr	r3, [pc, #220]	@ (8001ce4 <HAL_RCC_OscConfig+0x8bc>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	4a36      	ldr	r2, [pc, #216]	@ (8001ce4 <HAL_RCC_OscConfig+0x8bc>)
 8001c0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c10:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c12:	f7ff f865 	bl	8000ce0 <HAL_GetTick>
 8001c16:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1a:	f7ff f861 	bl	8000ce0 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e056      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce4 <HAL_RCC_OscConfig+0x8bc>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c38:	e04e      	b.n	8001cd8 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e04d      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3e:	4b29      	ldr	r3, [pc, #164]	@ (8001ce4 <HAL_RCC_OscConfig+0x8bc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d146      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c4a:	4b26      	ldr	r3, [pc, #152]	@ (8001ce4 <HAL_RCC_OscConfig+0x8bc>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a25      	ldr	r2, [pc, #148]	@ (8001ce4 <HAL_RCC_OscConfig+0x8bc>)
 8001c50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c54:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c56:	4b23      	ldr	r3, [pc, #140]	@ (8001ce4 <HAL_RCC_OscConfig+0x8bc>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	4a22      	ldr	r2, [pc, #136]	@ (8001ce4 <HAL_RCC_OscConfig+0x8bc>)
 8001c5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c60:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c62:	f7ff f83d 	bl	8000ce0 <HAL_GetTick>
 8001c66:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7ff f839 	bl	8000ce0 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e02e      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ce4 <HAL_RCC_OscConfig+0x8bc>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x842>
 8001c88:	e026      	b.n	8001cd8 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	2b0c      	cmp	r3, #12
 8001c8e:	d021      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c90:	4b14      	ldr	r3, [pc, #80]	@ (8001ce4 <HAL_RCC_OscConfig+0x8bc>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a13      	ldr	r2, [pc, #76]	@ (8001ce4 <HAL_RCC_OscConfig+0x8bc>)
 8001c96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7ff f820 	bl	8000ce0 <HAL_GetTick>
 8001ca0:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7ff f81c 	bl	8000ce0 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e011      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce4 <HAL_RCC_OscConfig+0x8bc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001cc2:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <HAL_RCC_OscConfig+0x8bc>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	4a07      	ldr	r2, [pc, #28]	@ (8001ce4 <HAL_RCC_OscConfig+0x8bc>)
 8001cc8:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8001ccc:	f023 0303 	bic.w	r3, r3, #3
 8001cd0:	60d3      	str	r3, [r2, #12]
 8001cd2:	e001      	b.n	8001cd8 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3728      	adds	r7, #40	@ 0x28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	f99f808c 	.word	0xf99f808c

08001cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0e7      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d00:	4b75      	ldr	r3, [pc, #468]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d910      	bls.n	8001d30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0e:	4b72      	ldr	r3, [pc, #456]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 0207 	bic.w	r2, r3, #7
 8001d16:	4970      	ldr	r1, [pc, #448]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1e:	4b6e      	ldr	r3, [pc, #440]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0cf      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d010      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	4b66      	ldr	r3, [pc, #408]	@ (8001edc <HAL_RCC_ClockConfig+0x1f0>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d908      	bls.n	8001d5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d4c:	4b63      	ldr	r3, [pc, #396]	@ (8001edc <HAL_RCC_ClockConfig+0x1f0>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	4960      	ldr	r1, [pc, #384]	@ (8001edc <HAL_RCC_ClockConfig+0x1f0>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d04c      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d107      	bne.n	8001d82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d72:	4b5a      	ldr	r3, [pc, #360]	@ (8001edc <HAL_RCC_ClockConfig+0x1f0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d121      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e0a6      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d107      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d8a:	4b54      	ldr	r3, [pc, #336]	@ (8001edc <HAL_RCC_ClockConfig+0x1f0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d115      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e09a      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d107      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001da2:	4b4e      	ldr	r3, [pc, #312]	@ (8001edc <HAL_RCC_ClockConfig+0x1f0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e08e      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001db2:	4b4a      	ldr	r3, [pc, #296]	@ (8001edc <HAL_RCC_ClockConfig+0x1f0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e086      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dc2:	4b46      	ldr	r3, [pc, #280]	@ (8001edc <HAL_RCC_ClockConfig+0x1f0>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f023 0203 	bic.w	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4943      	ldr	r1, [pc, #268]	@ (8001edc <HAL_RCC_ClockConfig+0x1f0>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dd4:	f7fe ff84 	bl	8000ce0 <HAL_GetTick>
 8001dd8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dda:	e00a      	b.n	8001df2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ddc:	f7fe ff80 	bl	8000ce0 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e06e      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df2:	4b3a      	ldr	r3, [pc, #232]	@ (8001edc <HAL_RCC_ClockConfig+0x1f0>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 020c 	and.w	r2, r3, #12
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d1eb      	bne.n	8001ddc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d010      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	4b31      	ldr	r3, [pc, #196]	@ (8001edc <HAL_RCC_ClockConfig+0x1f0>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d208      	bcs.n	8001e32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e20:	4b2e      	ldr	r3, [pc, #184]	@ (8001edc <HAL_RCC_ClockConfig+0x1f0>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	492b      	ldr	r1, [pc, #172]	@ (8001edc <HAL_RCC_ClockConfig+0x1f0>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e32:	4b29      	ldr	r3, [pc, #164]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d210      	bcs.n	8001e62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e40:	4b25      	ldr	r3, [pc, #148]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f023 0207 	bic.w	r2, r3, #7
 8001e48:	4923      	ldr	r1, [pc, #140]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e50:	4b21      	ldr	r3, [pc, #132]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d001      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e036      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d008      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001edc <HAL_RCC_ClockConfig+0x1f0>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	4918      	ldr	r1, [pc, #96]	@ (8001edc <HAL_RCC_ClockConfig+0x1f0>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d009      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e8c:	4b13      	ldr	r3, [pc, #76]	@ (8001edc <HAL_RCC_ClockConfig+0x1f0>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4910      	ldr	r1, [pc, #64]	@ (8001edc <HAL_RCC_ClockConfig+0x1f0>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ea0:	f000 f824 	bl	8001eec <HAL_RCC_GetSysClockFreq>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8001edc <HAL_RCC_ClockConfig+0x1f0>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	091b      	lsrs	r3, r3, #4
 8001eac:	f003 030f 	and.w	r3, r3, #15
 8001eb0:	490b      	ldr	r1, [pc, #44]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1f4>)
 8001eb2:	5ccb      	ldrb	r3, [r1, r3]
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebc:	4a09      	ldr	r2, [pc, #36]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ebe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ec0:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1fc>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe febb 	bl	8000c40 <HAL_InitTick>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ece:	7afb      	ldrb	r3, [r7, #11]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40022000 	.word	0x40022000
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	08007764 	.word	0x08007764
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	20000004 	.word	0x20000004

08001eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	@ 0x24
 8001ef0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001efa:	4b3e      	ldr	r3, [pc, #248]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f04:	4b3b      	ldr	r3, [pc, #236]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_RCC_GetSysClockFreq+0x34>
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	2b0c      	cmp	r3, #12
 8001f18:	d121      	bne.n	8001f5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d11e      	bne.n	8001f5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f20:	4b34      	ldr	r3, [pc, #208]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d107      	bne.n	8001f3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f2c:	4b31      	ldr	r3, [pc, #196]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f32:	0a1b      	lsrs	r3, r3, #8
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	61fb      	str	r3, [r7, #28]
 8001f3a:	e005      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f48:	4a2b      	ldr	r2, [pc, #172]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10d      	bne.n	8001f74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d102      	bne.n	8001f6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f64:	4b25      	ldr	r3, [pc, #148]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x110>)
 8001f66:	61bb      	str	r3, [r7, #24]
 8001f68:	e004      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d101      	bne.n	8001f74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f70:	4b23      	ldr	r3, [pc, #140]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	2b0c      	cmp	r3, #12
 8001f78:	d134      	bne.n	8001fe4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d003      	beq.n	8001f92 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d003      	beq.n	8001f98 <HAL_RCC_GetSysClockFreq+0xac>
 8001f90:	e005      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f92:	4b1a      	ldr	r3, [pc, #104]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x110>)
 8001f94:	617b      	str	r3, [r7, #20]
      break;
 8001f96:	e005      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f98:	4b19      	ldr	r3, [pc, #100]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f9a:	617b      	str	r3, [r7, #20]
      break;
 8001f9c:	e002      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	617b      	str	r3, [r7, #20]
      break;
 8001fa2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fa4:	4b13      	ldr	r3, [pc, #76]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	3301      	adds	r3, #1
 8001fb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	fb03 f202 	mul.w	r2, r3, r2
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	0e5b      	lsrs	r3, r3, #25
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fe4:	69bb      	ldr	r3, [r7, #24]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3724      	adds	r7, #36	@ 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	0800777c 	.word	0x0800777c
 8001ffc:	00f42400 	.word	0x00f42400
 8002000:	007a1200 	.word	0x007a1200

08002004 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002008:	4b03      	ldr	r3, [pc, #12]	@ (8002018 <HAL_RCC_GetHCLKFreq+0x14>)
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000000 	.word	0x20000000

0800201c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002020:	f7ff fff0 	bl	8002004 <HAL_RCC_GetHCLKFreq>
 8002024:	4602      	mov	r2, r0
 8002026:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	0a1b      	lsrs	r3, r3, #8
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	4904      	ldr	r1, [pc, #16]	@ (8002044 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002032:	5ccb      	ldrb	r3, [r1, r3]
 8002034:	f003 031f 	and.w	r3, r3, #31
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000
 8002044:	08007774 	.word	0x08007774

08002048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800204c:	f7ff ffda 	bl	8002004 <HAL_RCC_GetHCLKFreq>
 8002050:	4602      	mov	r2, r0
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	0adb      	lsrs	r3, r3, #11
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	4904      	ldr	r1, [pc, #16]	@ (8002070 <HAL_RCC_GetPCLK2Freq+0x28>)
 800205e:	5ccb      	ldrb	r3, [r1, r3]
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002068:	4618      	mov	r0, r3
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40021000 	.word	0x40021000
 8002070:	08007774 	.word	0x08007774

08002074 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800207c:	2300      	movs	r3, #0
 800207e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002080:	4b2a      	ldr	r3, [pc, #168]	@ (800212c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800208c:	f7ff f968 	bl	8001360 <HAL_PWREx_GetVoltageRange>
 8002090:	6178      	str	r0, [r7, #20]
 8002092:	e014      	b.n	80020be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002094:	4b25      	ldr	r3, [pc, #148]	@ (800212c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002098:	4a24      	ldr	r2, [pc, #144]	@ (800212c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800209a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800209e:	6593      	str	r3, [r2, #88]	@ 0x58
 80020a0:	4b22      	ldr	r3, [pc, #136]	@ (800212c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020ac:	f7ff f958 	bl	8001360 <HAL_PWREx_GetVoltageRange>
 80020b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020b2:	4b1e      	ldr	r3, [pc, #120]	@ (800212c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b6:	4a1d      	ldr	r2, [pc, #116]	@ (800212c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020c4:	d10b      	bne.n	80020de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b80      	cmp	r3, #128	@ 0x80
 80020ca:	d919      	bls.n	8002100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80020d0:	d902      	bls.n	80020d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020d2:	2302      	movs	r3, #2
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	e013      	b.n	8002100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020d8:	2301      	movs	r3, #1
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	e010      	b.n	8002100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b80      	cmp	r3, #128	@ 0x80
 80020e2:	d902      	bls.n	80020ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020e4:	2303      	movs	r3, #3
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	e00a      	b.n	8002100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b80      	cmp	r3, #128	@ 0x80
 80020ee:	d102      	bne.n	80020f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020f0:	2302      	movs	r3, #2
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	e004      	b.n	8002100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b70      	cmp	r3, #112	@ 0x70
 80020fa:	d101      	bne.n	8002100 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020fc:	2301      	movs	r3, #1
 80020fe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002100:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f023 0207 	bic.w	r2, r3, #7
 8002108:	4909      	ldr	r1, [pc, #36]	@ (8002130 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002110:	4b07      	ldr	r3, [pc, #28]	@ (8002130 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	429a      	cmp	r2, r3
 800211c:	d001      	beq.n	8002122 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40021000 	.word	0x40021000
 8002130:	40022000 	.word	0x40022000

08002134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800213c:	2300      	movs	r3, #0
 800213e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002140:	2300      	movs	r3, #0
 8002142:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 809e 	beq.w	800228e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002152:	2300      	movs	r3, #0
 8002154:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002156:	4b46      	ldr	r3, [pc, #280]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002166:	2300      	movs	r3, #0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00d      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800216c:	4b40      	ldr	r3, [pc, #256]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800216e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002170:	4a3f      	ldr	r2, [pc, #252]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002176:	6593      	str	r3, [r2, #88]	@ 0x58
 8002178:	4b3d      	ldr	r3, [pc, #244]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800217a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002184:	2301      	movs	r3, #1
 8002186:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002188:	4b3a      	ldr	r3, [pc, #232]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a39      	ldr	r2, [pc, #228]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800218e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002192:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002194:	f7fe fda4 	bl	8000ce0 <HAL_GetTick>
 8002198:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800219a:	e009      	b.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219c:	f7fe fda0 	bl	8000ce0 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d902      	bls.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	74fb      	strb	r3, [r7, #19]
        break;
 80021ae:	e005      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021b0:	4b30      	ldr	r3, [pc, #192]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0ef      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80021bc:	7cfb      	ldrb	r3, [r7, #19]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d15a      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01e      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d019      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021de:	4b24      	ldr	r3, [pc, #144]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021ea:	4b21      	ldr	r3, [pc, #132]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002200:	4a1b      	ldr	r2, [pc, #108]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002202:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002206:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800220a:	4a19      	ldr	r2, [pc, #100]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d016      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7fe fd60 	bl	8000ce0 <HAL_GetTick>
 8002220:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002222:	e00b      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002224:	f7fe fd5c 	bl	8000ce0 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d902      	bls.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	74fb      	strb	r3, [r7, #19]
            break;
 800223a:	e006      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223c:	4b0c      	ldr	r3, [pc, #48]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800223e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0ec      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800224a:	7cfb      	ldrb	r3, [r7, #19]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10b      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002250:	4b07      	ldr	r3, [pc, #28]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002256:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	4904      	ldr	r1, [pc, #16]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002266:	e009      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	74bb      	strb	r3, [r7, #18]
 800226c:	e006      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000
 8002274:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800227c:	7c7b      	ldrb	r3, [r7, #17]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d105      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002282:	4b6e      	ldr	r3, [pc, #440]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002286:	4a6d      	ldr	r2, [pc, #436]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800228c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800229a:	4b68      	ldr	r3, [pc, #416]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800229c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a0:	f023 0203 	bic.w	r2, r3, #3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4964      	ldr	r1, [pc, #400]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00a      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022bc:	4b5f      	ldr	r3, [pc, #380]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c2:	f023 020c 	bic.w	r2, r3, #12
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	495c      	ldr	r1, [pc, #368]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022de:	4b57      	ldr	r3, [pc, #348]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4953      	ldr	r1, [pc, #332]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002300:	4b4e      	ldr	r3, [pc, #312]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002306:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	494b      	ldr	r1, [pc, #300]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00a      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002322:	4b46      	ldr	r3, [pc, #280]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002328:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4942      	ldr	r1, [pc, #264]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002344:	4b3d      	ldr	r3, [pc, #244]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002352:	493a      	ldr	r1, [pc, #232]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002354:	4313      	orrs	r3, r2
 8002356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002366:	4b35      	ldr	r3, [pc, #212]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	4931      	ldr	r1, [pc, #196]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002388:	4b2c      	ldr	r3, [pc, #176]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800238e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	4929      	ldr	r1, [pc, #164]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023aa:	4b24      	ldr	r3, [pc, #144]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	4920      	ldr	r1, [pc, #128]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d015      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023cc:	4b1b      	ldr	r3, [pc, #108]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023da:	4918      	ldr	r1, [pc, #96]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023ea:	d105      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ec:	4b13      	ldr	r3, [pc, #76]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4a12      	ldr	r2, [pc, #72]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d015      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002404:	4b0d      	ldr	r3, [pc, #52]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002412:	490a      	ldr	r1, [pc, #40]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002422:	d105      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002424:	4b05      	ldr	r3, [pc, #20]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a04      	ldr	r2, [pc, #16]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800242a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800242e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002430:	7cbb      	ldrb	r3, [r7, #18]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000

08002440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e049      	b.n	80024e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe fa5c 	bl	8000924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3304      	adds	r3, #4
 800247c:	4619      	mov	r1, r3
 800247e:	4610      	mov	r0, r2
 8002480:	f000 fb52 	bl	8002b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e049      	b.n	8002594 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d106      	bne.n	800251a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f841 	bl	800259c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2202      	movs	r2, #2
 800251e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3304      	adds	r3, #4
 800252a:	4619      	mov	r1, r3
 800252c:	4610      	mov	r0, r2
 800252e:	f000 fafb 	bl	8002b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d109      	bne.n	80025d4 <HAL_TIM_PWM_Start+0x24>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	bf14      	ite	ne
 80025cc:	2301      	movne	r3, #1
 80025ce:	2300      	moveq	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	e03c      	b.n	800264e <HAL_TIM_PWM_Start+0x9e>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d109      	bne.n	80025ee <HAL_TIM_PWM_Start+0x3e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	bf14      	ite	ne
 80025e6:	2301      	movne	r3, #1
 80025e8:	2300      	moveq	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	e02f      	b.n	800264e <HAL_TIM_PWM_Start+0x9e>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d109      	bne.n	8002608 <HAL_TIM_PWM_Start+0x58>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	bf14      	ite	ne
 8002600:	2301      	movne	r3, #1
 8002602:	2300      	moveq	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	e022      	b.n	800264e <HAL_TIM_PWM_Start+0x9e>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	2b0c      	cmp	r3, #12
 800260c:	d109      	bne.n	8002622 <HAL_TIM_PWM_Start+0x72>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b01      	cmp	r3, #1
 8002618:	bf14      	ite	ne
 800261a:	2301      	movne	r3, #1
 800261c:	2300      	moveq	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	e015      	b.n	800264e <HAL_TIM_PWM_Start+0x9e>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b10      	cmp	r3, #16
 8002626:	d109      	bne.n	800263c <HAL_TIM_PWM_Start+0x8c>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b01      	cmp	r3, #1
 8002632:	bf14      	ite	ne
 8002634:	2301      	movne	r3, #1
 8002636:	2300      	moveq	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	e008      	b.n	800264e <HAL_TIM_PWM_Start+0x9e>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b01      	cmp	r3, #1
 8002646:	bf14      	ite	ne
 8002648:	2301      	movne	r3, #1
 800264a:	2300      	moveq	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e07e      	b.n	8002754 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d104      	bne.n	8002666 <HAL_TIM_PWM_Start+0xb6>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002664:	e023      	b.n	80026ae <HAL_TIM_PWM_Start+0xfe>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b04      	cmp	r3, #4
 800266a:	d104      	bne.n	8002676 <HAL_TIM_PWM_Start+0xc6>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002674:	e01b      	b.n	80026ae <HAL_TIM_PWM_Start+0xfe>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b08      	cmp	r3, #8
 800267a:	d104      	bne.n	8002686 <HAL_TIM_PWM_Start+0xd6>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002684:	e013      	b.n	80026ae <HAL_TIM_PWM_Start+0xfe>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b0c      	cmp	r3, #12
 800268a:	d104      	bne.n	8002696 <HAL_TIM_PWM_Start+0xe6>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002694:	e00b      	b.n	80026ae <HAL_TIM_PWM_Start+0xfe>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b10      	cmp	r3, #16
 800269a:	d104      	bne.n	80026a6 <HAL_TIM_PWM_Start+0xf6>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026a4:	e003      	b.n	80026ae <HAL_TIM_PWM_Start+0xfe>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2202      	movs	r2, #2
 80026aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2201      	movs	r2, #1
 80026b4:	6839      	ldr	r1, [r7, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 fdbe 	bl	8003238 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a26      	ldr	r2, [pc, #152]	@ (800275c <HAL_TIM_PWM_Start+0x1ac>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d009      	beq.n	80026da <HAL_TIM_PWM_Start+0x12a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a25      	ldr	r2, [pc, #148]	@ (8002760 <HAL_TIM_PWM_Start+0x1b0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d004      	beq.n	80026da <HAL_TIM_PWM_Start+0x12a>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a23      	ldr	r2, [pc, #140]	@ (8002764 <HAL_TIM_PWM_Start+0x1b4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_TIM_PWM_Start+0x12e>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <HAL_TIM_PWM_Start+0x130>
 80026de:	2300      	movs	r3, #0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d007      	beq.n	80026f4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a18      	ldr	r2, [pc, #96]	@ (800275c <HAL_TIM_PWM_Start+0x1ac>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d009      	beq.n	8002712 <HAL_TIM_PWM_Start+0x162>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002706:	d004      	beq.n	8002712 <HAL_TIM_PWM_Start+0x162>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a14      	ldr	r2, [pc, #80]	@ (8002760 <HAL_TIM_PWM_Start+0x1b0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d115      	bne.n	800273e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	4b13      	ldr	r3, [pc, #76]	@ (8002768 <HAL_TIM_PWM_Start+0x1b8>)
 800271a:	4013      	ands	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2b06      	cmp	r3, #6
 8002722:	d015      	beq.n	8002750 <HAL_TIM_PWM_Start+0x1a0>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800272a:	d011      	beq.n	8002750 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800273c:	e008      	b.n	8002750 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0201 	orr.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	e000      	b.n	8002752 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002750:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40012c00 	.word	0x40012c00
 8002760:	40014000 	.word	0x40014000
 8002764:	40014400 	.word	0x40014400
 8002768:	00010007 	.word	0x00010007

0800276c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002786:	2302      	movs	r3, #2
 8002788:	e0ff      	b.n	800298a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b14      	cmp	r3, #20
 8002796:	f200 80f0 	bhi.w	800297a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800279a:	a201      	add	r2, pc, #4	@ (adr r2, 80027a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800279c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a0:	080027f5 	.word	0x080027f5
 80027a4:	0800297b 	.word	0x0800297b
 80027a8:	0800297b 	.word	0x0800297b
 80027ac:	0800297b 	.word	0x0800297b
 80027b0:	08002835 	.word	0x08002835
 80027b4:	0800297b 	.word	0x0800297b
 80027b8:	0800297b 	.word	0x0800297b
 80027bc:	0800297b 	.word	0x0800297b
 80027c0:	08002877 	.word	0x08002877
 80027c4:	0800297b 	.word	0x0800297b
 80027c8:	0800297b 	.word	0x0800297b
 80027cc:	0800297b 	.word	0x0800297b
 80027d0:	080028b7 	.word	0x080028b7
 80027d4:	0800297b 	.word	0x0800297b
 80027d8:	0800297b 	.word	0x0800297b
 80027dc:	0800297b 	.word	0x0800297b
 80027e0:	080028f9 	.word	0x080028f9
 80027e4:	0800297b 	.word	0x0800297b
 80027e8:	0800297b 	.word	0x0800297b
 80027ec:	0800297b 	.word	0x0800297b
 80027f0:	08002939 	.word	0x08002939
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fa04 	bl	8002c08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699a      	ldr	r2, [r3, #24]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0208 	orr.w	r2, r2, #8
 800280e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699a      	ldr	r2, [r3, #24]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0204 	bic.w	r2, r2, #4
 800281e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6999      	ldr	r1, [r3, #24]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	619a      	str	r2, [r3, #24]
      break;
 8002832:	e0a5      	b.n	8002980 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fa60 	bl	8002d00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800284e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699a      	ldr	r2, [r3, #24]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800285e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6999      	ldr	r1, [r3, #24]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	021a      	lsls	r2, r3, #8
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	619a      	str	r2, [r3, #24]
      break;
 8002874:	e084      	b.n	8002980 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68b9      	ldr	r1, [r7, #8]
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fab9 	bl	8002df4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	69da      	ldr	r2, [r3, #28]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0208 	orr.w	r2, r2, #8
 8002890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	69da      	ldr	r2, [r3, #28]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0204 	bic.w	r2, r2, #4
 80028a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	69d9      	ldr	r1, [r3, #28]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	61da      	str	r2, [r3, #28]
      break;
 80028b4:	e064      	b.n	8002980 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68b9      	ldr	r1, [r7, #8]
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fb11 	bl	8002ee4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69da      	ldr	r2, [r3, #28]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	69da      	ldr	r2, [r3, #28]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	69d9      	ldr	r1, [r3, #28]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	021a      	lsls	r2, r3, #8
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	61da      	str	r2, [r3, #28]
      break;
 80028f6:	e043      	b.n	8002980 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fb4e 	bl	8002fa0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0208 	orr.w	r2, r2, #8
 8002912:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0204 	bic.w	r2, r2, #4
 8002922:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002936:	e023      	b.n	8002980 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fb86 	bl	8003050 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002952:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002962:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	021a      	lsls	r2, r3, #8
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002978:	e002      	b.n	8002980 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	75fb      	strb	r3, [r7, #23]
      break;
 800297e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002988:	7dfb      	ldrb	r3, [r7, #23]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop

08002994 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_TIM_ConfigClockSource+0x1c>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e0b6      	b.n	8002b1e <HAL_TIM_ConfigClockSource+0x18a>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80029d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029ec:	d03e      	beq.n	8002a6c <HAL_TIM_ConfigClockSource+0xd8>
 80029ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029f2:	f200 8087 	bhi.w	8002b04 <HAL_TIM_ConfigClockSource+0x170>
 80029f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029fa:	f000 8086 	beq.w	8002b0a <HAL_TIM_ConfigClockSource+0x176>
 80029fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a02:	d87f      	bhi.n	8002b04 <HAL_TIM_ConfigClockSource+0x170>
 8002a04:	2b70      	cmp	r3, #112	@ 0x70
 8002a06:	d01a      	beq.n	8002a3e <HAL_TIM_ConfigClockSource+0xaa>
 8002a08:	2b70      	cmp	r3, #112	@ 0x70
 8002a0a:	d87b      	bhi.n	8002b04 <HAL_TIM_ConfigClockSource+0x170>
 8002a0c:	2b60      	cmp	r3, #96	@ 0x60
 8002a0e:	d050      	beq.n	8002ab2 <HAL_TIM_ConfigClockSource+0x11e>
 8002a10:	2b60      	cmp	r3, #96	@ 0x60
 8002a12:	d877      	bhi.n	8002b04 <HAL_TIM_ConfigClockSource+0x170>
 8002a14:	2b50      	cmp	r3, #80	@ 0x50
 8002a16:	d03c      	beq.n	8002a92 <HAL_TIM_ConfigClockSource+0xfe>
 8002a18:	2b50      	cmp	r3, #80	@ 0x50
 8002a1a:	d873      	bhi.n	8002b04 <HAL_TIM_ConfigClockSource+0x170>
 8002a1c:	2b40      	cmp	r3, #64	@ 0x40
 8002a1e:	d058      	beq.n	8002ad2 <HAL_TIM_ConfigClockSource+0x13e>
 8002a20:	2b40      	cmp	r3, #64	@ 0x40
 8002a22:	d86f      	bhi.n	8002b04 <HAL_TIM_ConfigClockSource+0x170>
 8002a24:	2b30      	cmp	r3, #48	@ 0x30
 8002a26:	d064      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0x15e>
 8002a28:	2b30      	cmp	r3, #48	@ 0x30
 8002a2a:	d86b      	bhi.n	8002b04 <HAL_TIM_ConfigClockSource+0x170>
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d060      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0x15e>
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	d867      	bhi.n	8002b04 <HAL_TIM_ConfigClockSource+0x170>
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d05c      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0x15e>
 8002a38:	2b10      	cmp	r3, #16
 8002a3a:	d05a      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0x15e>
 8002a3c:	e062      	b.n	8002b04 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a4e:	f000 fbd3 	bl	80031f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	609a      	str	r2, [r3, #8]
      break;
 8002a6a:	e04f      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a7c:	f000 fbbc 	bl	80031f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a8e:	609a      	str	r2, [r3, #8]
      break;
 8002a90:	e03c      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f000 fb30 	bl	8003104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2150      	movs	r1, #80	@ 0x50
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fb89 	bl	80031c2 <TIM_ITRx_SetConfig>
      break;
 8002ab0:	e02c      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f000 fb4f 	bl	8003162 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2160      	movs	r1, #96	@ 0x60
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 fb79 	bl	80031c2 <TIM_ITRx_SetConfig>
      break;
 8002ad0:	e01c      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f000 fb10 	bl	8003104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2140      	movs	r1, #64	@ 0x40
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fb69 	bl	80031c2 <TIM_ITRx_SetConfig>
      break;
 8002af0:	e00c      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4619      	mov	r1, r3
 8002afc:	4610      	mov	r0, r2
 8002afe:	f000 fb60 	bl	80031c2 <TIM_ITRx_SetConfig>
      break;
 8002b02:	e003      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
      break;
 8002b08:	e000      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002b0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a30      	ldr	r2, [pc, #192]	@ (8002bfc <TIM_Base_SetConfig+0xd4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d003      	beq.n	8002b48 <TIM_Base_SetConfig+0x20>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b46:	d108      	bne.n	8002b5a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a27      	ldr	r2, [pc, #156]	@ (8002bfc <TIM_Base_SetConfig+0xd4>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00b      	beq.n	8002b7a <TIM_Base_SetConfig+0x52>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b68:	d007      	beq.n	8002b7a <TIM_Base_SetConfig+0x52>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a24      	ldr	r2, [pc, #144]	@ (8002c00 <TIM_Base_SetConfig+0xd8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d003      	beq.n	8002b7a <TIM_Base_SetConfig+0x52>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a23      	ldr	r2, [pc, #140]	@ (8002c04 <TIM_Base_SetConfig+0xdc>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d108      	bne.n	8002b8c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a12      	ldr	r2, [pc, #72]	@ (8002bfc <TIM_Base_SetConfig+0xd4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d007      	beq.n	8002bc8 <TIM_Base_SetConfig+0xa0>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a11      	ldr	r2, [pc, #68]	@ (8002c00 <TIM_Base_SetConfig+0xd8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d003      	beq.n	8002bc8 <TIM_Base_SetConfig+0xa0>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a10      	ldr	r2, [pc, #64]	@ (8002c04 <TIM_Base_SetConfig+0xdc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d103      	bne.n	8002bd0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d105      	bne.n	8002bee <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f023 0201 	bic.w	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	611a      	str	r2, [r3, #16]
  }
}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40014000 	.word	0x40014000
 8002c04:	40014400 	.word	0x40014400

08002c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	f023 0201 	bic.w	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0303 	bic.w	r3, r3, #3
 8002c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f023 0302 	bic.w	r3, r3, #2
 8002c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a24      	ldr	r2, [pc, #144]	@ (8002cf4 <TIM_OC1_SetConfig+0xec>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d007      	beq.n	8002c78 <TIM_OC1_SetConfig+0x70>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a23      	ldr	r2, [pc, #140]	@ (8002cf8 <TIM_OC1_SetConfig+0xf0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d003      	beq.n	8002c78 <TIM_OC1_SetConfig+0x70>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a22      	ldr	r2, [pc, #136]	@ (8002cfc <TIM_OC1_SetConfig+0xf4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d10c      	bne.n	8002c92 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f023 0308 	bic.w	r3, r3, #8
 8002c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f023 0304 	bic.w	r3, r3, #4
 8002c90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a17      	ldr	r2, [pc, #92]	@ (8002cf4 <TIM_OC1_SetConfig+0xec>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d007      	beq.n	8002caa <TIM_OC1_SetConfig+0xa2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a16      	ldr	r2, [pc, #88]	@ (8002cf8 <TIM_OC1_SetConfig+0xf0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d003      	beq.n	8002caa <TIM_OC1_SetConfig+0xa2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a15      	ldr	r2, [pc, #84]	@ (8002cfc <TIM_OC1_SetConfig+0xf4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d111      	bne.n	8002cce <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	621a      	str	r2, [r3, #32]
}
 8002ce8:	bf00      	nop
 8002cea:	371c      	adds	r7, #28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	40012c00 	.word	0x40012c00
 8002cf8:	40014000 	.word	0x40014000
 8002cfc:	40014400 	.word	0x40014400

08002d00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	f023 0210 	bic.w	r2, r3, #16
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f023 0320 	bic.w	r3, r3, #32
 8002d4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a22      	ldr	r2, [pc, #136]	@ (8002de8 <TIM_OC2_SetConfig+0xe8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d10d      	bne.n	8002d80 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a19      	ldr	r2, [pc, #100]	@ (8002de8 <TIM_OC2_SetConfig+0xe8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d007      	beq.n	8002d98 <TIM_OC2_SetConfig+0x98>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a18      	ldr	r2, [pc, #96]	@ (8002dec <TIM_OC2_SetConfig+0xec>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d003      	beq.n	8002d98 <TIM_OC2_SetConfig+0x98>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a17      	ldr	r2, [pc, #92]	@ (8002df0 <TIM_OC2_SetConfig+0xf0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d113      	bne.n	8002dc0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002da6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	621a      	str	r2, [r3, #32]
}
 8002dda:	bf00      	nop
 8002ddc:	371c      	adds	r7, #28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40012c00 	.word	0x40012c00
 8002dec:	40014000 	.word	0x40014000
 8002df0:	40014400 	.word	0x40014400

08002df4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 0303 	bic.w	r3, r3, #3
 8002e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	021b      	lsls	r3, r3, #8
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a21      	ldr	r2, [pc, #132]	@ (8002ed8 <TIM_OC3_SetConfig+0xe4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d10d      	bne.n	8002e72 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a18      	ldr	r2, [pc, #96]	@ (8002ed8 <TIM_OC3_SetConfig+0xe4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d007      	beq.n	8002e8a <TIM_OC3_SetConfig+0x96>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a17      	ldr	r2, [pc, #92]	@ (8002edc <TIM_OC3_SetConfig+0xe8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d003      	beq.n	8002e8a <TIM_OC3_SetConfig+0x96>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a16      	ldr	r2, [pc, #88]	@ (8002ee0 <TIM_OC3_SetConfig+0xec>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d113      	bne.n	8002eb2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	621a      	str	r2, [r3, #32]
}
 8002ecc:	bf00      	nop
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40012c00 	.word	0x40012c00
 8002edc:	40014000 	.word	0x40014000
 8002ee0:	40014400 	.word	0x40014400

08002ee4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	021b      	lsls	r3, r3, #8
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	031b      	lsls	r3, r3, #12
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a14      	ldr	r2, [pc, #80]	@ (8002f94 <TIM_OC4_SetConfig+0xb0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d007      	beq.n	8002f58 <TIM_OC4_SetConfig+0x74>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a13      	ldr	r2, [pc, #76]	@ (8002f98 <TIM_OC4_SetConfig+0xb4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d003      	beq.n	8002f58 <TIM_OC4_SetConfig+0x74>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a12      	ldr	r2, [pc, #72]	@ (8002f9c <TIM_OC4_SetConfig+0xb8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d109      	bne.n	8002f6c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	019b      	lsls	r3, r3, #6
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	621a      	str	r2, [r3, #32]
}
 8002f86:	bf00      	nop
 8002f88:	371c      	adds	r7, #28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40012c00 	.word	0x40012c00
 8002f98:	40014000 	.word	0x40014000
 8002f9c:	40014400 	.word	0x40014400

08002fa0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002fe4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	041b      	lsls	r3, r3, #16
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a13      	ldr	r2, [pc, #76]	@ (8003044 <TIM_OC5_SetConfig+0xa4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d007      	beq.n	800300a <TIM_OC5_SetConfig+0x6a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a12      	ldr	r2, [pc, #72]	@ (8003048 <TIM_OC5_SetConfig+0xa8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d003      	beq.n	800300a <TIM_OC5_SetConfig+0x6a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a11      	ldr	r2, [pc, #68]	@ (800304c <TIM_OC5_SetConfig+0xac>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d109      	bne.n	800301e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003010:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	021b      	lsls	r3, r3, #8
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	4313      	orrs	r3, r2
 800301c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	621a      	str	r2, [r3, #32]
}
 8003038:	bf00      	nop
 800303a:	371c      	adds	r7, #28
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	40012c00 	.word	0x40012c00
 8003048:	40014000 	.word	0x40014000
 800304c:	40014400 	.word	0x40014400

08003050 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800307e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4313      	orrs	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003096:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	051b      	lsls	r3, r3, #20
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a14      	ldr	r2, [pc, #80]	@ (80030f8 <TIM_OC6_SetConfig+0xa8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d007      	beq.n	80030bc <TIM_OC6_SetConfig+0x6c>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a13      	ldr	r2, [pc, #76]	@ (80030fc <TIM_OC6_SetConfig+0xac>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d003      	beq.n	80030bc <TIM_OC6_SetConfig+0x6c>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a12      	ldr	r2, [pc, #72]	@ (8003100 <TIM_OC6_SetConfig+0xb0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d109      	bne.n	80030d0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	029b      	lsls	r3, r3, #10
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	621a      	str	r2, [r3, #32]
}
 80030ea:	bf00      	nop
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40012c00 	.word	0x40012c00
 80030fc:	40014000 	.word	0x40014000
 8003100:	40014400 	.word	0x40014400

08003104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	f023 0201 	bic.w	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800312e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f023 030a 	bic.w	r3, r3, #10
 8003140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	4313      	orrs	r3, r2
 8003148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	621a      	str	r2, [r3, #32]
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003162:	b480      	push	{r7}
 8003164:	b087      	sub	sp, #28
 8003166:	af00      	add	r7, sp, #0
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	f023 0210 	bic.w	r2, r3, #16
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800318c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	031b      	lsls	r3, r3, #12
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800319e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	621a      	str	r2, [r3, #32]
}
 80031b6:	bf00      	nop
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b085      	sub	sp, #20
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	f043 0307 	orr.w	r3, r3, #7
 80031e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	609a      	str	r2, [r3, #8]
}
 80031ec:	bf00      	nop
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003212:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	021a      	lsls	r2, r3, #8
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	431a      	orrs	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	4313      	orrs	r3, r2
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	4313      	orrs	r3, r2
 8003224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	609a      	str	r2, [r3, #8]
}
 800322c:	bf00      	nop
 800322e:	371c      	adds	r7, #28
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f003 031f 	and.w	r3, r3, #31
 800324a:	2201      	movs	r2, #1
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a1a      	ldr	r2, [r3, #32]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	43db      	mvns	r3, r3
 800325a:	401a      	ands	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a1a      	ldr	r2, [r3, #32]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	fa01 f303 	lsl.w	r3, r1, r3
 8003270:	431a      	orrs	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	621a      	str	r2, [r3, #32]
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d109      	bne.n	80032a8 <HAL_TIMEx_PWMN_Start+0x24>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b01      	cmp	r3, #1
 800329e:	bf14      	ite	ne
 80032a0:	2301      	movne	r3, #1
 80032a2:	2300      	moveq	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	e022      	b.n	80032ee <HAL_TIMEx_PWMN_Start+0x6a>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d109      	bne.n	80032c2 <HAL_TIMEx_PWMN_Start+0x3e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	bf14      	ite	ne
 80032ba:	2301      	movne	r3, #1
 80032bc:	2300      	moveq	r3, #0
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	e015      	b.n	80032ee <HAL_TIMEx_PWMN_Start+0x6a>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d109      	bne.n	80032dc <HAL_TIMEx_PWMN_Start+0x58>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	bf14      	ite	ne
 80032d4:	2301      	movne	r3, #1
 80032d6:	2300      	moveq	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	e008      	b.n	80032ee <HAL_TIMEx_PWMN_Start+0x6a>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e05a      	b.n	80033ac <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d104      	bne.n	8003306 <HAL_TIMEx_PWMN_Start+0x82>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003304:	e013      	b.n	800332e <HAL_TIMEx_PWMN_Start+0xaa>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b04      	cmp	r3, #4
 800330a:	d104      	bne.n	8003316 <HAL_TIMEx_PWMN_Start+0x92>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003314:	e00b      	b.n	800332e <HAL_TIMEx_PWMN_Start+0xaa>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b08      	cmp	r3, #8
 800331a:	d104      	bne.n	8003326 <HAL_TIMEx_PWMN_Start+0xa2>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003324:	e003      	b.n	800332e <HAL_TIMEx_PWMN_Start+0xaa>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2202      	movs	r2, #2
 800332a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2204      	movs	r2, #4
 8003334:	6839      	ldr	r1, [r7, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f000 f920 	bl	800357c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800334a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a18      	ldr	r2, [pc, #96]	@ (80033b4 <HAL_TIMEx_PWMN_Start+0x130>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d009      	beq.n	800336a <HAL_TIMEx_PWMN_Start+0xe6>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800335e:	d004      	beq.n	800336a <HAL_TIMEx_PWMN_Start+0xe6>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a14      	ldr	r2, [pc, #80]	@ (80033b8 <HAL_TIMEx_PWMN_Start+0x134>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d115      	bne.n	8003396 <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	4b12      	ldr	r3, [pc, #72]	@ (80033bc <HAL_TIMEx_PWMN_Start+0x138>)
 8003372:	4013      	ands	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2b06      	cmp	r3, #6
 800337a:	d015      	beq.n	80033a8 <HAL_TIMEx_PWMN_Start+0x124>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003382:	d011      	beq.n	80033a8 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003394:	e008      	b.n	80033a8 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0201 	orr.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	e000      	b.n	80033aa <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40012c00 	.word	0x40012c00
 80033b8:	40014000 	.word	0x40014000
 80033bc:	00010007 	.word	0x00010007

080033c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e04f      	b.n	8003478 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a21      	ldr	r2, [pc, #132]	@ (8003484 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d108      	bne.n	8003414 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003408:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4313      	orrs	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800341a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a14      	ldr	r2, [pc, #80]	@ (8003484 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d009      	beq.n	800344c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003440:	d004      	beq.n	800344c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a10      	ldr	r2, [pc, #64]	@ (8003488 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d10c      	bne.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003452:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	4313      	orrs	r3, r2
 800345c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	40012c00 	.word	0x40012c00
 8003488:	40014000 	.word	0x40014000

0800348c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e060      	b.n	800356a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	041b      	lsls	r3, r3, #16
 800351e:	4313      	orrs	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a14      	ldr	r2, [pc, #80]	@ (8003578 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d115      	bne.n	8003558 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003536:	051b      	lsls	r3, r3, #20
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40012c00 	.word	0x40012c00

0800357c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	2204      	movs	r2, #4
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a1a      	ldr	r2, [r3, #32]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	43db      	mvns	r3, r3
 800359e:	401a      	ands	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a1a      	ldr	r2, [r3, #32]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	fa01 f303 	lsl.w	r3, r1, r3
 80035b4:	431a      	orrs	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	621a      	str	r2, [r3, #32]
}
 80035ba:	bf00      	nop
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e040      	b.n	800365a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d106      	bne.n	80035ee <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7fd f9f3 	bl	80009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2224      	movs	r2, #36	@ 0x24
 80035f2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fe7d 	bl	800430c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fc20 	bl	8003e58 <UART_SetConfig>
 8003618:	4603      	mov	r3, r0
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e01b      	b.n	800365a <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003630:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003640:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0201 	orr.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fefc 	bl	8004450 <UART_CheckIdleState>
 8003658:	4603      	mov	r3, r0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b08a      	sub	sp, #40	@ 0x28
 8003666:	af02      	add	r7, sp, #8
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	4613      	mov	r3, r2
 8003670:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003676:	2b20      	cmp	r3, #32
 8003678:	d177      	bne.n	800376a <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <HAL_UART_Transmit+0x24>
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e070      	b.n	800376c <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2221      	movs	r2, #33	@ 0x21
 8003696:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003698:	f7fd fb22 	bl	8000ce0 <HAL_GetTick>
 800369c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	88fa      	ldrh	r2, [r7, #6]
 80036a2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	88fa      	ldrh	r2, [r7, #6]
 80036aa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036b6:	d108      	bne.n	80036ca <HAL_UART_Transmit+0x68>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d104      	bne.n	80036ca <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80036c0:	2300      	movs	r3, #0
 80036c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	61bb      	str	r3, [r7, #24]
 80036c8:	e003      	b.n	80036d2 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036d2:	e02f      	b.n	8003734 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	2200      	movs	r2, #0
 80036dc:	2180      	movs	r1, #128	@ 0x80
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 ff5e 	bl	80045a0 <UART_WaitOnFlagUntilTimeout>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d004      	beq.n	80036f4 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2220      	movs	r2, #32
 80036ee:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e03b      	b.n	800376c <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10b      	bne.n	8003712 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	881a      	ldrh	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003706:	b292      	uxth	r2, r2
 8003708:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	3302      	adds	r3, #2
 800370e:	61bb      	str	r3, [r7, #24]
 8003710:	e007      	b.n	8003722 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	781a      	ldrb	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	3301      	adds	r3, #1
 8003720:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1c9      	bne.n	80036d4 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2200      	movs	r2, #0
 8003748:	2140      	movs	r1, #64	@ 0x40
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 ff28 	bl	80045a0 <UART_WaitOnFlagUntilTimeout>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d004      	beq.n	8003760 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2220      	movs	r2, #32
 800375a:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e005      	b.n	800376c <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	e000      	b.n	800376c <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800376a:	2302      	movs	r3, #2
  }
}
 800376c:	4618      	mov	r0, r3
 800376e:	3720      	adds	r7, #32
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08a      	sub	sp, #40	@ 0x28
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	4613      	mov	r3, r2
 8003780:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003788:	2b20      	cmp	r3, #32
 800378a:	d137      	bne.n	80037fc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_UART_Receive_IT+0x24>
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e030      	b.n	80037fe <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a18      	ldr	r2, [pc, #96]	@ (8003808 <HAL_UART_Receive_IT+0x94>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d01f      	beq.n	80037ec <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d018      	beq.n	80037ec <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	e853 3f00 	ldrex	r3, [r3]
 80037c6:	613b      	str	r3, [r7, #16]
   return(result);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d8:	623b      	str	r3, [r7, #32]
 80037da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037dc:	69f9      	ldr	r1, [r7, #28]
 80037de:	6a3a      	ldr	r2, [r7, #32]
 80037e0:	e841 2300 	strex	r3, r2, [r1]
 80037e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1e6      	bne.n	80037ba <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037ec:	88fb      	ldrh	r3, [r7, #6]
 80037ee:	461a      	mov	r2, r3
 80037f0:	68b9      	ldr	r1, [r7, #8]
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 ff42 	bl	800467c <UART_Start_Receive_IT>
 80037f8:	4603      	mov	r3, r0
 80037fa:	e000      	b.n	80037fe <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037fc:	2302      	movs	r3, #2
  }
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3728      	adds	r7, #40	@ 0x28
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40008000 	.word	0x40008000

0800380c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b0ba      	sub	sp, #232	@ 0xe8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003832:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003836:	f640 030f 	movw	r3, #2063	@ 0x80f
 800383a:	4013      	ands	r3, r2
 800383c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003840:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d115      	bne.n	8003874 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00f      	beq.n	8003874 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b00      	cmp	r3, #0
 800385e:	d009      	beq.n	8003874 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 82ca 	beq.w	8003dfe <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	4798      	blx	r3
      }
      return;
 8003872:	e2c4      	b.n	8003dfe <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003874:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 8117 	beq.w	8003aac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800387e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800388a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800388e:	4b85      	ldr	r3, [pc, #532]	@ (8003aa4 <HAL_UART_IRQHandler+0x298>)
 8003890:	4013      	ands	r3, r2
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 810a 	beq.w	8003aac <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d011      	beq.n	80038c8 <HAL_UART_IRQHandler+0xbc>
 80038a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00b      	beq.n	80038c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2201      	movs	r2, #1
 80038b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038be:	f043 0201 	orr.w	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d011      	beq.n	80038f8 <HAL_UART_IRQHandler+0xec>
 80038d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00b      	beq.n	80038f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2202      	movs	r2, #2
 80038e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ee:	f043 0204 	orr.w	r2, r3, #4
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	d011      	beq.n	8003928 <HAL_UART_IRQHandler+0x11c>
 8003904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00b      	beq.n	8003928 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2204      	movs	r2, #4
 8003916:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800391e:	f043 0202 	orr.w	r2, r3, #2
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d017      	beq.n	8003964 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b00      	cmp	r3, #0
 800393e:	d105      	bne.n	800394c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003944:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00b      	beq.n	8003964 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2208      	movs	r2, #8
 8003952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800395a:	f043 0208 	orr.w	r2, r3, #8
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003968:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800396c:	2b00      	cmp	r3, #0
 800396e:	d012      	beq.n	8003996 <HAL_UART_IRQHandler+0x18a>
 8003970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003974:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00c      	beq.n	8003996 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003984:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800398c:	f043 0220 	orr.w	r2, r3, #32
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 8230 	beq.w	8003e02 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80039a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00d      	beq.n	80039ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80039ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039b2:	f003 0320 	and.w	r3, r3, #32
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d007      	beq.n	80039ca <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039de:	2b40      	cmp	r3, #64	@ 0x40
 80039e0:	d005      	beq.n	80039ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80039e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d04f      	beq.n	8003a8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 ff0a 	bl	8004808 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039fe:	2b40      	cmp	r3, #64	@ 0x40
 8003a00:	d141      	bne.n	8003a86 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3308      	adds	r3, #8
 8003a08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a10:	e853 3f00 	ldrex	r3, [r3]
 8003a14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3308      	adds	r3, #8
 8003a2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1d9      	bne.n	8003a02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d013      	beq.n	8003a7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a5a:	4a13      	ldr	r2, [pc, #76]	@ (8003aa8 <HAL_UART_IRQHandler+0x29c>)
 8003a5c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fd fa97 	bl	8000f96 <HAL_DMA_Abort_IT>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d017      	beq.n	8003a9e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7c:	e00f      	b.n	8003a9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f9d4 	bl	8003e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a84:	e00b      	b.n	8003a9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f9d0 	bl	8003e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	e007      	b.n	8003a9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f9cc 	bl	8003e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003a9c:	e1b1      	b.n	8003e02 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9e:	bf00      	nop
    return;
 8003aa0:	e1af      	b.n	8003e02 <HAL_UART_IRQHandler+0x5f6>
 8003aa2:	bf00      	nop
 8003aa4:	04000120 	.word	0x04000120
 8003aa8:	080048d1 	.word	0x080048d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	f040 816a 	bne.w	8003d8a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aba:	f003 0310 	and.w	r3, r3, #16
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 8163 	beq.w	8003d8a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 815c 	beq.w	8003d8a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2210      	movs	r2, #16
 8003ad8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae4:	2b40      	cmp	r3, #64	@ 0x40
 8003ae6:	f040 80d4 	bne.w	8003c92 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003af6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 80ad 	beq.w	8003c5a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	f080 80a5 	bcs.w	8003c5a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f040 8086 	bne.w	8003c38 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003b56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b5a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b66:	e841 2300 	strex	r3, r2, [r1]
 8003b6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1da      	bne.n	8003b2c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3308      	adds	r3, #8
 8003b7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b88:	f023 0301 	bic.w	r3, r3, #1
 8003b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3308      	adds	r3, #8
 8003b96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b9a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ba2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ba6:	e841 2300 	strex	r3, r2, [r1]
 8003baa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003bac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1e1      	bne.n	8003b76 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3308      	adds	r3, #8
 8003bb8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003bc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003bd6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003bd8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003bdc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003be4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e3      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c00:	e853 3f00 	ldrex	r3, [r3]
 8003c04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c08:	f023 0310 	bic.w	r3, r3, #16
 8003c0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c1c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c22:	e841 2300 	strex	r3, r2, [r1]
 8003c26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1e4      	bne.n	8003bf8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fd f971 	bl	8000f1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	4619      	mov	r1, r3
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f8f4 	bl	8003e40 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003c58:	e0d5      	b.n	8003e06 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c64:	429a      	cmp	r2, r3
 8003c66:	f040 80ce 	bne.w	8003e06 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	f040 80c5 	bne.w	8003e06 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c88:	4619      	mov	r1, r3
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f8d8 	bl	8003e40 <HAL_UARTEx_RxEventCallback>
      return;
 8003c90:	e0b9      	b.n	8003e06 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 80ab 	beq.w	8003e0a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003cb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80a6 	beq.w	8003e0a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cd2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ce2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ce6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ce8:	e841 2300 	strex	r3, r2, [r1]
 8003cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1e4      	bne.n	8003cbe <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3308      	adds	r3, #8
 8003cfa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	e853 3f00 	ldrex	r3, [r3]
 8003d02:	623b      	str	r3, [r7, #32]
   return(result);
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	f023 0301 	bic.w	r3, r3, #1
 8003d0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3308      	adds	r3, #8
 8003d14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d18:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e3      	bne.n	8003cf4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	e853 3f00 	ldrex	r3, [r3]
 8003d4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f023 0310 	bic.w	r3, r3, #16
 8003d54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d62:	61fb      	str	r3, [r7, #28]
 8003d64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d66:	69b9      	ldr	r1, [r7, #24]
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	e841 2300 	strex	r3, r2, [r1]
 8003d6e:	617b      	str	r3, [r7, #20]
   return(result);
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1e4      	bne.n	8003d40 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d80:	4619      	mov	r1, r3
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f85c 	bl	8003e40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d88:	e03f      	b.n	8003e0a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00e      	beq.n	8003db4 <HAL_UART_IRQHandler+0x5a8>
 8003d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d008      	beq.n	8003db4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003daa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 ff8b 	bl	8004cc8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003db2:	e02d      	b.n	8003e10 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00e      	beq.n	8003dde <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d01c      	beq.n	8003e0e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	4798      	blx	r3
    }
    return;
 8003ddc:	e017      	b.n	8003e0e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d012      	beq.n	8003e10 <HAL_UART_IRQHandler+0x604>
 8003dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00c      	beq.n	8003e10 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fd80 	bl	80048fc <UART_EndTransmit_IT>
    return;
 8003dfc:	e008      	b.n	8003e10 <HAL_UART_IRQHandler+0x604>
      return;
 8003dfe:	bf00      	nop
 8003e00:	e006      	b.n	8003e10 <HAL_UART_IRQHandler+0x604>
    return;
 8003e02:	bf00      	nop
 8003e04:	e004      	b.n	8003e10 <HAL_UART_IRQHandler+0x604>
      return;
 8003e06:	bf00      	nop
 8003e08:	e002      	b.n	8003e10 <HAL_UART_IRQHandler+0x604>
      return;
 8003e0a:	bf00      	nop
 8003e0c:	e000      	b.n	8003e10 <HAL_UART_IRQHandler+0x604>
    return;
 8003e0e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003e10:	37e8      	adds	r7, #232	@ 0xe8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop

08003e18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e5c:	b08a      	sub	sp, #40	@ 0x28
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	431a      	orrs	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	431a      	orrs	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	4b9e      	ldr	r3, [pc, #632]	@ (8004100 <UART_SetConfig+0x2a8>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	6812      	ldr	r2, [r2, #0]
 8003e8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e90:	430b      	orrs	r3, r1
 8003e92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a93      	ldr	r2, [pc, #588]	@ (8004104 <UART_SetConfig+0x2ac>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d004      	beq.n	8003ec4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a8a      	ldr	r2, [pc, #552]	@ (8004108 <UART_SetConfig+0x2b0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d126      	bne.n	8003f30 <UART_SetConfig+0xd8>
 8003ee2:	4b8a      	ldr	r3, [pc, #552]	@ (800410c <UART_SetConfig+0x2b4>)
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	d81b      	bhi.n	8003f28 <UART_SetConfig+0xd0>
 8003ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ef8 <UART_SetConfig+0xa0>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003f09 	.word	0x08003f09
 8003efc:	08003f19 	.word	0x08003f19
 8003f00:	08003f11 	.word	0x08003f11
 8003f04:	08003f21 	.word	0x08003f21
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f0e:	e0ab      	b.n	8004068 <UART_SetConfig+0x210>
 8003f10:	2302      	movs	r3, #2
 8003f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f16:	e0a7      	b.n	8004068 <UART_SetConfig+0x210>
 8003f18:	2304      	movs	r3, #4
 8003f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f1e:	e0a3      	b.n	8004068 <UART_SetConfig+0x210>
 8003f20:	2308      	movs	r3, #8
 8003f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f26:	e09f      	b.n	8004068 <UART_SetConfig+0x210>
 8003f28:	2310      	movs	r3, #16
 8003f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f2e:	e09b      	b.n	8004068 <UART_SetConfig+0x210>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a76      	ldr	r2, [pc, #472]	@ (8004110 <UART_SetConfig+0x2b8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d138      	bne.n	8003fac <UART_SetConfig+0x154>
 8003f3a:	4b74      	ldr	r3, [pc, #464]	@ (800410c <UART_SetConfig+0x2b4>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f40:	f003 030c 	and.w	r3, r3, #12
 8003f44:	2b0c      	cmp	r3, #12
 8003f46:	d82d      	bhi.n	8003fa4 <UART_SetConfig+0x14c>
 8003f48:	a201      	add	r2, pc, #4	@ (adr r2, 8003f50 <UART_SetConfig+0xf8>)
 8003f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4e:	bf00      	nop
 8003f50:	08003f85 	.word	0x08003f85
 8003f54:	08003fa5 	.word	0x08003fa5
 8003f58:	08003fa5 	.word	0x08003fa5
 8003f5c:	08003fa5 	.word	0x08003fa5
 8003f60:	08003f95 	.word	0x08003f95
 8003f64:	08003fa5 	.word	0x08003fa5
 8003f68:	08003fa5 	.word	0x08003fa5
 8003f6c:	08003fa5 	.word	0x08003fa5
 8003f70:	08003f8d 	.word	0x08003f8d
 8003f74:	08003fa5 	.word	0x08003fa5
 8003f78:	08003fa5 	.word	0x08003fa5
 8003f7c:	08003fa5 	.word	0x08003fa5
 8003f80:	08003f9d 	.word	0x08003f9d
 8003f84:	2300      	movs	r3, #0
 8003f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f8a:	e06d      	b.n	8004068 <UART_SetConfig+0x210>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f92:	e069      	b.n	8004068 <UART_SetConfig+0x210>
 8003f94:	2304      	movs	r3, #4
 8003f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f9a:	e065      	b.n	8004068 <UART_SetConfig+0x210>
 8003f9c:	2308      	movs	r3, #8
 8003f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fa2:	e061      	b.n	8004068 <UART_SetConfig+0x210>
 8003fa4:	2310      	movs	r3, #16
 8003fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003faa:	e05d      	b.n	8004068 <UART_SetConfig+0x210>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a58      	ldr	r2, [pc, #352]	@ (8004114 <UART_SetConfig+0x2bc>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d125      	bne.n	8004002 <UART_SetConfig+0x1aa>
 8003fb6:	4b55      	ldr	r3, [pc, #340]	@ (800410c <UART_SetConfig+0x2b4>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fbc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003fc0:	2b30      	cmp	r3, #48	@ 0x30
 8003fc2:	d016      	beq.n	8003ff2 <UART_SetConfig+0x19a>
 8003fc4:	2b30      	cmp	r3, #48	@ 0x30
 8003fc6:	d818      	bhi.n	8003ffa <UART_SetConfig+0x1a2>
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	d00a      	beq.n	8003fe2 <UART_SetConfig+0x18a>
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	d814      	bhi.n	8003ffa <UART_SetConfig+0x1a2>
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <UART_SetConfig+0x182>
 8003fd4:	2b10      	cmp	r3, #16
 8003fd6:	d008      	beq.n	8003fea <UART_SetConfig+0x192>
 8003fd8:	e00f      	b.n	8003ffa <UART_SetConfig+0x1a2>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fe0:	e042      	b.n	8004068 <UART_SetConfig+0x210>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fe8:	e03e      	b.n	8004068 <UART_SetConfig+0x210>
 8003fea:	2304      	movs	r3, #4
 8003fec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ff0:	e03a      	b.n	8004068 <UART_SetConfig+0x210>
 8003ff2:	2308      	movs	r3, #8
 8003ff4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ff8:	e036      	b.n	8004068 <UART_SetConfig+0x210>
 8003ffa:	2310      	movs	r3, #16
 8003ffc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004000:	e032      	b.n	8004068 <UART_SetConfig+0x210>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a3f      	ldr	r2, [pc, #252]	@ (8004104 <UART_SetConfig+0x2ac>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d12a      	bne.n	8004062 <UART_SetConfig+0x20a>
 800400c:	4b3f      	ldr	r3, [pc, #252]	@ (800410c <UART_SetConfig+0x2b4>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004012:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004016:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800401a:	d01a      	beq.n	8004052 <UART_SetConfig+0x1fa>
 800401c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004020:	d81b      	bhi.n	800405a <UART_SetConfig+0x202>
 8004022:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004026:	d00c      	beq.n	8004042 <UART_SetConfig+0x1ea>
 8004028:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800402c:	d815      	bhi.n	800405a <UART_SetConfig+0x202>
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <UART_SetConfig+0x1e2>
 8004032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004036:	d008      	beq.n	800404a <UART_SetConfig+0x1f2>
 8004038:	e00f      	b.n	800405a <UART_SetConfig+0x202>
 800403a:	2300      	movs	r3, #0
 800403c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004040:	e012      	b.n	8004068 <UART_SetConfig+0x210>
 8004042:	2302      	movs	r3, #2
 8004044:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004048:	e00e      	b.n	8004068 <UART_SetConfig+0x210>
 800404a:	2304      	movs	r3, #4
 800404c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004050:	e00a      	b.n	8004068 <UART_SetConfig+0x210>
 8004052:	2308      	movs	r3, #8
 8004054:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004058:	e006      	b.n	8004068 <UART_SetConfig+0x210>
 800405a:	2310      	movs	r3, #16
 800405c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004060:	e002      	b.n	8004068 <UART_SetConfig+0x210>
 8004062:	2310      	movs	r3, #16
 8004064:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a25      	ldr	r2, [pc, #148]	@ (8004104 <UART_SetConfig+0x2ac>)
 800406e:	4293      	cmp	r3, r2
 8004070:	f040 808a 	bne.w	8004188 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004074:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004078:	2b08      	cmp	r3, #8
 800407a:	d824      	bhi.n	80040c6 <UART_SetConfig+0x26e>
 800407c:	a201      	add	r2, pc, #4	@ (adr r2, 8004084 <UART_SetConfig+0x22c>)
 800407e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004082:	bf00      	nop
 8004084:	080040a9 	.word	0x080040a9
 8004088:	080040c7 	.word	0x080040c7
 800408c:	080040b1 	.word	0x080040b1
 8004090:	080040c7 	.word	0x080040c7
 8004094:	080040b7 	.word	0x080040b7
 8004098:	080040c7 	.word	0x080040c7
 800409c:	080040c7 	.word	0x080040c7
 80040a0:	080040c7 	.word	0x080040c7
 80040a4:	080040bf 	.word	0x080040bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040a8:	f7fd ffb8 	bl	800201c <HAL_RCC_GetPCLK1Freq>
 80040ac:	61f8      	str	r0, [r7, #28]
        break;
 80040ae:	e010      	b.n	80040d2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040b0:	4b19      	ldr	r3, [pc, #100]	@ (8004118 <UART_SetConfig+0x2c0>)
 80040b2:	61fb      	str	r3, [r7, #28]
        break;
 80040b4:	e00d      	b.n	80040d2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040b6:	f7fd ff19 	bl	8001eec <HAL_RCC_GetSysClockFreq>
 80040ba:	61f8      	str	r0, [r7, #28]
        break;
 80040bc:	e009      	b.n	80040d2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040c2:	61fb      	str	r3, [r7, #28]
        break;
 80040c4:	e005      	b.n	80040d2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80040d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 8109 	beq.w	80042ec <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	4413      	add	r3, r2
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d305      	bcc.n	80040f6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d912      	bls.n	800411c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80040fc:	e0f6      	b.n	80042ec <UART_SetConfig+0x494>
 80040fe:	bf00      	nop
 8004100:	efff69f3 	.word	0xefff69f3
 8004104:	40008000 	.word	0x40008000
 8004108:	40013800 	.word	0x40013800
 800410c:	40021000 	.word	0x40021000
 8004110:	40004400 	.word	0x40004400
 8004114:	40004800 	.word	0x40004800
 8004118:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	2200      	movs	r2, #0
 8004120:	461c      	mov	r4, r3
 8004122:	4615      	mov	r5, r2
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	022b      	lsls	r3, r5, #8
 800412e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004132:	0222      	lsls	r2, r4, #8
 8004134:	68f9      	ldr	r1, [r7, #12]
 8004136:	6849      	ldr	r1, [r1, #4]
 8004138:	0849      	lsrs	r1, r1, #1
 800413a:	2000      	movs	r0, #0
 800413c:	4688      	mov	r8, r1
 800413e:	4681      	mov	r9, r0
 8004140:	eb12 0a08 	adds.w	sl, r2, r8
 8004144:	eb43 0b09 	adc.w	fp, r3, r9
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004156:	4650      	mov	r0, sl
 8004158:	4659      	mov	r1, fp
 800415a:	f7fc f8a1 	bl	80002a0 <__aeabi_uldivmod>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4613      	mov	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800416c:	d308      	bcc.n	8004180 <UART_SetConfig+0x328>
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004174:	d204      	bcs.n	8004180 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	60da      	str	r2, [r3, #12]
 800417e:	e0b5      	b.n	80042ec <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004186:	e0b1      	b.n	80042ec <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004190:	d15d      	bne.n	800424e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004192:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004196:	2b08      	cmp	r3, #8
 8004198:	d827      	bhi.n	80041ea <UART_SetConfig+0x392>
 800419a:	a201      	add	r2, pc, #4	@ (adr r2, 80041a0 <UART_SetConfig+0x348>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	080041c5 	.word	0x080041c5
 80041a4:	080041cd 	.word	0x080041cd
 80041a8:	080041d5 	.word	0x080041d5
 80041ac:	080041eb 	.word	0x080041eb
 80041b0:	080041db 	.word	0x080041db
 80041b4:	080041eb 	.word	0x080041eb
 80041b8:	080041eb 	.word	0x080041eb
 80041bc:	080041eb 	.word	0x080041eb
 80041c0:	080041e3 	.word	0x080041e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041c4:	f7fd ff2a 	bl	800201c <HAL_RCC_GetPCLK1Freq>
 80041c8:	61f8      	str	r0, [r7, #28]
        break;
 80041ca:	e014      	b.n	80041f6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041cc:	f7fd ff3c 	bl	8002048 <HAL_RCC_GetPCLK2Freq>
 80041d0:	61f8      	str	r0, [r7, #28]
        break;
 80041d2:	e010      	b.n	80041f6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041d4:	4b4c      	ldr	r3, [pc, #304]	@ (8004308 <UART_SetConfig+0x4b0>)
 80041d6:	61fb      	str	r3, [r7, #28]
        break;
 80041d8:	e00d      	b.n	80041f6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041da:	f7fd fe87 	bl	8001eec <HAL_RCC_GetSysClockFreq>
 80041de:	61f8      	str	r0, [r7, #28]
        break;
 80041e0:	e009      	b.n	80041f6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041e6:	61fb      	str	r3, [r7, #28]
        break;
 80041e8:	e005      	b.n	80041f6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80041f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d077      	beq.n	80042ec <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	005a      	lsls	r2, r3, #1
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	085b      	lsrs	r3, r3, #1
 8004206:	441a      	add	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004210:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b0f      	cmp	r3, #15
 8004216:	d916      	bls.n	8004246 <UART_SetConfig+0x3ee>
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800421e:	d212      	bcs.n	8004246 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	b29b      	uxth	r3, r3
 8004224:	f023 030f 	bic.w	r3, r3, #15
 8004228:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	085b      	lsrs	r3, r3, #1
 800422e:	b29b      	uxth	r3, r3
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	b29a      	uxth	r2, r3
 8004236:	8afb      	ldrh	r3, [r7, #22]
 8004238:	4313      	orrs	r3, r2
 800423a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	8afa      	ldrh	r2, [r7, #22]
 8004242:	60da      	str	r2, [r3, #12]
 8004244:	e052      	b.n	80042ec <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800424c:	e04e      	b.n	80042ec <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800424e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004252:	2b08      	cmp	r3, #8
 8004254:	d827      	bhi.n	80042a6 <UART_SetConfig+0x44e>
 8004256:	a201      	add	r2, pc, #4	@ (adr r2, 800425c <UART_SetConfig+0x404>)
 8004258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425c:	08004281 	.word	0x08004281
 8004260:	08004289 	.word	0x08004289
 8004264:	08004291 	.word	0x08004291
 8004268:	080042a7 	.word	0x080042a7
 800426c:	08004297 	.word	0x08004297
 8004270:	080042a7 	.word	0x080042a7
 8004274:	080042a7 	.word	0x080042a7
 8004278:	080042a7 	.word	0x080042a7
 800427c:	0800429f 	.word	0x0800429f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004280:	f7fd fecc 	bl	800201c <HAL_RCC_GetPCLK1Freq>
 8004284:	61f8      	str	r0, [r7, #28]
        break;
 8004286:	e014      	b.n	80042b2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004288:	f7fd fede 	bl	8002048 <HAL_RCC_GetPCLK2Freq>
 800428c:	61f8      	str	r0, [r7, #28]
        break;
 800428e:	e010      	b.n	80042b2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004290:	4b1d      	ldr	r3, [pc, #116]	@ (8004308 <UART_SetConfig+0x4b0>)
 8004292:	61fb      	str	r3, [r7, #28]
        break;
 8004294:	e00d      	b.n	80042b2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004296:	f7fd fe29 	bl	8001eec <HAL_RCC_GetSysClockFreq>
 800429a:	61f8      	str	r0, [r7, #28]
        break;
 800429c:	e009      	b.n	80042b2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800429e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042a2:	61fb      	str	r3, [r7, #28]
        break;
 80042a4:	e005      	b.n	80042b2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80042b0:	bf00      	nop
    }

    if (pclk != 0U)
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d019      	beq.n	80042ec <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	085a      	lsrs	r2, r3, #1
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	441a      	add	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2b0f      	cmp	r3, #15
 80042d0:	d909      	bls.n	80042e6 <UART_SetConfig+0x48e>
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042d8:	d205      	bcs.n	80042e6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60da      	str	r2, [r3, #12]
 80042e4:	e002      	b.n	80042ec <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80042f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3728      	adds	r7, #40	@ 0x28
 8004300:	46bd      	mov	sp, r7
 8004302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004306:	bf00      	nop
 8004308:	00f42400 	.word	0x00f42400

0800430c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00a      	beq.n	800437a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01a      	beq.n	8004422 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004406:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800440a:	d10a      	bne.n	8004422 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	605a      	str	r2, [r3, #4]
  }
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b098      	sub	sp, #96	@ 0x60
 8004454:	af02      	add	r7, sp, #8
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004460:	f7fc fc3e 	bl	8000ce0 <HAL_GetTick>
 8004464:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b08      	cmp	r3, #8
 8004472:	d12e      	bne.n	80044d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004474:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800447c:	2200      	movs	r2, #0
 800447e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f88c 	bl	80045a0 <UART_WaitOnFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d021      	beq.n	80044d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800449c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800449e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e6      	bne.n	800448e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e062      	b.n	8004598 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d149      	bne.n	8004574 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044e8:	2200      	movs	r2, #0
 80044ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f856 	bl	80045a0 <UART_WaitOnFlagUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d03c      	beq.n	8004574 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004502:	e853 3f00 	ldrex	r3, [r3]
 8004506:	623b      	str	r3, [r7, #32]
   return(result);
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800450e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004518:	633b      	str	r3, [r7, #48]	@ 0x30
 800451a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800451e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004520:	e841 2300 	strex	r3, r2, [r1]
 8004524:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e6      	bne.n	80044fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3308      	adds	r3, #8
 8004532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	e853 3f00 	ldrex	r3, [r3]
 800453a:	60fb      	str	r3, [r7, #12]
   return(result);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0301 	bic.w	r3, r3, #1
 8004542:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3308      	adds	r3, #8
 800454a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800454c:	61fa      	str	r2, [r7, #28]
 800454e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004550:	69b9      	ldr	r1, [r7, #24]
 8004552:	69fa      	ldr	r2, [r7, #28]
 8004554:	e841 2300 	strex	r3, r2, [r1]
 8004558:	617b      	str	r3, [r7, #20]
   return(result);
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1e5      	bne.n	800452c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2220      	movs	r2, #32
 8004564:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e011      	b.n	8004598 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2220      	movs	r2, #32
 8004578:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2220      	movs	r2, #32
 800457e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3758      	adds	r7, #88	@ 0x58
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	4613      	mov	r3, r2
 80045ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b0:	e04f      	b.n	8004652 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d04b      	beq.n	8004652 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ba:	f7fc fb91 	bl	8000ce0 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d302      	bcc.n	80045d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e04e      	b.n	8004672 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d037      	beq.n	8004652 <UART_WaitOnFlagUntilTimeout+0xb2>
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b80      	cmp	r3, #128	@ 0x80
 80045e6:	d034      	beq.n	8004652 <UART_WaitOnFlagUntilTimeout+0xb2>
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b40      	cmp	r3, #64	@ 0x40
 80045ec:	d031      	beq.n	8004652 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d110      	bne.n	800461e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2208      	movs	r2, #8
 8004602:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 f8ff 	bl	8004808 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2208      	movs	r2, #8
 800460e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e029      	b.n	8004672 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800462c:	d111      	bne.n	8004652 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004636:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 f8e5 	bl	8004808 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2220      	movs	r2, #32
 8004642:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e00f      	b.n	8004672 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	4013      	ands	r3, r2
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	429a      	cmp	r2, r3
 8004660:	bf0c      	ite	eq
 8004662:	2301      	moveq	r3, #1
 8004664:	2300      	movne	r3, #0
 8004666:	b2db      	uxtb	r3, r3
 8004668:	461a      	mov	r2, r3
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	429a      	cmp	r2, r3
 800466e:	d0a0      	beq.n	80045b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800467c:	b480      	push	{r7}
 800467e:	b097      	sub	sp, #92	@ 0x5c
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	4613      	mov	r3, r2
 8004688:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	88fa      	ldrh	r2, [r7, #6]
 8004694:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	88fa      	ldrh	r2, [r7, #6]
 800469c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ae:	d10e      	bne.n	80046ce <UART_Start_Receive_IT+0x52>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d105      	bne.n	80046c4 <UART_Start_Receive_IT+0x48>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80046be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80046c2:	e02d      	b.n	8004720 <UART_Start_Receive_IT+0xa4>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	22ff      	movs	r2, #255	@ 0xff
 80046c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80046cc:	e028      	b.n	8004720 <UART_Start_Receive_IT+0xa4>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10d      	bne.n	80046f2 <UART_Start_Receive_IT+0x76>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d104      	bne.n	80046e8 <UART_Start_Receive_IT+0x6c>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	22ff      	movs	r2, #255	@ 0xff
 80046e2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80046e6:	e01b      	b.n	8004720 <UART_Start_Receive_IT+0xa4>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	227f      	movs	r2, #127	@ 0x7f
 80046ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80046f0:	e016      	b.n	8004720 <UART_Start_Receive_IT+0xa4>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046fa:	d10d      	bne.n	8004718 <UART_Start_Receive_IT+0x9c>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d104      	bne.n	800470e <UART_Start_Receive_IT+0x92>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	227f      	movs	r2, #127	@ 0x7f
 8004708:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800470c:	e008      	b.n	8004720 <UART_Start_Receive_IT+0xa4>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	223f      	movs	r2, #63	@ 0x3f
 8004712:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004716:	e003      	b.n	8004720 <UART_Start_Receive_IT+0xa4>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2222      	movs	r2, #34	@ 0x22
 800472c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3308      	adds	r3, #8
 8004736:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800473a:	e853 3f00 	ldrex	r3, [r3]
 800473e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004742:	f043 0301 	orr.w	r3, r3, #1
 8004746:	657b      	str	r3, [r7, #84]	@ 0x54
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3308      	adds	r3, #8
 800474e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004750:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004752:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004754:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004756:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004758:	e841 2300 	strex	r3, r2, [r1]
 800475c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800475e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e5      	bne.n	8004730 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800476c:	d107      	bne.n	800477e <UART_Start_Receive_IT+0x102>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d103      	bne.n	800477e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4a21      	ldr	r2, [pc, #132]	@ (8004800 <UART_Start_Receive_IT+0x184>)
 800477a:	669a      	str	r2, [r3, #104]	@ 0x68
 800477c:	e002      	b.n	8004784 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4a20      	ldr	r2, [pc, #128]	@ (8004804 <UART_Start_Receive_IT+0x188>)
 8004782:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d019      	beq.n	80047c0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800479a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80047a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ac:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80047b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047b2:	e841 2300 	strex	r3, r2, [r1]
 80047b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80047b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1e6      	bne.n	800478c <UART_Start_Receive_IT+0x110>
 80047be:	e018      	b.n	80047f2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	613b      	str	r3, [r7, #16]
   return(result);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f043 0320 	orr.w	r3, r3, #32
 80047d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047de:	623b      	str	r3, [r7, #32]
 80047e0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e2:	69f9      	ldr	r1, [r7, #28]
 80047e4:	6a3a      	ldr	r2, [r7, #32]
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e6      	bne.n	80047c0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	375c      	adds	r7, #92	@ 0x5c
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	08004b0d 	.word	0x08004b0d
 8004804:	08004951 	.word	0x08004951

08004808 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004808:	b480      	push	{r7}
 800480a:	b095      	sub	sp, #84	@ 0x54
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800481e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004820:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004824:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800482e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004830:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004834:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800483c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e6      	bne.n	8004810 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3308      	adds	r3, #8
 8004848:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	61fb      	str	r3, [r7, #28]
   return(result);
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f023 0301 	bic.w	r3, r3, #1
 8004858:	64bb      	str	r3, [r7, #72]	@ 0x48
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3308      	adds	r3, #8
 8004860:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004862:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004864:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004868:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e5      	bne.n	8004842 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800487a:	2b01      	cmp	r3, #1
 800487c:	d118      	bne.n	80048b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	e853 3f00 	ldrex	r3, [r3]
 800488a:	60bb      	str	r3, [r7, #8]
   return(result);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f023 0310 	bic.w	r3, r3, #16
 8004892:	647b      	str	r3, [r7, #68]	@ 0x44
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800489c:	61bb      	str	r3, [r7, #24]
 800489e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a0:	6979      	ldr	r1, [r7, #20]
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	e841 2300 	strex	r3, r2, [r1]
 80048a8:	613b      	str	r3, [r7, #16]
   return(result);
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e6      	bne.n	800487e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80048c4:	bf00      	nop
 80048c6:	3754      	adds	r7, #84	@ 0x54
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f7ff fa9c 	bl	8003e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048f4:	bf00      	nop
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	60bb      	str	r3, [r7, #8]
   return(result);
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	61bb      	str	r3, [r7, #24]
 8004924:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	6979      	ldr	r1, [r7, #20]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	613b      	str	r3, [r7, #16]
   return(result);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1e6      	bne.n	8004904 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7ff fa68 	bl	8003e18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004948:	bf00      	nop
 800494a:	3720      	adds	r7, #32
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b09c      	sub	sp, #112	@ 0x70
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800495e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004968:	2b22      	cmp	r3, #34	@ 0x22
 800496a:	f040 80be 	bne.w	8004aea <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004974:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004978:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800497c:	b2d9      	uxtb	r1, r3
 800497e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004982:	b2da      	uxtb	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004988:	400a      	ands	r2, r1
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f040 80a3 	bne.w	8004afe <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049c0:	e853 3f00 	ldrex	r3, [r3]
 80049c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80049c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	461a      	mov	r2, r3
 80049d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80049e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1e6      	bne.n	80049b8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3308      	adds	r3, #8
 80049f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049fc:	f023 0301 	bic.w	r3, r3, #1
 8004a00:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3308      	adds	r3, #8
 8004a08:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004a0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1e5      	bne.n	80049ea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a34      	ldr	r2, [pc, #208]	@ (8004b08 <UART_RxISR_8BIT+0x1b8>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d01f      	beq.n	8004a7c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d018      	beq.n	8004a7c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a52:	e853 3f00 	ldrex	r3, [r3]
 8004a56:	623b      	str	r3, [r7, #32]
   return(result);
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a68:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a70:	e841 2300 	strex	r3, r2, [r1]
 8004a74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e6      	bne.n	8004a4a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d12e      	bne.n	8004ae2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	e853 3f00 	ldrex	r3, [r3]
 8004a96:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0310 	bic.w	r3, r3, #16
 8004a9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004aa8:	61fb      	str	r3, [r7, #28]
 8004aaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aac:	69b9      	ldr	r1, [r7, #24]
 8004aae:	69fa      	ldr	r2, [r7, #28]
 8004ab0:	e841 2300 	strex	r3, r2, [r1]
 8004ab4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e6      	bne.n	8004a8a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	f003 0310 	and.w	r3, r3, #16
 8004ac6:	2b10      	cmp	r3, #16
 8004ac8:	d103      	bne.n	8004ad2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2210      	movs	r2, #16
 8004ad0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004ad8:	4619      	mov	r1, r3
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7ff f9b0 	bl	8003e40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ae0:	e00d      	b.n	8004afe <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f8fa 	bl	8004cdc <HAL_UART_RxCpltCallback>
}
 8004ae8:	e009      	b.n	8004afe <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	8b1b      	ldrh	r3, [r3, #24]
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0208 	orr.w	r2, r2, #8
 8004afa:	b292      	uxth	r2, r2
 8004afc:	831a      	strh	r2, [r3, #24]
}
 8004afe:	bf00      	nop
 8004b00:	3770      	adds	r7, #112	@ 0x70
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40008000 	.word	0x40008000

08004b0c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b09c      	sub	sp, #112	@ 0x70
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004b1a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b24:	2b22      	cmp	r3, #34	@ 0x22
 8004b26:	f040 80be 	bne.w	8004ca6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004b30:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b38:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004b3a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004b3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004b42:	4013      	ands	r3, r2
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4e:	1c9a      	adds	r2, r3, #2
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f040 80a3 	bne.w	8004cba <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b7c:	e853 3f00 	ldrex	r3, [r3]
 8004b80:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b88:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b92:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b94:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004b98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004ba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1e6      	bne.n	8004b74 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	3308      	adds	r3, #8
 8004bac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb0:	e853 3f00 	ldrex	r3, [r3]
 8004bb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb8:	f023 0301 	bic.w	r3, r3, #1
 8004bbc:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	3308      	adds	r3, #8
 8004bc4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004bc6:	643a      	str	r2, [r7, #64]	@ 0x40
 8004bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004bcc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bce:	e841 2300 	strex	r3, r2, [r1]
 8004bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1e5      	bne.n	8004ba6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a34      	ldr	r2, [pc, #208]	@ (8004cc4 <UART_RxISR_16BIT+0x1b8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d01f      	beq.n	8004c38 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d018      	beq.n	8004c38 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	e853 3f00 	ldrex	r3, [r3]
 8004c12:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c26:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c2c:	e841 2300 	strex	r3, r2, [r1]
 8004c30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e6      	bne.n	8004c06 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d12e      	bne.n	8004c9e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	e853 3f00 	ldrex	r3, [r3]
 8004c52:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f023 0310 	bic.w	r3, r3, #16
 8004c5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c64:	61bb      	str	r3, [r7, #24]
 8004c66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	6979      	ldr	r1, [r7, #20]
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	e841 2300 	strex	r3, r2, [r1]
 8004c70:	613b      	str	r3, [r7, #16]
   return(result);
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e6      	bne.n	8004c46 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b10      	cmp	r3, #16
 8004c84:	d103      	bne.n	8004c8e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2210      	movs	r2, #16
 8004c8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004c94:	4619      	mov	r1, r3
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7ff f8d2 	bl	8003e40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c9c:	e00d      	b.n	8004cba <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f81c 	bl	8004cdc <HAL_UART_RxCpltCallback>
}
 8004ca4:	e009      	b.n	8004cba <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	8b1b      	ldrh	r3, [r3, #24]
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0208 	orr.w	r2, r2, #8
 8004cb6:	b292      	uxth	r2, r2
 8004cb8:	831a      	strh	r2, [r3, #24]
}
 8004cba:	bf00      	nop
 8004cbc:	3770      	adds	r7, #112	@ 0x70
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40008000 	.word	0x40008000

08004cc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_UART_RxCpltCallback>:
 *      macchine a stati che realizzano il livello di trasporto del protocollo associato al canale
 * @param huart: descrittore della periferica su cui e' avvenuta la ricezione
 * @return void
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart_CONSOLE.Instance)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d58 <HAL_UART_RxCpltCallback+0x7c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d12f      	bne.n	8004d50 <HAL_UART_RxCpltCallback+0x74>
	{
		g_brdStat.uart_CONSOLE_RxIntCounter ++;
 8004cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8004d5c <HAL_UART_RxCpltCallback+0x80>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	4a19      	ldr	r2, [pc, #100]	@ (8004d5c <HAL_UART_RxCpltCallback+0x80>)
 8004cf8:	6013      	str	r3, [r2, #0]

		// store new data in buffer
		g_brdStat.uart_CONSOLE_RxBuf[g_brdStat.uart_CONSOLE_RxBufLen] = g_brdStat.uart_CONSOLE_RxChar;
 8004cfa:	4b18      	ldr	r3, [pc, #96]	@ (8004d5c <HAL_UART_RxCpltCallback+0x80>)
 8004cfc:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8004d00:	4619      	mov	r1, r3
 8004d02:	4b16      	ldr	r3, [pc, #88]	@ (8004d5c <HAL_UART_RxCpltCallback+0x80>)
 8004d04:	791a      	ldrb	r2, [r3, #4]
 8004d06:	4b15      	ldr	r3, [pc, #84]	@ (8004d5c <HAL_UART_RxCpltCallback+0x80>)
 8004d08:	440b      	add	r3, r1
 8004d0a:	715a      	strb	r2, [r3, #5]
		g_brdStat.uart_CONSOLE_RxBufLen ++;
 8004d0c:	4b13      	ldr	r3, [pc, #76]	@ (8004d5c <HAL_UART_RxCpltCallback+0x80>)
 8004d0e:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8004d12:	3301      	adds	r3, #1
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	4b11      	ldr	r3, [pc, #68]	@ (8004d5c <HAL_UART_RxCpltCallback+0x80>)
 8004d18:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
		g_brdStat.uart_CONSOLE_RxBufLen %= sizeof(g_brdStat.uart_CONSOLE_RxBuf);
 8004d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004d5c <HAL_UART_RxCpltCallback+0x80>)
 8004d1e:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8004d22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	4b0c      	ldr	r3, [pc, #48]	@ (8004d5c <HAL_UART_RxCpltCallback+0x80>)
 8004d2a:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85

		if((g_brdStat.uart_CONSOLE_RxChar == '\n') || (g_brdStat.uart_CONSOLE_RxChar == '\r'))
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d5c <HAL_UART_RxCpltCallback+0x80>)
 8004d30:	791b      	ldrb	r3, [r3, #4]
 8004d32:	2b0a      	cmp	r3, #10
 8004d34:	d003      	beq.n	8004d3e <HAL_UART_RxCpltCallback+0x62>
 8004d36:	4b09      	ldr	r3, [pc, #36]	@ (8004d5c <HAL_UART_RxCpltCallback+0x80>)
 8004d38:	791b      	ldrb	r3, [r3, #4]
 8004d3a:	2b0d      	cmp	r3, #13
 8004d3c:	d103      	bne.n	8004d46 <HAL_UART_RxCpltCallback+0x6a>
		{
			g_brdStat.uart_CONSOLE_LineReady = 1;
 8004d3e:	4b07      	ldr	r3, [pc, #28]	@ (8004d5c <HAL_UART_RxCpltCallback+0x80>)
 8004d40:	2201      	movs	r2, #1
 8004d42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		}

		// arm new receipt
		HAL_UART_Receive_IT(&huart_CONSOLE, &g_brdStat.uart_CONSOLE_RxChar, sizeof(g_brdStat.uart_CONSOLE_RxChar));
 8004d46:	2201      	movs	r2, #1
 8004d48:	4905      	ldr	r1, [pc, #20]	@ (8004d60 <HAL_UART_RxCpltCallback+0x84>)
 8004d4a:	4803      	ldr	r0, [pc, #12]	@ (8004d58 <HAL_UART_RxCpltCallback+0x7c>)
 8004d4c:	f7fe fd12 	bl	8003774 <HAL_UART_Receive_IT>
	}
}
 8004d50:	bf00      	nop
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	20000638 	.word	0x20000638
 8004d5c:	200006c8 	.word	0x200006c8
 8004d60:	200006cc 	.word	0x200006cc

08004d64 <mainTaskInit>:
 * 			MAINTASK_INIT_PHASE_2: variabili globali e periferiche HW
 * @param initPhase codice della fase in esecuzione da main
 * @return il valore di ritorno e' sempre 0
 */
int mainTaskInit(int initPhase)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08a      	sub	sp, #40	@ 0x28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
#if defined(LINK_MARIA)
	MARIA_USER_DATA   maria_user_data;
#endif /* LINK_MARIA */
	switch(initPhase)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d82b      	bhi.n	8004dca <mainTaskInit+0x66>
 8004d72:	a201      	add	r2, pc, #4	@ (adr r2, 8004d78 <mainTaskInit+0x14>)
 8004d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d78:	08004dcb 	.word	0x08004dcb
 8004d7c:	08004d89 	.word	0x08004d89
 8004d80:	08004dcb 	.word	0x08004dcb
 8004d84:	08004dbb 	.word	0x08004dbb
		//***********************************************************************************************************
		break;
	case MAINTASK_INIT_PHASE_INIT:
		//***********************************************************************************************************
#if defined(LINK_MARIA)
		maria_init();
 8004d88:	f000 faea 	bl	8005360 <maria_init>
		ARD_memset(&maria_user_data, 0, sizeof(maria_user_data));
 8004d8c:	f107 030c 	add.w	r3, r7, #12
 8004d90:	221a      	movs	r2, #26
 8004d92:	2100      	movs	r1, #0
 8004d94:	4618      	mov	r0, r3
 8004d96:	f001 feb9 	bl	8006b0c <memset>
		maria_user_data.fdType = HANDLE_TYPE_COM;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
		maria_user_data.fdidx = RS232_FD_IDX;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	837b      	strh	r3, [r7, #26]
 8004da2:	2300      	movs	r3, #0
 8004da4:	83bb      	strh	r3, [r7, #28]
		maria_user_data.mariaFlags = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	833b      	strh	r3, [r7, #24]
		maria_open(NULL, NULL, (void *)(&maria_user_data));
 8004daa:	f107 030c 	add.w	r3, r7, #12
 8004dae:	461a      	mov	r2, r3
 8004db0:	2100      	movs	r1, #0
 8004db2:	2000      	movs	r0, #0
 8004db4:	f000 f9d8 	bl	8005168 <maria_open>
#endif /* LINK_MARIA */

		break;
 8004db8:	e007      	b.n	8004dca <mainTaskInit+0x66>
		//***********************************************************************************************************

		break;
	case MAINTASK_INIT_PHASE_2:

		initBoardStat();
 8004dba:	f000 f84f 	bl	8004e5c <initBoardStat>

		//***********************************************************************************************************
		// attiva la ricezione delle seriali
		HAL_UART_Receive_IT(&huart_CONSOLE, &g_brdStat.uart_CONSOLE_RxChar, sizeof(g_brdStat.uart_CONSOLE_RxChar));
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	4904      	ldr	r1, [pc, #16]	@ (8004dd4 <mainTaskInit+0x70>)
 8004dc2:	4805      	ldr	r0, [pc, #20]	@ (8004dd8 <mainTaskInit+0x74>)
 8004dc4:	f7fe fcd6 	bl	8003774 <HAL_UART_Receive_IT>

		break;
 8004dc8:	bf00      	nop
    }
    
    return 0;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3728      	adds	r7, #40	@ 0x28
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	200006cc 	.word	0x200006cc
 8004dd8:	20000638 	.word	0x20000638

08004ddc <mainTaskLoopIteration>:
 *      quando nessuno dei task e' pronto per essere esguito la funzione passa il controllo a mainTaskIdle()
 * @param void:
 * @return void
 */
void mainTaskLoopIteration(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
	static uint32_t 	lastServedTick = 0;		// last tick served in one of the periodic tasks
	static uint32_t 	lastTick = 0;			// last tick served in Idle Task
	uint32_t 			nowTick = HAL_GetTick();
 8004de2:	f7fb ff7d 	bl	8000ce0 <HAL_GetTick>
 8004de6:	6078      	str	r0, [r7, #4]
    int                 i;                 

	if (nowTick == lastTick)
 8004de8:	4b17      	ldr	r3, [pc, #92]	@ (8004e48 <mainTaskLoopIteration+0x6c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d102      	bne.n	8004df8 <mainTaskLoopIteration+0x1c>
	{
		mainTaskIdle();
 8004df2:	f000 f83f 	bl	8004e74 <mainTaskIdle>
		return;
 8004df6:	e024      	b.n	8004e42 <mainTaskLoopIteration+0x66>
	}
	lastTick = nowTick;
 8004df8:	4a13      	ldr	r2, [pc, #76]	@ (8004e48 <mainTaskLoopIteration+0x6c>)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6013      	str	r3, [r2, #0]

	if ((nowTick - lastServedTick) >= MAIN_TASK_TIME_MS)
 8004dfe:	4b13      	ldr	r3, [pc, #76]	@ (8004e4c <mainTaskLoopIteration+0x70>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d01b      	beq.n	8004e40 <mainTaskLoopIteration+0x64>
	{
		if((g_brdStat.tempoDaStartup % 500) == 0)
 8004e08:	4b11      	ldr	r3, [pc, #68]	@ (8004e50 <mainTaskLoopIteration+0x74>)
 8004e0a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004e0e:	4b11      	ldr	r3, [pc, #68]	@ (8004e54 <mainTaskLoopIteration+0x78>)
 8004e10:	fba3 1302 	umull	r1, r3, r3, r2
 8004e14:	095b      	lsrs	r3, r3, #5
 8004e16:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8004e1a:	fb01 f303 	mul.w	r3, r1, r3
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d103      	bne.n	8004e2c <mainTaskLoopIteration+0x50>
		{
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8004e24:	2108      	movs	r1, #8
 8004e26:	480c      	ldr	r0, [pc, #48]	@ (8004e58 <mainTaskLoopIteration+0x7c>)
 8004e28:	f7fc fa80 	bl	800132c <HAL_GPIO_TogglePin>
		}

		g_brdStat.tempoDaStartup += MAIN_TASK_TIME_MS;
 8004e2c:	4b08      	ldr	r3, [pc, #32]	@ (8004e50 <mainTaskLoopIteration+0x74>)
 8004e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e32:	3301      	adds	r3, #1
 8004e34:	4a06      	ldr	r2, [pc, #24]	@ (8004e50 <mainTaskLoopIteration+0x74>)
 8004e36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
		lastServedTick = nowTick;
 8004e3a:	4a04      	ldr	r2, [pc, #16]	@ (8004e4c <mainTaskLoopIteration+0x70>)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6013      	str	r3, [r2, #0]
	// **************************************************************************
	// task 1 mS

	// **************************************************************************

	return;
 8004e40:	bf00      	nop
}
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	20000760 	.word	0x20000760
 8004e4c:	20000764 	.word	0x20000764
 8004e50:	200006c8 	.word	0x200006c8
 8004e54:	10624dd3 	.word	0x10624dd3
 8004e58:	48000400 	.word	0x48000400

08004e5c <initBoardStat>:
 * @param todo:
 * @param todo:
 * @return todo:
 */
void initBoardStat(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
	ARD_memset(&g_brdStat, 0, sizeof(g_brdStat));
 8004e60:	2298      	movs	r2, #152	@ 0x98
 8004e62:	2100      	movs	r1, #0
 8004e64:	4802      	ldr	r0, [pc, #8]	@ (8004e70 <initBoardStat+0x14>)
 8004e66:	f001 fe51 	bl	8006b0c <memset>
}
 8004e6a:	bf00      	nop
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	200006c8 	.word	0x200006c8

08004e74 <mainTaskIdle>:
 * 			dallo strato di trasporto per ogni canale di comunicazione.
 * @param void:
 * @return void:
 */
static inline void mainTaskIdle(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
	if(g_brdStat.uart_CONSOLE_LineReady)
 8004e78:	4b08      	ldr	r3, [pc, #32]	@ (8004e9c <mainTaskIdle+0x28>)
 8004e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d009      	beq.n	8004e96 <mainTaskIdle+0x22>
	{
#if defined(LINK_MARIA)
		if(g_brdStat.uart_CONSOLE_RxBufLen)
 8004e82:	4b06      	ldr	r3, [pc, #24]	@ (8004e9c <mainTaskIdle+0x28>)
 8004e84:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d004      	beq.n	8004e96 <mainTaskIdle+0x22>
		{
			maria_parser(&(maria_data[RS232_FD_IDX].r_fd), &(maria_data[RS232_FD_IDX].w_fd), &(maria_data[RS232_FD_IDX].ud));
 8004e8c:	4a04      	ldr	r2, [pc, #16]	@ (8004ea0 <mainTaskIdle+0x2c>)
 8004e8e:	4905      	ldr	r1, [pc, #20]	@ (8004ea4 <mainTaskIdle+0x30>)
 8004e90:	4805      	ldr	r0, [pc, #20]	@ (8004ea8 <mainTaskIdle+0x34>)
 8004e92:	f000 fad1 	bl	8005438 <maria_parser>
		}
#endif /* LINK_MARIA */
	}
}
 8004e96:	bf00      	nop
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	200006c8 	.word	0x200006c8
 8004ea0:	200008bc 	.word	0x200008bc
 8004ea4:	200008b8 	.word	0x200008b8
 8004ea8:	200008b4 	.word	0x200008b4

08004eac <setPwm>:
 * @param chan: numero di canale del PWM [0..TOT_PWM-1]
 * @param rate: valore efficace del PWM [0..999]
 * @return rate:
 */
int setPwm(int chan, int rate)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
	int ch[TOT_PWM] = { TIM_CHANNEL_1, TIM_CHANNEL_2};
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60bb      	str	r3, [r7, #8]
 8004eba:	2304      	movs	r3, #4
 8004ebc:	60fb      	str	r3, [r7, #12]

    if(chan < 0) chan = -chan;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	da02      	bge.n	8004eca <setPwm+0x1e>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	425b      	negs	r3, r3
 8004ec8:	607b      	str	r3, [r7, #4]
    chan %= TOT_PWM;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	bfb8      	it	lt
 8004ed4:	425b      	neglt	r3, r3
 8004ed6:	607b      	str	r3, [r7, #4]
    if(rate < 0) rate = -rate;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	da02      	bge.n	8004ee4 <setPwm+0x38>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	425b      	negs	r3, r3
 8004ee2:	603b      	str	r3, [r7, #0]

    if (chan == 2)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d10a      	bne.n	8004f00 <setPwm+0x54>
    {
        // funzione di enable per gli n_channel
        HAL_TIMEx_PWMN_Start(&htim_PWM, ch[chan]);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	3310      	adds	r3, #16
 8004ef0:	443b      	add	r3, r7
 8004ef2:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4833      	ldr	r0, [pc, #204]	@ (8004fc8 <setPwm+0x11c>)
 8004efa:	f7fe f9c3 	bl	8003284 <HAL_TIMEx_PWMN_Start>
 8004efe:	e009      	b.n	8004f14 <setPwm+0x68>
    }
    else
    {
        HAL_TIM_PWM_Start(&htim_PWM, ch[chan]);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	3310      	adds	r3, #16
 8004f06:	443b      	add	r3, r7
 8004f08:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	482e      	ldr	r0, [pc, #184]	@ (8004fc8 <setPwm+0x11c>)
 8004f10:	f7fd fb4e 	bl	80025b0 <HAL_TIM_PWM_Start>
    }

	rate %= (__HAL_TIM_GET_AUTORELOAD(&htim_PWM));
 8004f14:	4b2c      	ldr	r3, [pc, #176]	@ (8004fc8 <setPwm+0x11c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f20:	fb01 f202 	mul.w	r2, r1, r2
 8004f24:	1a9b      	subs	r3, r3, r2
 8004f26:	603b      	str	r3, [r7, #0]

	__HAL_TIM_SET_COMPARE(&htim_PWM, ch[chan], rate);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	3310      	adds	r3, #16
 8004f2e:	443b      	add	r3, r7
 8004f30:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d104      	bne.n	8004f42 <setPwm+0x96>
 8004f38:	4b23      	ldr	r3, [pc, #140]	@ (8004fc8 <setPwm+0x11c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	635a      	str	r2, [r3, #52]	@ 0x34
 8004f40:	e037      	b.n	8004fb2 <setPwm+0x106>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	3310      	adds	r3, #16
 8004f48:	443b      	add	r3, r7
 8004f4a:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d104      	bne.n	8004f5c <setPwm+0xb0>
 8004f52:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc8 <setPwm+0x11c>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	6393      	str	r3, [r2, #56]	@ 0x38
 8004f5a:	e02a      	b.n	8004fb2 <setPwm+0x106>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	3310      	adds	r3, #16
 8004f62:	443b      	add	r3, r7
 8004f64:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d104      	bne.n	8004f76 <setPwm+0xca>
 8004f6c:	4b16      	ldr	r3, [pc, #88]	@ (8004fc8 <setPwm+0x11c>)
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8004f74:	e01d      	b.n	8004fb2 <setPwm+0x106>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	3310      	adds	r3, #16
 8004f7c:	443b      	add	r3, r7
 8004f7e:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8004f82:	2b0c      	cmp	r3, #12
 8004f84:	d104      	bne.n	8004f90 <setPwm+0xe4>
 8004f86:	4b10      	ldr	r3, [pc, #64]	@ (8004fc8 <setPwm+0x11c>)
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f8e:	e010      	b.n	8004fb2 <setPwm+0x106>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	3310      	adds	r3, #16
 8004f96:	443b      	add	r3, r7
 8004f98:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8004f9c:	2b10      	cmp	r3, #16
 8004f9e:	d104      	bne.n	8004faa <setPwm+0xfe>
 8004fa0:	4b09      	ldr	r3, [pc, #36]	@ (8004fc8 <setPwm+0x11c>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fa8:	e003      	b.n	8004fb2 <setPwm+0x106>
 8004faa:	4b07      	ldr	r3, [pc, #28]	@ (8004fc8 <setPwm+0x11c>)
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	65d3      	str	r3, [r2, #92]	@ 0x5c
    g_brdStat.PWM[chan] = rate;
 8004fb2:	4906      	ldr	r1, [pc, #24]	@ (8004fcc <setPwm+0x120>)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3324      	adds	r3, #36	@ 0x24
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	return rate;
 8004fbe:	683b      	ldr	r3, [r7, #0]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	200005ec 	.word	0x200005ec
 8004fcc:	200006c8 	.word	0x200006c8

08004fd0 <showStat>:
 * @param submenu: indice del sottomenu (se presente) che identifica la visualizzazione
 * @param prefix0: stringa di prefisso per ogni linea visualizzata, puo' essere usata per il controllo dell'indetazione
 * @return il codice numerico della visualizzazione selezionata
 */
int showStat(int menu, int submenu, char *prefix0)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
    char           		*p0 = prefix0;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	61fb      	str	r3, [r7, #28]
	char           		p1[8];
	int                 i;

    if(prefix0 == NULL) p0 = "";
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <showStat+0x1a>
 8004fe6:	4b2e      	ldr	r3, [pc, #184]	@ (80050a0 <showStat+0xd0>)
 8004fe8:	61fb      	str	r3, [r7, #28]
	ARD_sprintf(p1, "%s     ", p0);
 8004fea:	f107 0310 	add.w	r3, r7, #16
 8004fee:	69fa      	ldr	r2, [r7, #28]
 8004ff0:	492c      	ldr	r1, [pc, #176]	@ (80050a4 <showStat+0xd4>)
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f001 fd30 	bl	8006a58 <siprintf>

	submenu = (submenu < 0) ? 0 : submenu;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004ffe:	60bb      	str	r3, [r7, #8]

	if(menu == 0)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d107      	bne.n	8005016 <showStat+0x46>
	{
		maria_printf("%s showStat 0   => show this menu\n", p0);
 8005006:	69f9      	ldr	r1, [r7, #28]
 8005008:	4827      	ldr	r0, [pc, #156]	@ (80050a8 <showStat+0xd8>)
 800500a:	f000 fae5 	bl	80055d8 <maria_printf>
		maria_printf("%s showStat 1   => show SYSTEM status\n", p0);
 800500e:	69f9      	ldr	r1, [r7, #28]
 8005010:	4826      	ldr	r0, [pc, #152]	@ (80050ac <showStat+0xdc>)
 8005012:	f000 fae1 	bl	80055d8 <maria_printf>
	}
    
    if(menu == 1)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d13b      	bne.n	8005094 <showStat+0xc4>
    {
   		maria_printf("%s IRQ counters:\n", p0);
 800501c:	69f9      	ldr	r1, [r7, #28]
 800501e:	4824      	ldr	r0, [pc, #144]	@ (80050b0 <showStat+0xe0>)
 8005020:	f000 fada 	bl	80055d8 <maria_printf>
		maria_printf("%s uart_CONSOLE_RxIntCounter:      %lu\n", p1, g_brdStat.uart_CONSOLE_RxIntCounter);
 8005024:	4b23      	ldr	r3, [pc, #140]	@ (80050b4 <showStat+0xe4>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	f107 0310 	add.w	r3, r7, #16
 800502c:	4619      	mov	r1, r3
 800502e:	4822      	ldr	r0, [pc, #136]	@ (80050b8 <showStat+0xe8>)
 8005030:	f000 fad2 	bl	80055d8 <maria_printf>
		maria_printf("%s sysTick:                        %lu\n", p1, HAL_GetTick());
 8005034:	f7fb fe54 	bl	8000ce0 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	f107 0310 	add.w	r3, r7, #16
 800503e:	4619      	mov	r1, r3
 8005040:	481e      	ldr	r0, [pc, #120]	@ (80050bc <showStat+0xec>)
 8005042:	f000 fac9 	bl	80055d8 <maria_printf>
        maria_printf("%s tempoDaStartup:                 %lu\n", p1, g_brdStat.tempoDaStartup);
 8005046:	4b1b      	ldr	r3, [pc, #108]	@ (80050b4 <showStat+0xe4>)
 8005048:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800504c:	f107 0310 	add.w	r3, r7, #16
 8005050:	4619      	mov	r1, r3
 8005052:	481b      	ldr	r0, [pc, #108]	@ (80050c0 <showStat+0xf0>)
 8005054:	f000 fac0 	bl	80055d8 <maria_printf>
        maria_printf("\n");
 8005058:	481a      	ldr	r0, [pc, #104]	@ (80050c4 <showStat+0xf4>)
 800505a:	f000 fabd 	bl	80055d8 <maria_printf>
        maria_printf("%s PWM:\n", p0);
 800505e:	69f9      	ldr	r1, [r7, #28]
 8005060:	4819      	ldr	r0, [pc, #100]	@ (80050c8 <showStat+0xf8>)
 8005062:	f000 fab9 	bl	80055d8 <maria_printf>
        for(i=0; i<TOT_PWM; i++)
 8005066:	2300      	movs	r3, #0
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	e00d      	b.n	8005088 <showStat+0xb8>
        {
            maria_printf("%s PWM[%d] %d\n", p1, i, g_brdStat.PWM[i]);
 800506c:	4a11      	ldr	r2, [pc, #68]	@ (80050b4 <showStat+0xe4>)
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	3324      	adds	r3, #36	@ 0x24
 8005072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005076:	f107 0110 	add.w	r1, r7, #16
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	4813      	ldr	r0, [pc, #76]	@ (80050cc <showStat+0xfc>)
 800507e:	f000 faab 	bl	80055d8 <maria_printf>
        for(i=0; i<TOT_PWM; i++)
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	3301      	adds	r3, #1
 8005086:	61bb      	str	r3, [r7, #24]
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	2b01      	cmp	r3, #1
 800508c:	ddee      	ble.n	800506c <showStat+0x9c>
        }
        maria_printf("\n");
 800508e:	480d      	ldr	r0, [pc, #52]	@ (80050c4 <showStat+0xf4>)
 8005090:	f000 faa2 	bl	80055d8 <maria_printf>
    }

    return menu;
 8005094:	68fb      	ldr	r3, [r7, #12]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3720      	adds	r7, #32
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	08007450 	.word	0x08007450
 80050a4:	08007454 	.word	0x08007454
 80050a8:	0800745c 	.word	0x0800745c
 80050ac:	08007480 	.word	0x08007480
 80050b0:	080074a8 	.word	0x080074a8
 80050b4:	200006c8 	.word	0x200006c8
 80050b8:	080074bc 	.word	0x080074bc
 80050bc:	080074e4 	.word	0x080074e4
 80050c0:	0800750c 	.word	0x0800750c
 80050c4:	08007534 	.word	0x08007534
 80050c8:	08007538 	.word	0x08007538
 80050cc:	08007544 	.word	0x08007544

080050d0 <maria_read>:

//======================================================================================================
// IMPLEMENTATION
//======================================================================================================
int maria_read(int fd, void *buf, size_t count, MARIA_USER_DATA *user_data)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
	/* aggiorno il selettore di canale attivo */
	g_active_fd_index = user_data->fdidx;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	f8d3 300e 	ldr.w	r3, [r3, #14]
 80050e4:	4a0f      	ldr	r2, [pc, #60]	@ (8005124 <maria_read+0x54>)
 80050e6:	6013      	str	r3, [r2, #0]

	if(fd == (int)(&huart_CONSOLE))
 80050e8:	4a0f      	ldr	r2, [pc, #60]	@ (8005128 <maria_read+0x58>)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d113      	bne.n	8005118 <maria_read+0x48>
	{
		/* Read one byte from the receive data register */
		ARD_memcpy(buf, g_brdStat.uart_CONSOLE_RxBuf, g_brdStat.uart_CONSOLE_RxBufLen);
 80050f0:	4b0e      	ldr	r3, [pc, #56]	@ (800512c <maria_read+0x5c>)
 80050f2:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 80050f6:	461a      	mov	r2, r3
 80050f8:	490d      	ldr	r1, [pc, #52]	@ (8005130 <maria_read+0x60>)
 80050fa:	68b8      	ldr	r0, [r7, #8]
 80050fc:	f001 fd50 	bl	8006ba0 <memcpy>
		count = g_brdStat.uart_CONSOLE_RxBufLen;
 8005100:	4b0a      	ldr	r3, [pc, #40]	@ (800512c <maria_read+0x5c>)
 8005102:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8005106:	607b      	str	r3, [r7, #4]

		g_brdStat.uart_CONSOLE_RxBufLen = 0;
 8005108:	4b08      	ldr	r3, [pc, #32]	@ (800512c <maria_read+0x5c>)
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
		g_brdStat.uart_CONSOLE_LineReady = 0;
 8005110:	4b06      	ldr	r3, [pc, #24]	@ (800512c <maria_read+0x5c>)
 8005112:	2200      	movs	r2, #0
 8005114:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	}

	return count;
 8005118:	687b      	ldr	r3, [r7, #4]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20000574 	.word	0x20000574
 8005128:	20000638 	.word	0x20000638
 800512c:	200006c8 	.word	0x200006c8
 8005130:	200006cd 	.word	0x200006cd

08005134 <maria_write>:

int maria_write(int fd, void *buf, size_t count, MARIA_USER_DATA *user_data)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
 8005140:	603b      	str	r3, [r7, #0]
	if(fd == (int)(&huart_CONSOLE))
 8005142:	4a08      	ldr	r2, [pc, #32]	@ (8005164 <maria_write+0x30>)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4293      	cmp	r3, r2
 8005148:	d107      	bne.n	800515a <maria_write+0x26>
	{
		HAL_UART_Transmit(&huart_CONSOLE, buf, count, HAL_MAX_DELAY);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	b29a      	uxth	r2, r3
 800514e:	f04f 33ff 	mov.w	r3, #4294967295
 8005152:	68b9      	ldr	r1, [r7, #8]
 8005154:	4803      	ldr	r0, [pc, #12]	@ (8005164 <maria_write+0x30>)
 8005156:	f7fe fa84 	bl	8003662 <HAL_UART_Transmit>
	}


	return count;
 800515a:	687b      	ldr	r3, [r7, #4]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	20000638 	.word	0x20000638

08005168 <maria_open>:

/* nelle applicazioni FW tipicamente i parametri pdf_r e pdf_w sono NULL in quanto
   la gestione dei file descriptor va simulata */
void maria_open(int *pfd_r, int *pfd_w, MARIA_USER_DATA *user_data)
{
 8005168:	b4b0      	push	{r4, r5, r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
	MARIA_ADD_CR = 0;
 8005174:	4b21      	ldr	r3, [pc, #132]	@ (80051fc <maria_open+0x94>)
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]

	int chan = user_data->fdidx;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8005180:	617b      	str	r3, [r7, #20]

	switch(chan)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d133      	bne.n	80051f0 <maria_open+0x88>
	{
	case RS232_FD_IDX:
		maria_data[chan].r_fd = (int)(&huart_CONSOLE);
 8005188:	491d      	ldr	r1, [pc, #116]	@ (8005200 <maria_open+0x98>)
 800518a:	481e      	ldr	r0, [pc, #120]	@ (8005204 <maria_open+0x9c>)
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4613      	mov	r3, r2
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4403      	add	r3, r0
 8005198:	6019      	str	r1, [r3, #0]
		maria_data[chan].w_fd = (int)(&huart_CONSOLE);
 800519a:	4919      	ldr	r1, [pc, #100]	@ (8005200 <maria_open+0x98>)
 800519c:	4819      	ldr	r0, [pc, #100]	@ (8005204 <maria_open+0x9c>)
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4613      	mov	r3, r2
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	4413      	add	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4403      	add	r3, r0
 80051aa:	3304      	adds	r3, #4
 80051ac:	6019      	str	r1, [r3, #0]
		maria_data[chan].ud = *user_data;
 80051ae:	4915      	ldr	r1, [pc, #84]	@ (8005204 <maria_open+0x9c>)
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4613      	mov	r3, r2
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	4413      	add	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	440b      	add	r3, r1
 80051bc:	f103 0208 	add.w	r2, r3, #8
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4614      	mov	r4, r2
 80051c4:	461d      	mov	r5, r3
 80051c6:	6828      	ldr	r0, [r5, #0]
 80051c8:	6869      	ldr	r1, [r5, #4]
 80051ca:	68aa      	ldr	r2, [r5, #8]
 80051cc:	68eb      	ldr	r3, [r5, #12]
 80051ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051d0:	6928      	ldr	r0, [r5, #16]
 80051d2:	6969      	ldr	r1, [r5, #20]
 80051d4:	c403      	stmia	r4!, {r0, r1}
 80051d6:	8b2b      	ldrh	r3, [r5, #24]
 80051d8:	8023      	strh	r3, [r4, #0]
		maria_data[chan].ud.fdType = HANDLE_TYPE_COM;
 80051da:	490a      	ldr	r1, [pc, #40]	@ (8005204 <maria_open+0x9c>)
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4613      	mov	r3, r2
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	4413      	add	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	440b      	add	r3, r1
 80051e8:	3308      	adds	r3, #8
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
		break;
 80051ee:	bf00      	nop
	}
}
 80051f0:	bf00      	nop
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bcb0      	pop	{r4, r5, r7}
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	20000bdc 	.word	0x20000bdc
 8005200:	20000638 	.word	0x20000638
 8005204:	200008b4 	.word	0x200008b4

08005208 <maria_close>:

void maria_close(int *pfd_r, int *pfd_w, MARIA_USER_DATA *user_data)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
	int chan = user_data->fdidx;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 300e 	ldr.w	r3, [r3, #14]
 800521a:	617b      	str	r3, [r7, #20]
	switch(chan)
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d100      	bne.n	8005224 <maria_close+0x1c>
	{
	case RS232_FD_IDX:
		// TODO:
		break;
 8005222:	bf00      	nop
	}
}
 8005224:	bf00      	nop
 8005226:	371c      	adds	r7, #28
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <maria_callApi>:


void init_maria_table(void);

static int maria_callApi(MARIA_API_POINTER api,MARIA_PARSED_LINE *pArgv)
{
 8005230:	b590      	push	{r4, r7, lr}
 8005232:	b091      	sub	sp, #68	@ 0x44
 8005234:	af04      	add	r7, sp, #16
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
#if defined ( TARGET_ARCH_I386 )
	char *p=(char *)&stackSimul;
#elif defined( TARGET_ARCH_X64 )
	long *p=(long *)(&(stackSimul.buf[0]));
#elif defined ( TARGET_ARCH_ARM )
	char *p=(char *)&stackSimul;
 800523a:	f107 0308 	add.w	r3, r7, #8
 800523e:	62bb      	str	r3, [r7, #40]	@ 0x28
	long *plong = (long *)(&(stackSimul.buf));
#else
#error "Unknown target architecture"
#endif

	ARD_memset((char*)&stackSimul,0,sizeof(stackSimul));
 8005240:	f107 0308 	add.w	r3, r7, #8
 8005244:	2220      	movs	r2, #32
 8005246:	2100      	movs	r1, #0
 8005248:	4618      	mov	r0, r3
 800524a:	f001 fc5f 	bl	8006b0c <memset>

	if(s_maria_argv.argc<=0) return 0;
 800524e:	4b30      	ldr	r3, [pc, #192]	@ (8005310 <maria_callApi+0xe0>)
 8005250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005254:	2b00      	cmp	r3, #0
 8005256:	dc01      	bgt.n	800525c <maria_callApi+0x2c>
 8005258:	2300      	movs	r3, #0
 800525a:	e054      	b.n	8005306 <maria_callApi+0xd6>

	for(i=1;i<s_maria_argv.argc;i++)
 800525c:	2301      	movs	r3, #1
 800525e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005260:	e03c      	b.n	80052dc <maria_callApi+0xac>
	{
		switch(s_maria_argv.type[i])
 8005262:	4a2b      	ldr	r2, [pc, #172]	@ (8005310 <maria_callApi+0xe0>)
 8005264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005266:	4413      	add	r3, r2
 8005268:	33c4      	adds	r3, #196	@ 0xc4
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b04      	cmp	r3, #4
 800526e:	d831      	bhi.n	80052d4 <maria_callApi+0xa4>
 8005270:	a201      	add	r2, pc, #4	@ (adr r2, 8005278 <maria_callApi+0x48>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	080052a5 	.word	0x080052a5
 800527c:	080052bd 	.word	0x080052bd
 8005280:	0800528d 	.word	0x0800528d
 8005284:	080052a5 	.word	0x080052a5
 8005288:	080052a5 	.word	0x080052a5
			p+=sizeof(long);
#elif defined( TARGET_ARCH_X64 )
			*p=s_maria_argv.lValue[i];
			p++;
#elif defined ( TARGET_ARCH_ARM )
			*((long *)p)=s_maria_argv.lValue[i];
 800528c:	4a20      	ldr	r2, [pc, #128]	@ (8005310 <maria_callApi+0xe0>)
 800528e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005290:	3328      	adds	r3, #40	@ 0x28
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529a:	601a      	str	r2, [r3, #0]
			p+=sizeof(long);
 800529c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529e:	3304      	adds	r3, #4
 80052a0:	62bb      	str	r3, [r7, #40]	@ 0x28
			*((long *)p)=s_maria_argv.lValue[i];
			p+=sizeof(long);
#else
#error "Unknown target architecture"
#endif
			break;
 80052a2:	e018      	b.n	80052d6 <maria_callApi+0xa6>
			p+=sizeof(long);
#elif defined( TARGET_ARCH_X64 )
			*p=s_maria_argv.lValue[i];
			p++;
#elif defined ( TARGET_ARCH_ARM )
			*((long *)p)=s_maria_argv.lValue[i];
 80052a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005310 <maria_callApi+0xe0>)
 80052a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a8:	3328      	adds	r3, #40	@ 0x28
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b2:	601a      	str	r2, [r3, #0]
			p+=sizeof(long);
 80052b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b6:	3304      	adds	r3, #4
 80052b8:	62bb      	str	r3, [r7, #40]	@ 0x28
			*((long *)p)=s_maria_argv.lValue[i];
			p+=sizeof(long);
#else
#error "Unknown target architecture"
#endif
			break;
 80052ba:	e00c      	b.n	80052d6 <maria_callApi+0xa6>
			p+=sizeof(char *);
#elif defined( TARGET_ARCH_X64 )
			*((char **)p)=s_maria_argv.argv[i];
			p++;
#elif defined ( TARGET_ARCH_ARM )
			*((char **)p)=s_maria_argv.argv[i];
 80052bc:	4a14      	ldr	r2, [pc, #80]	@ (8005310 <maria_callApi+0xe0>)
 80052be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c0:	3320      	adds	r3, #32
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4413      	add	r3, r2
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ca:	601a      	str	r2, [r3, #0]
			p+=sizeof(char *);
 80052cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ce:	3304      	adds	r3, #4
 80052d0:	62bb      	str	r3, [r7, #40]	@ 0x28
			*((char **)p)=s_maria_argv.argv[i];
			p+=sizeof(char *);
#else
#error "Unknown target architecture"
#endif
			break;
 80052d2:	e000      	b.n	80052d6 <maria_callApi+0xa6>
#endif /* __GNUC__ */
		default:
#if !defined(NO_MARIA_INFO)
			info0(Maria,"Errore unknown type");
#endif
			break;
 80052d4:	bf00      	nop
	for(i=1;i<s_maria_argv.argc;i++)
 80052d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d8:	3301      	adds	r3, #1
 80052da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005310 <maria_callApi+0xe0>)
 80052de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052e4:	429a      	cmp	r2, r3
 80052e6:	dbbc      	blt.n	8005262 <maria_callApi+0x32>
		}
	}
	maria_printf("\n");
 80052e8:	480a      	ldr	r0, [pc, #40]	@ (8005314 <maria_callApi+0xe4>)
 80052ea:	f000 f975 	bl	80055d8 <maria_printf>
	return api(stackSimul.buf[0], stackSimul.buf[1], stackSimul.buf[2], stackSimul.buf[3],
			stackSimul.buf[4], stackSimul.buf[5], stackSimul.buf[6], stackSimul.buf[7],
			stackSimul.buf[8], stackSimul.buf[9], stackSimul.buf[10], stackSimul.buf[11],
			stackSimul.buf[12], stackSimul.buf[13], stackSimul.buf[14], stackSimul.buf[15]);
#elif defined ( TARGET_ARCH_ARM )
	return api(stackSimul);
 80052ee:	466c      	mov	r4, sp
 80052f0:	f107 0318 	add.w	r3, r7, #24
 80052f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80052fa:	f107 0308 	add.w	r3, r7, #8
 80052fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005300:	687c      	ldr	r4, [r7, #4]
 8005302:	47a0      	blx	r4
 8005304:	4603      	mov	r3, r0
		pStackSimul[3]
		);
#else
#error "Unknown compiler"
#endif
}
 8005306:	4618      	mov	r0, r3
 8005308:	3734      	adds	r7, #52	@ 0x34
 800530a:	46bd      	mov	sp, r7
 800530c:	bd90      	pop	{r4, r7, pc}
 800530e:	bf00      	nop
 8005310:	20000768 	.word	0x20000768
 8005314:	08007554 	.word	0x08007554

08005318 <maria_max_fd>:

int maria_max_fd(void)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
	int maxFd=0;
 800531e:	2300      	movs	r3, #0
 8005320:	607b      	str	r3, [r7, #4]
	int i;
	for(i=0;i<MARIA_MAX_FDS;i++)
 8005322:	2300      	movs	r3, #0
 8005324:	603b      	str	r3, [r7, #0]
 8005326:	e00f      	b.n	8005348 <maria_max_fd+0x30>
	{
		maxFd=ARD_max(maxFd, maria_data[i].r_fd);
 8005328:	490c      	ldr	r1, [pc, #48]	@ (800535c <maria_max_fd+0x44>)
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	4613      	mov	r3, r2
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	4413      	add	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	440b      	add	r3, r1
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	4293      	cmp	r3, r2
 800533c:	bfb8      	it	lt
 800533e:	4613      	movlt	r3, r2
 8005340:	607b      	str	r3, [r7, #4]
	for(i=0;i<MARIA_MAX_FDS;i++)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	3301      	adds	r3, #1
 8005346:	603b      	str	r3, [r7, #0]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	ddec      	ble.n	8005328 <maria_max_fd+0x10>
	}
	return maxFd;
 800534e:	687b      	ldr	r3, [r7, #4]
}
 8005350:	4618      	mov	r0, r3
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	200008b4 	.word	0x200008b4

08005360 <maria_init>:

/* --------------------------------------------------------------------- */
/* INTERFACE FUNCTION */
/* --------------------------------------------------------------------- */
void maria_init(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
	int      i;

	//init_maria_table();
	ARD_memset(&s_maria_argv, 0, sizeof(s_maria_argv));
 8005366:	22cc      	movs	r2, #204	@ 0xcc
 8005368:	2100      	movs	r1, #0
 800536a:	4819      	ldr	r0, [pc, #100]	@ (80053d0 <maria_init+0x70>)
 800536c:	f001 fbce 	bl	8006b0c <memset>
	g_active_fd_index = 0;
 8005370:	4b18      	ldr	r3, [pc, #96]	@ (80053d4 <maria_init+0x74>)
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]

	for(i=0; i<MARIA_MAX_FDS; i++)
 8005376:	2300      	movs	r3, #0
 8005378:	607b      	str	r3, [r7, #4]
 800537a:	e021      	b.n	80053c0 <maria_init+0x60>
	{
		maria_data[i].r_fd = -1;
 800537c:	4916      	ldr	r1, [pc, #88]	@ (80053d8 <maria_init+0x78>)
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	4613      	mov	r3, r2
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	4413      	add	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	440b      	add	r3, r1
 800538a:	f04f 32ff 	mov.w	r2, #4294967295
 800538e:	601a      	str	r2, [r3, #0]
		maria_data[i].w_fd = -1;
 8005390:	4911      	ldr	r1, [pc, #68]	@ (80053d8 <maria_init+0x78>)
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	4613      	mov	r3, r2
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	440b      	add	r3, r1
 800539e:	3304      	adds	r3, #4
 80053a0:	f04f 32ff 	mov.w	r2, #4294967295
 80053a4:	601a      	str	r2, [r3, #0]
		maria_data[i].ud.fdType = HANDLE_TYPE_SOCK;
 80053a6:	490c      	ldr	r1, [pc, #48]	@ (80053d8 <maria_init+0x78>)
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	4613      	mov	r3, r2
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	4413      	add	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	440b      	add	r3, r1
 80053b4:	3308      	adds	r3, #8
 80053b6:	2201      	movs	r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
	for(i=0; i<MARIA_MAX_FDS; i++)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3301      	adds	r3, #1
 80053be:	607b      	str	r3, [r7, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	ddda      	ble.n	800537c <maria_init+0x1c>
	}
}
 80053c6:	bf00      	nop
 80053c8:	bf00      	nop
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	20000768 	.word	0x20000768
 80053d4:	20000574 	.word	0x20000574
 80053d8:	200008b4 	.word	0x200008b4

080053dc <maria_finish>:

void maria_finish(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
	int i;

	for(i=0;i<MARIA_MAX_FDS;i++)
 80053e2:	2300      	movs	r3, #0
 80053e4:	607b      	str	r3, [r7, #4]
 80053e6:	e01c      	b.n	8005422 <maria_finish+0x46>
	{
		maria_close(&maria_data[i].r_fd, &maria_data[i].w_fd, &maria_data[i].ud);
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	4613      	mov	r3, r2
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	4413      	add	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4a10      	ldr	r2, [pc, #64]	@ (8005434 <maria_finish+0x58>)
 80053f4:	1898      	adds	r0, r3, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	4613      	mov	r3, r2
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4a0c      	ldr	r2, [pc, #48]	@ (8005434 <maria_finish+0x58>)
 8005402:	4413      	add	r3, r2
 8005404:	1d19      	adds	r1, r3, #4
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	4613      	mov	r3, r2
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	4413      	add	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	3308      	adds	r3, #8
 8005412:	4a08      	ldr	r2, [pc, #32]	@ (8005434 <maria_finish+0x58>)
 8005414:	4413      	add	r3, r2
 8005416:	461a      	mov	r2, r3
 8005418:	f7ff fef6 	bl	8005208 <maria_close>
	for(i=0;i<MARIA_MAX_FDS;i++)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3301      	adds	r3, #1
 8005420:	607b      	str	r3, [r7, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	dddf      	ble.n	80053e8 <maria_finish+0xc>
	}
}
 8005428:	bf00      	nop
 800542a:	bf00      	nop
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	200008b4 	.word	0x200008b4

08005438 <maria_parser>:

int maria_parser(int *pfd_r, int *pfd_w, MARIA_USER_DATA *user_data)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
	int len,l,i;

	len=maria_read(*pfd_r, maria_sLine, MARIA_LINE_SIZE-1, user_data);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6818      	ldr	r0, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	227f      	movs	r2, #127	@ 0x7f
 800544c:	4931      	ldr	r1, [pc, #196]	@ (8005514 <maria_parser+0xdc>)
 800544e:	f7ff fe3f 	bl	80050d0 <maria_read>
 8005452:	6178      	str	r0, [r7, #20]
	maria_sLine[len]=0;
 8005454:	4a2f      	ldr	r2, [pc, #188]	@ (8005514 <maria_parser+0xdc>)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	4413      	add	r3, r2
 800545a:	2200      	movs	r2, #0
 800545c:	701a      	strb	r2, [r3, #0]

	if(len == 0)
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d107      	bne.n	8005474 <maria_parser+0x3c>
	{
		maria_close(pfd_r, pfd_w, user_data);
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	68b9      	ldr	r1, [r7, #8]
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f7ff fecd 	bl	8005208 <maria_close>
		return -1;
 800546e:	f04f 33ff 	mov.w	r3, #4294967295
 8005472:	e04a      	b.n	800550a <maria_parser+0xd2>
	}

	l=ARD_strlen(s_maria_argv.sLine);
 8005474:	4828      	ldr	r0, [pc, #160]	@ (8005518 <maria_parser+0xe0>)
 8005476:	f7fa feb5 	bl	80001e4 <strlen>
 800547a:	4603      	mov	r3, r0
 800547c:	61fb      	str	r3, [r7, #28]

	for(i=0;(i<len && l<(sizeof(s_maria_argv.sLine)-1));i++)
 800547e:	2300      	movs	r3, #0
 8005480:	61bb      	str	r3, [r7, #24]
 8005482:	e039      	b.n	80054f8 <maria_parser+0xc0>
	{
		if(maria_sLine[i]=='\n' || maria_sLine[i]=='\r')
 8005484:	4a23      	ldr	r2, [pc, #140]	@ (8005514 <maria_parser+0xdc>)
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	4413      	add	r3, r2
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	2b0a      	cmp	r3, #10
 800548e:	d005      	beq.n	800549c <maria_parser+0x64>
 8005490:	4a20      	ldr	r2, [pc, #128]	@ (8005514 <maria_parser+0xdc>)
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	4413      	add	r3, r2
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b0d      	cmp	r3, #13
 800549a:	d114      	bne.n	80054c6 <maria_parser+0x8e>
        break;
			}
			else
#endif
			{
				fillArgv(user_data);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fb17 	bl	8005ad0 <fillArgv>
#if defined(PRINTF_DEBUG)
				dumpArgv(); /* for debugging */
#endif
				executeArgv(*pfd_w,&s_maria_argv, user_data);
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	491b      	ldr	r1, [pc, #108]	@ (8005518 <maria_parser+0xe0>)
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 fc1e 	bl	8005cec <executeArgv>
				ARD_memset(&s_maria_argv, 0, sizeof(s_maria_argv));
 80054b0:	22cc      	movs	r2, #204	@ 0xcc
 80054b2:	2100      	movs	r1, #0
 80054b4:	4818      	ldr	r0, [pc, #96]	@ (8005518 <maria_parser+0xe0>)
 80054b6:	f001 fb29 	bl	8006b0c <memset>
				maria_prompt(pfd_r,pfd_w,user_data);
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	68b9      	ldr	r1, [r7, #8]
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 fcce 	bl	8005e60 <maria_prompt>
				break; /* ignore rest of line */
 80054c4:	e01f      	b.n	8005506 <maria_parser+0xce>
			}
//			else if(maria_sLine[i] == 0x7f) {	//del
//			}
			else {
#endif
				s_maria_argv.sLine[l]=maria_sLine[i];
 80054c6:	4a13      	ldr	r2, [pc, #76]	@ (8005514 <maria_parser+0xdc>)
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	4413      	add	r3, r2
 80054cc:	7819      	ldrb	r1, [r3, #0]
 80054ce:	4a12      	ldr	r2, [pc, #72]	@ (8005518 <maria_parser+0xe0>)
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	4413      	add	r3, r2
 80054d4:	460a      	mov	r2, r1
 80054d6:	701a      	strb	r2, [r3, #0]
				l++;
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	3301      	adds	r3, #1
 80054dc:	61fb      	str	r3, [r7, #28]
				s_maria_argv.sLine[l]=0;
 80054de:	4a0e      	ldr	r2, [pc, #56]	@ (8005518 <maria_parser+0xe0>)
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	4413      	add	r3, r2
 80054e4:	2200      	movs	r2, #0
 80054e6:	701a      	strb	r2, [r3, #0]
#ifdef MARIA_LINE_EDIT
			}
#endif
		}
		l=ARD_strlen(s_maria_argv.sLine);
 80054e8:	480b      	ldr	r0, [pc, #44]	@ (8005518 <maria_parser+0xe0>)
 80054ea:	f7fa fe7b 	bl	80001e4 <strlen>
 80054ee:	4603      	mov	r3, r0
 80054f0:	61fb      	str	r3, [r7, #28]
	for(i=0;(i<len && l<(sizeof(s_maria_argv.sLine)-1));i++)
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	3301      	adds	r3, #1
 80054f6:	61bb      	str	r3, [r7, #24]
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	da02      	bge.n	8005506 <maria_parser+0xce>
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	2b7e      	cmp	r3, #126	@ 0x7e
 8005504:	d9be      	bls.n	8005484 <maria_parser+0x4c>
	}

	return *pfd_r;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3720      	adds	r7, #32
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	20000834 	.word	0x20000834
 8005518:	20000768 	.word	0x20000768

0800551c <maria_printf_buffer_flush>:

static int
maria_printf_buffer_flush(int fd_index, char *s)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
	int ret = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
	int   len;

	if((fd_index < 0) || (fd_index >= MARIA_MAX_FDS)) return 0;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	db02      	blt.n	8005536 <maria_printf_buffer_flush+0x1a>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	dd01      	ble.n	800553a <maria_printf_buffer_flush+0x1e>
 8005536:	2300      	movs	r3, #0
 8005538:	e045      	b.n	80055c6 <maria_printf_buffer_flush+0xaa>

	if(maria_data[fd_index].w_fd >= 0)
 800553a:	4925      	ldr	r1, [pc, #148]	@ (80055d0 <maria_printf_buffer_flush+0xb4>)
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	4613      	mov	r3, r2
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	4413      	add	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	440b      	add	r3, r1
 8005548:	3304      	adds	r3, #4
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	db39      	blt.n	80055c4 <maria_printf_buffer_flush+0xa8>
	{
		len = ARD_strlen(s);
 8005550:	6838      	ldr	r0, [r7, #0]
 8005552:	f7fa fe47 	bl	80001e4 <strlen>
 8005556:	4603      	mov	r3, r0
 8005558:	60bb      	str	r3, [r7, #8]
		if(MARIA_ADD_CR)
 800555a:	4b1e      	ldr	r3, [pc, #120]	@ (80055d4 <maria_printf_buffer_flush+0xb8>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d019      	beq.n	8005596 <maria_printf_buffer_flush+0x7a>
		{
			if(s[len-1] == '\n')
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	3b01      	subs	r3, #1
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	4413      	add	r3, r2
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b0a      	cmp	r3, #10
 800556e:	d112      	bne.n	8005596 <maria_printf_buffer_flush+0x7a>
			{
				s[len-1] = '\r';
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	3b01      	subs	r3, #1
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	4413      	add	r3, r2
 8005578:	220d      	movs	r2, #13
 800557a:	701a      	strb	r2, [r3, #0]
				s[len]='\n';
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	4413      	add	r3, r2
 8005582:	220a      	movs	r2, #10
 8005584:	701a      	strb	r2, [r3, #0]
				len ++;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	3301      	adds	r3, #1
 800558a:	60bb      	str	r3, [r7, #8]
				s[len]=0; /* terminate string */
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	4413      	add	r3, r2
 8005592:	2200      	movs	r2, #0
 8005594:	701a      	strb	r2, [r3, #0]
			}
		}
		ret=maria_write(maria_data[fd_index].w_fd,
 8005596:	490e      	ldr	r1, [pc, #56]	@ (80055d0 <maria_printf_buffer_flush+0xb4>)
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	3304      	adds	r3, #4
 80055a6:	6818      	ldr	r0, [r3, #0]
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	4613      	mov	r3, r2
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	4413      	add	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	3308      	adds	r3, #8
 80055b6:	4a06      	ldr	r2, [pc, #24]	@ (80055d0 <maria_printf_buffer_flush+0xb4>)
 80055b8:	4413      	add	r3, r2
 80055ba:	460a      	mov	r2, r1
 80055bc:	6839      	ldr	r1, [r7, #0]
 80055be:	f7ff fdb9 	bl	8005134 <maria_write>
 80055c2:	60f8      	str	r0, [r7, #12]
						s,len, &maria_data[fd_index].ud);
	}
	return ret;
 80055c4:	68fb      	ldr	r3, [r7, #12]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	200008b4 	.word	0x200008b4
 80055d4:	20000bdc 	.word	0x20000bdc

080055d8 <maria_printf>:

int maria_printf(const char *format, ...)
{
 80055d8:	b40f      	push	{r0, r1, r2, r3}
 80055da:	b580      	push	{r7, lr}
 80055dc:	b082      	sub	sp, #8
 80055de:	af00      	add	r7, sp, #0
	static char maria_printf_buffer[128];
	int ret = 0;
 80055e0:	2300      	movs	r3, #0
 80055e2:	607b      	str	r3, [r7, #4]

	va_list ap;

	va_start(ap, format);
 80055e4:	f107 0314 	add.w	r3, r7, #20
 80055e8:	603b      	str	r3, [r7, #0]

#if defined(__GNUC__)
	ARD_vsnprintf(maria_printf_buffer,sizeof(maria_printf_buffer),format,ap);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	2180      	movs	r1, #128	@ 0x80
 80055f0:	480a      	ldr	r0, [pc, #40]	@ (800561c <maria_printf+0x44>)
 80055f2:	f001 fa7d 	bl	8006af0 <vsniprintf>
#elif defined(SDCC_hc08)
	ARD_vsprintf(maria_printf_buffer,format,ap);
#else
#error "Unsupported compiler"
#endif
	maria_printf_buffer[sizeof(maria_printf_buffer)-1]=0;
 80055f6:	4b09      	ldr	r3, [pc, #36]	@ (800561c <maria_printf+0x44>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
	ret = maria_printf_buffer_flush(g_active_fd_index, maria_printf_buffer);
 80055fe:	4b08      	ldr	r3, [pc, #32]	@ (8005620 <maria_printf+0x48>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4906      	ldr	r1, [pc, #24]	@ (800561c <maria_printf+0x44>)
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff ff89 	bl	800551c <maria_printf_buffer_flush>
 800560a:	6078      	str	r0, [r7, #4]

	va_end(ap);
	return ret;
 800560c:	687b      	ldr	r3, [r7, #4]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005618:	b004      	add	sp, #16
 800561a:	4770      	bx	lr
 800561c:	200008d8 	.word	0x200008d8
 8005620:	20000574 	.word	0x20000574

08005624 <maria_fprintf>:

int maria_fprintf(int fd_idx,const char *format, ...)
{
 8005624:	b40e      	push	{r1, r2, r3}
 8005626:	b580      	push	{r7, lr}
 8005628:	b085      	sub	sp, #20
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
	static char maria_printf_buffer[128];
	int ret = 0;
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]

	va_list ap;

	va_start(ap, format);
 8005632:	f107 0320 	add.w	r3, r7, #32
 8005636:	60bb      	str	r3, [r7, #8]

#if defined(__GNUC__)
	ARD_vsnprintf(maria_printf_buffer,sizeof(maria_printf_buffer),format,ap);
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	69fa      	ldr	r2, [r7, #28]
 800563c:	2180      	movs	r1, #128	@ 0x80
 800563e:	480a      	ldr	r0, [pc, #40]	@ (8005668 <maria_fprintf+0x44>)
 8005640:	f001 fa56 	bl	8006af0 <vsniprintf>
#elif defined(SDCC_hc08)
	ARD_vsprintf(maria_printf_buffer,format,ap);
#else
#error "Unsupported compiler"
#endif
	maria_printf_buffer[sizeof(maria_printf_buffer)-1]=0;
 8005644:	4b08      	ldr	r3, [pc, #32]	@ (8005668 <maria_fprintf+0x44>)
 8005646:	2200      	movs	r2, #0
 8005648:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
	ret = maria_printf_buffer_flush(fd_idx, maria_printf_buffer);
 800564c:	4906      	ldr	r1, [pc, #24]	@ (8005668 <maria_fprintf+0x44>)
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff ff64 	bl	800551c <maria_printf_buffer_flush>
 8005654:	60f8      	str	r0, [r7, #12]

	va_end(ap);
	return ret;
 8005656:	68fb      	ldr	r3, [r7, #12]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005662:	b003      	add	sp, #12
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	20000958 	.word	0x20000958

0800566c <isDelim>:
}

#endif

static int isDelim(char c, char *delim)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	4603      	mov	r3, r0
 8005674:	6039      	str	r1, [r7, #0]
 8005676:	71fb      	strb	r3, [r7, #7]
	int      ndelim = ARD_strlen(delim);
 8005678:	6838      	ldr	r0, [r7, #0]
 800567a:	f7fa fdb3 	bl	80001e4 <strlen>
 800567e:	4603      	mov	r3, r0
 8005680:	60bb      	str	r3, [r7, #8]
	int      i;

	for(i=0; i<ndelim; i++)
 8005682:	2300      	movs	r3, #0
 8005684:	60fb      	str	r3, [r7, #12]
 8005686:	e00b      	b.n	80056a0 <isDelim+0x34>
	{
		if(c == delim[i]) return 1;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	4413      	add	r3, r2
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	79fa      	ldrb	r2, [r7, #7]
 8005692:	429a      	cmp	r2, r3
 8005694:	d101      	bne.n	800569a <isDelim+0x2e>
 8005696:	2301      	movs	r3, #1
 8005698:	e007      	b.n	80056aa <isDelim+0x3e>
	for(i=0; i<ndelim; i++)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	3301      	adds	r3, #1
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	dbef      	blt.n	8005688 <isDelim+0x1c>
	}
	return 0;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <tokenizer>:

static char *tokenizer(char *sin, char *delim, char **pnext)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b088      	sub	sp, #32
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	607a      	str	r2, [r7, #4]
	char             *pTok = NULL;
 80056be:	2300      	movs	r3, #0
 80056c0:	613b      	str	r3, [r7, #16]
	int              ignoreDelim = 0;
 80056c2:	2300      	movs	r3, #0
 80056c4:	61fb      	str	r3, [r7, #28]
	int              delimFound = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61bb      	str	r3, [r7, #24]
	char             prevChar=0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	75fb      	strb	r3, [r7, #23]

	if((delim == NULL)||(pnext == NULL)) return NULL;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <tokenizer+0x28>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <tokenizer+0x2c>
 80056da:	2300      	movs	r3, #0
 80056dc:	e06a      	b.n	80057b4 <tokenizer+0x102>
	if(delim[0] == 0) return NULL;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <tokenizer+0x38>
 80056e6:	2300      	movs	r3, #0
 80056e8:	e064      	b.n	80057b4 <tokenizer+0x102>

	if(sin != NULL) *pnext = sin;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <tokenizer+0x44>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	601a      	str	r2, [r3, #0]

	if((*(*pnext)) == 0) return NULL;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10a      	bne.n	8005716 <tokenizer+0x64>
 8005700:	2300      	movs	r3, #0
 8005702:	e057      	b.n	80057b4 <tokenizer+0x102>

	while(isDelim(*(*pnext), delim))
	{
		*(*pnext) = 0;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2200      	movs	r2, #0
 800570a:	701a      	strb	r2, [r3, #0]
		(*pnext)++;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	601a      	str	r2, [r3, #0]
	while(isDelim(*(*pnext), delim))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	68b9      	ldr	r1, [r7, #8]
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff ffa4 	bl	800566c <isDelim>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1ec      	bne.n	8005704 <tokenizer+0x52>
	}

	pTok = *pnext;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	613b      	str	r3, [r7, #16]
	while((*(*pnext)) != 0)
 8005730:	e03a      	b.n	80057a8 <tokenizer+0xf6>
	{
		if((*(*pnext)) ==  '"')
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	2b22      	cmp	r3, #34	@ 0x22
 800573a:	d109      	bne.n	8005750 <tokenizer+0x9e>
		{
			if(prevChar != '\\') ignoreDelim = (ignoreDelim ? 0 : 1);
 800573c:	7dfb      	ldrb	r3, [r7, #23]
 800573e:	2b5c      	cmp	r3, #92	@ 0x5c
 8005740:	d006      	beq.n	8005750 <tokenizer+0x9e>
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	2b00      	cmp	r3, #0
 8005746:	bf0c      	ite	eq
 8005748:	2301      	moveq	r3, #1
 800574a:	2300      	movne	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	61fb      	str	r3, [r7, #28]
		}

		if((!ignoreDelim) && isDelim(*(*pnext), delim))
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d110      	bne.n	8005778 <tokenizer+0xc6>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	4618      	mov	r0, r3
 8005760:	f7ff ff84 	bl	800566c <isDelim>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d006      	beq.n	8005778 <tokenizer+0xc6>
		{
			delimFound = 1;
 800576a:	2301      	movs	r3, #1
 800576c:	61bb      	str	r3, [r7, #24]
			*(*pnext) = 0;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2200      	movs	r2, #0
 8005774:	701a      	strb	r2, [r3, #0]
 8005776:	e00e      	b.n	8005796 <tokenizer+0xe4>
		}
		else if(delimFound && (!isDelim(*(*pnext), delim)))
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00b      	beq.n	8005796 <tokenizer+0xe4>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	68b9      	ldr	r1, [r7, #8]
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff ff70 	bl	800566c <isDelim>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <tokenizer+0xe4>
		{
			return pTok;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	e00e      	b.n	80057b4 <tokenizer+0x102>
		}
		prevChar = *(*pnext);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	75fb      	strb	r3, [r7, #23]
		(*pnext)++;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	601a      	str	r2, [r3, #0]
	while((*(*pnext)) != 0)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1bf      	bne.n	8005732 <tokenizer+0x80>
	}
	return pTok;
 80057b2:	693b      	ldr	r3, [r7, #16]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3720      	adds	r7, #32
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <hex2nibble>:

static uint8_t hex2nibble(char h)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	71fb      	strb	r3, [r7, #7]
	if(h < '0') return 0;
 80057c6:	79fb      	ldrb	r3, [r7, #7]
 80057c8:	2b2f      	cmp	r3, #47	@ 0x2f
 80057ca:	d801      	bhi.n	80057d0 <hex2nibble+0x14>
 80057cc:	2300      	movs	r3, #0
 80057ce:	e01f      	b.n	8005810 <hex2nibble+0x54>
	if(h <= '9') return (h - '0');
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	2b39      	cmp	r3, #57	@ 0x39
 80057d4:	d803      	bhi.n	80057de <hex2nibble+0x22>
 80057d6:	79fb      	ldrb	r3, [r7, #7]
 80057d8:	3b30      	subs	r3, #48	@ 0x30
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	e018      	b.n	8005810 <hex2nibble+0x54>
	if(h < 'A') return 0;
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	2b40      	cmp	r3, #64	@ 0x40
 80057e2:	d801      	bhi.n	80057e8 <hex2nibble+0x2c>
 80057e4:	2300      	movs	r3, #0
 80057e6:	e013      	b.n	8005810 <hex2nibble+0x54>
	if(h <= 'F') return (h -'A' + 10);
 80057e8:	79fb      	ldrb	r3, [r7, #7]
 80057ea:	2b46      	cmp	r3, #70	@ 0x46
 80057ec:	d803      	bhi.n	80057f6 <hex2nibble+0x3a>
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	3b37      	subs	r3, #55	@ 0x37
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	e00c      	b.n	8005810 <hex2nibble+0x54>
	if(h < 'a') return 0;
 80057f6:	79fb      	ldrb	r3, [r7, #7]
 80057f8:	2b60      	cmp	r3, #96	@ 0x60
 80057fa:	d801      	bhi.n	8005800 <hex2nibble+0x44>
 80057fc:	2300      	movs	r3, #0
 80057fe:	e007      	b.n	8005810 <hex2nibble+0x54>
	if(h <= 'f') return (h -'a' + 10);
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	2b66      	cmp	r3, #102	@ 0x66
 8005804:	d803      	bhi.n	800580e <hex2nibble+0x52>
 8005806:	79fb      	ldrb	r3, [r7, #7]
 8005808:	3b57      	subs	r3, #87	@ 0x57
 800580a:	b2db      	uxtb	r3, r3
 800580c:	e000      	b.n	8005810 <hex2nibble+0x54>
	return 0;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <hex2byte>:

static uint8_t hex2byte(char *h)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
	 uint8_t   val;

	 val = hex2nibble(h[0]);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	4618      	mov	r0, r3
 800582a:	f7ff ffc7 	bl	80057bc <hex2nibble>
 800582e:	4603      	mov	r3, r0
 8005830:	73fb      	strb	r3, [r7, #15]
	 val <<= 4;
 8005832:	7bfb      	ldrb	r3, [r7, #15]
 8005834:	011b      	lsls	r3, r3, #4
 8005836:	73fb      	strb	r3, [r7, #15]
	 val |= hex2nibble(h[1]);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3301      	adds	r3, #1
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff ffbc 	bl	80057bc <hex2nibble>
 8005844:	4603      	mov	r3, r0
 8005846:	461a      	mov	r2, r3
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	4313      	orrs	r3, r2
 800584c:	73fb      	strb	r3, [r7, #15]

	return val;
 800584e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <unquoteToken>:

static void unquoteToken(char *tok)
{
 8005858:	b590      	push	{r4, r7, lr}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
	int 	len = ARD_strlen(tok);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7fa fcbf 	bl	80001e4 <strlen>
 8005866:	4603      	mov	r3, r0
 8005868:	60fb      	str	r3, [r7, #12]
	int     i, j;

	for(i=0; i<(len-1); i++)
 800586a:	2300      	movs	r3, #0
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	e123      	b.n	8005ab8 <unquoteToken+0x260>
	{
		if(tok[i] == '\\')
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	4413      	add	r3, r2
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b5c      	cmp	r3, #92	@ 0x5c
 800587a:	f040 811a 	bne.w	8005ab2 <unquoteToken+0x25a>
		{
			switch(tok[i+1])
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	3301      	adds	r3, #1
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	4413      	add	r3, r2
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	2b22      	cmp	r3, #34	@ 0x22
 800588a:	f000 80cb 	beq.w	8005a24 <unquoteToken+0x1cc>
 800588e:	2b22      	cmp	r3, #34	@ 0x22
 8005890:	f2c0 810f 	blt.w	8005ab2 <unquoteToken+0x25a>
 8005894:	2b78      	cmp	r3, #120	@ 0x78
 8005896:	f300 810c 	bgt.w	8005ab2 <unquoteToken+0x25a>
 800589a:	2b5c      	cmp	r3, #92	@ 0x5c
 800589c:	f2c0 8109 	blt.w	8005ab2 <unquoteToken+0x25a>
 80058a0:	3b5c      	subs	r3, #92	@ 0x5c
 80058a2:	2b1c      	cmp	r3, #28
 80058a4:	f200 8105 	bhi.w	8005ab2 <unquoteToken+0x25a>
 80058a8:	a201      	add	r2, pc, #4	@ (adr r2, 80058b0 <unquoteToken+0x58>)
 80058aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ae:	bf00      	nop
 80058b0:	080059e5 	.word	0x080059e5
 80058b4:	08005ab3 	.word	0x08005ab3
 80058b8:	08005ab3 	.word	0x08005ab3
 80058bc:	08005ab3 	.word	0x08005ab3
 80058c0:	08005ab3 	.word	0x08005ab3
 80058c4:	08005ab3 	.word	0x08005ab3
 80058c8:	08005ab3 	.word	0x08005ab3
 80058cc:	08005ab3 	.word	0x08005ab3
 80058d0:	08005ab3 	.word	0x08005ab3
 80058d4:	08005ab3 	.word	0x08005ab3
 80058d8:	08005ab3 	.word	0x08005ab3
 80058dc:	08005ab3 	.word	0x08005ab3
 80058e0:	08005ab3 	.word	0x08005ab3
 80058e4:	08005ab3 	.word	0x08005ab3
 80058e8:	08005ab3 	.word	0x08005ab3
 80058ec:	08005ab3 	.word	0x08005ab3
 80058f0:	08005ab3 	.word	0x08005ab3
 80058f4:	08005ab3 	.word	0x08005ab3
 80058f8:	08005965 	.word	0x08005965
 80058fc:	08005ab3 	.word	0x08005ab3
 8005900:	08005ab3 	.word	0x08005ab3
 8005904:	08005ab3 	.word	0x08005ab3
 8005908:	080059a5 	.word	0x080059a5
 800590c:	08005ab3 	.word	0x08005ab3
 8005910:	08005925 	.word	0x08005925
 8005914:	08005ab3 	.word	0x08005ab3
 8005918:	08005ab3 	.word	0x08005ab3
 800591c:	08005ab3 	.word	0x08005ab3
 8005920:	08005a65 	.word	0x08005a65
			{
				case 't':
					tok[i] = '\t';
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	4413      	add	r3, r2
 800592a:	2209      	movs	r2, #9
 800592c:	701a      	strb	r2, [r3, #0]
					for(j=i+1; j<len-1; j++) tok[j] = tok[j+1];
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	3301      	adds	r3, #1
 8005932:	613b      	str	r3, [r7, #16]
 8005934:	e00b      	b.n	800594e <unquoteToken+0xf6>
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	3301      	adds	r3, #1
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	441a      	add	r2, r3
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	440b      	add	r3, r1
 8005944:	7812      	ldrb	r2, [r2, #0]
 8005946:	701a      	strb	r2, [r3, #0]
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	3301      	adds	r3, #1
 800594c:	613b      	str	r3, [r7, #16]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3b01      	subs	r3, #1
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	429a      	cmp	r2, r3
 8005956:	dbee      	blt.n	8005936 <unquoteToken+0xde>
					tok[j] = 0;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	4413      	add	r3, r2
 800595e:	2200      	movs	r2, #0
 8005960:	701a      	strb	r2, [r3, #0]
				break;
 8005962:	e0a6      	b.n	8005ab2 <unquoteToken+0x25a>
				case 'n':
					tok[i] = '\n';
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	4413      	add	r3, r2
 800596a:	220a      	movs	r2, #10
 800596c:	701a      	strb	r2, [r3, #0]
					for(j=i+1; j<len-1; j++) tok[j] = tok[j+1];
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	3301      	adds	r3, #1
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	e00b      	b.n	800598e <unquoteToken+0x136>
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	3301      	adds	r3, #1
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	441a      	add	r2, r3
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	440b      	add	r3, r1
 8005984:	7812      	ldrb	r2, [r2, #0]
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	3301      	adds	r3, #1
 800598c:	613b      	str	r3, [r7, #16]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3b01      	subs	r3, #1
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	429a      	cmp	r2, r3
 8005996:	dbee      	blt.n	8005976 <unquoteToken+0x11e>
					tok[j] = 0;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	4413      	add	r3, r2
 800599e:	2200      	movs	r2, #0
 80059a0:	701a      	strb	r2, [r3, #0]
				break;
 80059a2:	e086      	b.n	8005ab2 <unquoteToken+0x25a>
				case 'r':
					tok[i] = '\r';
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	4413      	add	r3, r2
 80059aa:	220d      	movs	r2, #13
 80059ac:	701a      	strb	r2, [r3, #0]
					for(j=i+1; j<len-1; j++) tok[j] = tok[j+1];
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	3301      	adds	r3, #1
 80059b2:	613b      	str	r3, [r7, #16]
 80059b4:	e00b      	b.n	80059ce <unquoteToken+0x176>
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	3301      	adds	r3, #1
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	441a      	add	r2, r3
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	440b      	add	r3, r1
 80059c4:	7812      	ldrb	r2, [r2, #0]
 80059c6:	701a      	strb	r2, [r3, #0]
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	3301      	adds	r3, #1
 80059cc:	613b      	str	r3, [r7, #16]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	3b01      	subs	r3, #1
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	dbee      	blt.n	80059b6 <unquoteToken+0x15e>
					tok[j] = 0;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	4413      	add	r3, r2
 80059de:	2200      	movs	r2, #0
 80059e0:	701a      	strb	r2, [r3, #0]
				break;
 80059e2:	e066      	b.n	8005ab2 <unquoteToken+0x25a>
				case '\\':
					tok[i] = '\\';
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	4413      	add	r3, r2
 80059ea:	225c      	movs	r2, #92	@ 0x5c
 80059ec:	701a      	strb	r2, [r3, #0]
					for(j=i+1; j<len-1; j++) tok[j] = tok[j+1];
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	3301      	adds	r3, #1
 80059f2:	613b      	str	r3, [r7, #16]
 80059f4:	e00b      	b.n	8005a0e <unquoteToken+0x1b6>
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	3301      	adds	r3, #1
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	441a      	add	r2, r3
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	440b      	add	r3, r1
 8005a04:	7812      	ldrb	r2, [r2, #0]
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	613b      	str	r3, [r7, #16]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	dbee      	blt.n	80059f6 <unquoteToken+0x19e>
					tok[j] = 0;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	2200      	movs	r2, #0
 8005a20:	701a      	strb	r2, [r3, #0]
				break;
 8005a22:	e046      	b.n	8005ab2 <unquoteToken+0x25a>
				case '\"':
					tok[i] = '\"';
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	4413      	add	r3, r2
 8005a2a:	2222      	movs	r2, #34	@ 0x22
 8005a2c:	701a      	strb	r2, [r3, #0]
					for(j=i+1; j<len-1; j++) tok[j] = tok[j+1];
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	3301      	adds	r3, #1
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	e00b      	b.n	8005a4e <unquoteToken+0x1f6>
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	441a      	add	r2, r3
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	440b      	add	r3, r1
 8005a44:	7812      	ldrb	r2, [r2, #0]
 8005a46:	701a      	strb	r2, [r3, #0]
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	613b      	str	r3, [r7, #16]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	3b01      	subs	r3, #1
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	dbee      	blt.n	8005a36 <unquoteToken+0x1de>
					tok[j] = 0;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	2200      	movs	r2, #0
 8005a60:	701a      	strb	r2, [r3, #0]
				break;
 8005a62:	e026      	b.n	8005ab2 <unquoteToken+0x25a>
				case 'x':
					tok[i] = hex2byte(&(tok[i+2]));
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	3302      	adds	r3, #2
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	18d1      	adds	r1, r2, r3
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	18d4      	adds	r4, r2, r3
 8005a72:	4608      	mov	r0, r1
 8005a74:	f7ff fed2 	bl	800581c <hex2byte>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	7023      	strb	r3, [r4, #0]
					for(j=i+1; j<len-3; j++) tok[j] = tok[j+3];
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	613b      	str	r3, [r7, #16]
 8005a82:	e00b      	b.n	8005a9c <unquoteToken+0x244>
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	3303      	adds	r3, #3
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	441a      	add	r2, r3
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	440b      	add	r3, r1
 8005a92:	7812      	ldrb	r2, [r2, #0]
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	613b      	str	r3, [r7, #16]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3b03      	subs	r3, #3
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	dbee      	blt.n	8005a84 <unquoteToken+0x22c>
					tok[j] = 0;
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	4413      	add	r3, r2
 8005aac:	2200      	movs	r2, #0
 8005aae:	701a      	strb	r2, [r3, #0]
				break;
 8005ab0:	bf00      	nop
	for(i=0; i<(len-1); i++)
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	f6ff aed6 	blt.w	8005870 <unquoteToken+0x18>
			}
		}
	}
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd90      	pop	{r4, r7, pc}
 8005ace:	bf00      	nop

08005ad0 <fillArgv>:


static void fillArgv(MARIA_USER_DATA *user_data)
{
 8005ad0:	b590      	push	{r4, r7, lr}
 8005ad2:	b089      	sub	sp, #36	@ 0x24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
	char  *p=NULL;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61fb      	str	r3, [r7, #28]
	char  delims[]=" \t\n\r=(),:><";
 8005adc:	4a7f      	ldr	r2, [pc, #508]	@ (8005cdc <fillArgv+0x20c>)
 8005ade:	f107 030c 	add.w	r3, r7, #12
 8005ae2:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ae4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	register int   i, idx;
	int len;
	static char *strtokptr;

	s_maria_argv.argc=0;
 8005ae8:	4b7d      	ldr	r3, [pc, #500]	@ (8005ce0 <fillArgv+0x210>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	p=tokenizer(s_maria_argv.sLine,delims,&strtokptr);
 8005af0:	f107 030c 	add.w	r3, r7, #12
 8005af4:	4a7b      	ldr	r2, [pc, #492]	@ (8005ce4 <fillArgv+0x214>)
 8005af6:	4619      	mov	r1, r3
 8005af8:	4879      	ldr	r0, [pc, #484]	@ (8005ce0 <fillArgv+0x210>)
 8005afa:	f7ff fdda 	bl	80056b2 <tokenizer>
 8005afe:	61f8      	str	r0, [r7, #28]
	while(p)
 8005b00:	e0e2      	b.n	8005cc8 <fillArgv+0x1f8>
	{
		unquoteToken(p);
 8005b02:	69f8      	ldr	r0, [r7, #28]
 8005b04:	f7ff fea8 	bl	8005858 <unquoteToken>
		idx=findSymbolExact(p);
 8005b08:	69f8      	ldr	r0, [r7, #28]
 8005b0a:	f000 f97b 	bl	8005e04 <findSymbolExact>
 8005b0e:	4604      	mov	r4, r0
		if(idx >= 0)
 8005b10:	2c00      	cmp	r4, #0
 8005b12:	db19      	blt.n	8005b48 <fillArgv+0x78>
		{
			s_maria_argv.type[s_maria_argv.argc]=MARIA_TYPE_SYMBOL;
 8005b14:	4b72      	ldr	r3, [pc, #456]	@ (8005ce0 <fillArgv+0x210>)
 8005b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b1a:	4a71      	ldr	r2, [pc, #452]	@ (8005ce0 <fillArgv+0x210>)
 8005b1c:	4413      	add	r3, r2
 8005b1e:	2204      	movs	r2, #4
 8005b20:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
#ifdef MARIA_TABLE_ON_FLASH

			memcpy_P(&s_maria_table_record_copy, &(maria_table[idx]), sizeof(s_maria_table_record_copy));
			s_maria_argv.lValue[s_maria_argv.argc]=(PTRSTORAGE)s_maria_table_record_copy.symaddr;
#else
			s_maria_argv.lValue[s_maria_argv.argc]=(PTRSTORAGE)maria_table[idx].symaddr;
 8005b24:	4a70      	ldr	r2, [pc, #448]	@ (8005ce8 <fillArgv+0x218>)
 8005b26:	4623      	mov	r3, r4
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4423      	add	r3, r4
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	4413      	add	r3, r2
 8005b30:	3324      	adds	r3, #36	@ 0x24
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	4b6a      	ldr	r3, [pc, #424]	@ (8005ce0 <fillArgv+0x210>)
 8005b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	4a68      	ldr	r2, [pc, #416]	@ (8005ce0 <fillArgv+0x210>)
 8005b3e:	3328      	adds	r3, #40	@ 0x28
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	6059      	str	r1, [r3, #4]
 8005b46:	e0a2      	b.n	8005c8e <fillArgv+0x1be>
				s_maria_argv.type[s_maria_argv.argc] = MARIA_TYPE_INT;
				s_maria_argv.lValue[s_maria_argv.argc] = ANS;
			}
#endif
		}
		else if(p[0]=='\"')
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b22      	cmp	r3, #34	@ 0x22
 8005b4e:	d122      	bne.n	8005b96 <fillArgv+0xc6>
		{
			/* it is a string */
			p++; /* skip leading \"*/
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	3301      	adds	r3, #1
 8005b54:	61fb      	str	r3, [r7, #28]
			len=ARD_strlen(p);
 8005b56:	69f8      	ldr	r0, [r7, #28]
 8005b58:	f7fa fb44 	bl	80001e4 <strlen>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	61bb      	str	r3, [r7, #24]
			for(i=len-1;i>=0;i--)
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	1e5c      	subs	r4, r3, #1
 8005b64:	e00c      	b.n	8005b80 <fillArgv+0xb0>
			{
				if(p[i]=='\"')
 8005b66:	4622      	mov	r2, r4
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	2b22      	cmp	r3, #34	@ 0x22
 8005b70:	d105      	bne.n	8005b7e <fillArgv+0xae>
				{
					p[i]=0;
 8005b72:	4622      	mov	r2, r4
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	4413      	add	r3, r2
 8005b78:	2200      	movs	r2, #0
 8005b7a:	701a      	strb	r2, [r3, #0]
					break;
 8005b7c:	e002      	b.n	8005b84 <fillArgv+0xb4>
			for(i=len-1;i>=0;i--)
 8005b7e:	3c01      	subs	r4, #1
 8005b80:	2c00      	cmp	r4, #0
 8005b82:	daf0      	bge.n	8005b66 <fillArgv+0x96>
				}
			}
			s_maria_argv.type[s_maria_argv.argc]=MARIA_TYPE_STRING;
 8005b84:	4b56      	ldr	r3, [pc, #344]	@ (8005ce0 <fillArgv+0x210>)
 8005b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b8a:	4a55      	ldr	r2, [pc, #340]	@ (8005ce0 <fillArgv+0x210>)
 8005b8c:	4413      	add	r3, r2
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
 8005b94:	e07b      	b.n	8005c8e <fillArgv+0x1be>
		}
		else if((p[0]=='c')||(p[0]=='C'))
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	2b63      	cmp	r3, #99	@ 0x63
 8005b9c:	d003      	beq.n	8005ba6 <fillArgv+0xd6>
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	2b43      	cmp	r3, #67	@ 0x43
 8005ba4:	d119      	bne.n	8005bda <fillArgv+0x10a>
		{
			s_maria_argv.type[s_maria_argv.argc]=MARIA_TYPE_CHAR;
 8005ba6:	4b4e      	ldr	r3, [pc, #312]	@ (8005ce0 <fillArgv+0x210>)
 8005ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bac:	4a4c      	ldr	r2, [pc, #304]	@ (8005ce0 <fillArgv+0x210>)
 8005bae:	4413      	add	r3, r2
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
			s_maria_argv.lValue[s_maria_argv.argc]=ARD_strtol(p+1,NULL,0);
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	4a49      	ldr	r2, [pc, #292]	@ (8005ce0 <fillArgv+0x210>)
 8005bbc:	f8d2 4080 	ldr.w	r4, [r2, #128]	@ 0x80
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 fec5 	bl	8006954 <strtol>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	4944      	ldr	r1, [pc, #272]	@ (8005ce0 <fillArgv+0x210>)
 8005bce:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	440b      	add	r3, r1
 8005bd6:	605a      	str	r2, [r3, #4]
 8005bd8:	e059      	b.n	8005c8e <fillArgv+0x1be>
		}
		else if((p[0]=='s')||(p[0]=='S'))
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b73      	cmp	r3, #115	@ 0x73
 8005be0:	d003      	beq.n	8005bea <fillArgv+0x11a>
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	2b53      	cmp	r3, #83	@ 0x53
 8005be8:	d119      	bne.n	8005c1e <fillArgv+0x14e>
		{
			s_maria_argv.type[s_maria_argv.argc]=MARIA_TYPE_SHORT;
 8005bea:	4b3d      	ldr	r3, [pc, #244]	@ (8005ce0 <fillArgv+0x210>)
 8005bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bf0:	4a3b      	ldr	r2, [pc, #236]	@ (8005ce0 <fillArgv+0x210>)
 8005bf2:	4413      	add	r3, r2
 8005bf4:	2203      	movs	r2, #3
 8005bf6:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
			s_maria_argv.lValue[s_maria_argv.argc]=ARD_strtol(p+1,NULL,0);
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	4a38      	ldr	r2, [pc, #224]	@ (8005ce0 <fillArgv+0x210>)
 8005c00:	f8d2 4080 	ldr.w	r4, [r2, #128]	@ 0x80
 8005c04:	2200      	movs	r2, #0
 8005c06:	2100      	movs	r1, #0
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 fea3 	bl	8006954 <strtol>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	4933      	ldr	r1, [pc, #204]	@ (8005ce0 <fillArgv+0x210>)
 8005c12:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	440b      	add	r3, r1
 8005c1a:	605a      	str	r2, [r3, #4]
 8005c1c:	e037      	b.n	8005c8e <fillArgv+0x1be>
		}
		else if((p[0]=='0')&&(p[1]=='x'))
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	2b30      	cmp	r3, #48	@ 0x30
 8005c24:	d11c      	bne.n	8005c60 <fillArgv+0x190>
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	2b78      	cmp	r3, #120	@ 0x78
 8005c2e:	d117      	bne.n	8005c60 <fillArgv+0x190>
		{
			s_maria_argv.type[s_maria_argv.argc]=MARIA_TYPE_INT;
 8005c30:	4b2b      	ldr	r3, [pc, #172]	@ (8005ce0 <fillArgv+0x210>)
 8005c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c36:	4a2a      	ldr	r2, [pc, #168]	@ (8005ce0 <fillArgv+0x210>)
 8005c38:	4413      	add	r3, r2
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
			s_maria_argv.ulValue[s_maria_argv.argc]=ARD_strtoul(p,NULL,0);
 8005c40:	4b27      	ldr	r3, [pc, #156]	@ (8005ce0 <fillArgv+0x210>)
 8005c42:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8005c46:	2200      	movs	r2, #0
 8005c48:	2100      	movs	r1, #0
 8005c4a:	69f8      	ldr	r0, [r7, #28]
 8005c4c:	f000 fefa 	bl	8006a44 <strtoul>
 8005c50:	4602      	mov	r2, r0
 8005c52:	4923      	ldr	r1, [pc, #140]	@ (8005ce0 <fillArgv+0x210>)
 8005c54:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	605a      	str	r2, [r3, #4]
 8005c5e:	e016      	b.n	8005c8e <fillArgv+0x1be>
		}
		else
		{
			s_maria_argv.type[s_maria_argv.argc]=MARIA_TYPE_INT;
 8005c60:	4b1f      	ldr	r3, [pc, #124]	@ (8005ce0 <fillArgv+0x210>)
 8005c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c66:	4a1e      	ldr	r2, [pc, #120]	@ (8005ce0 <fillArgv+0x210>)
 8005c68:	4413      	add	r3, r2
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
#if defined ( TARGET_ARCH_PIC32 )
			errno = 0;
			s_maria_argv.lValue[s_maria_argv.argc]= ARD_strtoll(p,NULL,0);
#else
			s_maria_argv.lValue[s_maria_argv.argc]= ARD_strtol(p,NULL,0);
 8005c70:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce0 <fillArgv+0x210>)
 8005c72:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8005c76:	2200      	movs	r2, #0
 8005c78:	2100      	movs	r1, #0
 8005c7a:	69f8      	ldr	r0, [r7, #28]
 8005c7c:	f000 fe6a 	bl	8006954 <strtol>
 8005c80:	4602      	mov	r2, r0
 8005c82:	4917      	ldr	r1, [pc, #92]	@ (8005ce0 <fillArgv+0x210>)
 8005c84:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	440b      	add	r3, r1
 8005c8c:	605a      	str	r2, [r3, #4]
#endif
		}
		s_maria_argv.argv[s_maria_argv.argc]=p;
 8005c8e:	4b14      	ldr	r3, [pc, #80]	@ (8005ce0 <fillArgv+0x210>)
 8005c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c94:	4a12      	ldr	r2, [pc, #72]	@ (8005ce0 <fillArgv+0x210>)
 8005c96:	3320      	adds	r3, #32
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	69fa      	ldr	r2, [r7, #28]
 8005c9e:	605a      	str	r2, [r3, #4]
		s_maria_argv.argc++;
 8005ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8005ce0 <fillArgv+0x210>)
 8005ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8005ce0 <fillArgv+0x210>)
 8005caa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
		if(s_maria_argv.argc>=MARIA_MAX_ARGC) break;
 8005cae:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce0 <fillArgv+0x210>)
 8005cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cb4:	2b07      	cmp	r3, #7
 8005cb6:	dc0c      	bgt.n	8005cd2 <fillArgv+0x202>

		p=tokenizer(NULL,delims,&strtokptr);
 8005cb8:	f107 030c 	add.w	r3, r7, #12
 8005cbc:	4a09      	ldr	r2, [pc, #36]	@ (8005ce4 <fillArgv+0x214>)
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	f7ff fcf6 	bl	80056b2 <tokenizer>
 8005cc6:	61f8      	str	r0, [r7, #28]
	while(p)
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f47f af19 	bne.w	8005b02 <fillArgv+0x32>
	}
}
 8005cd0:	e000      	b.n	8005cd4 <fillArgv+0x204>
		if(s_maria_argv.argc>=MARIA_MAX_ARGC) break;
 8005cd2:	bf00      	nop
}
 8005cd4:	bf00      	nop
 8005cd6:	3724      	adds	r7, #36	@ 0x24
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd90      	pop	{r4, r7, pc}
 8005cdc:	08007558 	.word	0x08007558
 8005ce0:	20000768 	.word	0x20000768
 8005ce4:	200009d8 	.word	0x200009d8
 8005ce8:	2000000c 	.word	0x2000000c

08005cec <executeArgv>:
}
#endif /* PRINTF_DEBUG */


static void executeArgv(int fd, MARIA_PARSED_LINE *pCmd, MARIA_USER_DATA *user_data)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
	MARIA_TABLE_RECORD *p;
	int retval = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	613b      	str	r3, [r7, #16]
#ifdef MARIA_TABLE_ON_FLASH
	uint16_t   idxP = 0;
	memcpy_P(&(s_maria_table_record_copy), &(maria_table[idxP]), sizeof(s_maria_table_record_copy));
	p= &s_maria_table_record_copy;
#else
	p=(MARIA_TABLE_RECORD *) maria_table;
 8005cfc:	4b3a      	ldr	r3, [pc, #232]	@ (8005de8 <executeArgv+0xfc>)
 8005cfe:	617b      	str	r3, [r7, #20]
#endif

	if(pCmd->argc <= 0) return;
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	dd69      	ble.n	8005dde <executeArgv+0xf2>

	if(MARIA_ADD_CR) ARD_sprintf(errmsg,"\n\rUnknown_symbol(\"%s\");\n\r", pCmd->argv[0]);
 8005d0a:	4b38      	ldr	r3, [pc, #224]	@ (8005dec <executeArgv+0x100>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d008      	beq.n	8005d24 <executeArgv+0x38>
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d18:	461a      	mov	r2, r3
 8005d1a:	4935      	ldr	r1, [pc, #212]	@ (8005df0 <executeArgv+0x104>)
 8005d1c:	4835      	ldr	r0, [pc, #212]	@ (8005df4 <executeArgv+0x108>)
 8005d1e:	f000 fe9b 	bl	8006a58 <siprintf>
 8005d22:	e049      	b.n	8005db8 <executeArgv+0xcc>
	else ARD_sprintf(errmsg,"\nUnknown_symbol(\"%s\");\n", pCmd->argv[0]);
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	4932      	ldr	r1, [pc, #200]	@ (8005df8 <executeArgv+0x10c>)
 8005d2e:	4831      	ldr	r0, [pc, #196]	@ (8005df4 <executeArgv+0x108>)
 8005d30:	f000 fe92 	bl	8006a58 <siprintf>
	while(p->symaddr)
 8005d34:	e040      	b.n	8005db8 <executeArgv+0xcc>
	{
		if(!ARD_strcmp(p->symbol,pCmd->argv[0]))
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4610      	mov	r0, r2
 8005d42:	f7fa fa45 	bl	80001d0 <strcmp>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d132      	bne.n	8005db2 <executeArgv+0xc6>
					break;
				}
			}
#endif

			if(p->symtype == MARIA_SYMTYPE_FUNCTION)
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d106      	bne.n	8005d62 <executeArgv+0x76>
			{
				retval = maria_callApi((MARIA_API_POINTER)(p->symaddr),pCmd);
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d58:	68b9      	ldr	r1, [r7, #8]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff fa68 	bl	8005230 <maria_callApi>
 8005d60:	6138      	str	r0, [r7, #16]
			}
			if(p->symtype == MARIA_SYMTYPE_DATA)
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d106      	bne.n	8005d78 <executeArgv+0x8c>
			{
				retval = maria_handleVar(p->symaddr,pCmd);
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6e:	68b9      	ldr	r1, [r7, #8]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 f8bb 	bl	8005eec <maria_handleVar>
 8005d76:	6138      	str	r0, [r7, #16]
			}
#if defined(MARIA_ANS)
			ANS = retval;
#endif

			if((user_data->mariaFlags & MARIA_FLAGS_NORETVAL) == 0)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	899b      	ldrh	r3, [r3, #12]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d111      	bne.n	8005daa <executeArgv+0xbe>
#if defined (__GNUC__)
	#if defined (MARIA_HEXONLY_RETVAL_FORMAT)
				if(MARIA_ADD_CR) ARD_sprintf(errmsg,"\r\n0x%08X\r\n",retval);
				else sprintf(errmsg,"\n0x%08X\n",retval);
	#else
				if(MARIA_ADD_CR) ARD_sprintf(errmsg,"\r\nretval %d (0x%X);\r\n",retval,retval);
 8005d86:	4b19      	ldr	r3, [pc, #100]	@ (8005dec <executeArgv+0x100>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d006      	beq.n	8005d9c <executeArgv+0xb0>
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	491a      	ldr	r1, [pc, #104]	@ (8005dfc <executeArgv+0x110>)
 8005d94:	4817      	ldr	r0, [pc, #92]	@ (8005df4 <executeArgv+0x108>)
 8005d96:	f000 fe5f 	bl	8006a58 <siprintf>
			else
			{
				// MARIA_FLAGS_NORETVAL is active
				errmsg[0] = 0;
 			}
			break; // symbol is found in table
 8005d9a:	e011      	b.n	8005dc0 <executeArgv+0xd4>
				else ARD_sprintf(errmsg,"\nretval %d (0x%X);\n",retval,retval);
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	4917      	ldr	r1, [pc, #92]	@ (8005e00 <executeArgv+0x114>)
 8005da2:	4814      	ldr	r0, [pc, #80]	@ (8005df4 <executeArgv+0x108>)
 8005da4:	f000 fe58 	bl	8006a58 <siprintf>
			break; // symbol is found in table
 8005da8:	e00a      	b.n	8005dc0 <executeArgv+0xd4>
				errmsg[0] = 0;
 8005daa:	4b12      	ldr	r3, [pc, #72]	@ (8005df4 <executeArgv+0x108>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	701a      	strb	r2, [r3, #0]
			break; // symbol is found in table
 8005db0:	e006      	b.n	8005dc0 <executeArgv+0xd4>
#ifdef MARIA_TABLE_ON_FLASH
		idxP++;
		memcpy_P(&s_maria_table_record_copy, &(maria_table[idxP]), sizeof(s_maria_table_record_copy));
		p = &s_maria_table_record_copy;
#else
		p++;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	3328      	adds	r3, #40	@ 0x28
 8005db6:	617b      	str	r3, [r7, #20]
	while(p->symaddr)
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1ba      	bne.n	8005d36 <executeArgv+0x4a>
#endif
	}

	retval = ARD_strlen(errmsg);
 8005dc0:	480c      	ldr	r0, [pc, #48]	@ (8005df4 <executeArgv+0x108>)
 8005dc2:	f7fa fa0f 	bl	80001e4 <strlen>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	613b      	str	r3, [r7, #16]
	if(retval > 0) maria_write(fd,errmsg,retval,(MARIA_USER_DATA *)user_data);
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	dd07      	ble.n	8005de0 <executeArgv+0xf4>
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4907      	ldr	r1, [pc, #28]	@ (8005df4 <executeArgv+0x108>)
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f7ff f9ac 	bl	8005134 <maria_write>
 8005ddc:	e000      	b.n	8005de0 <executeArgv+0xf4>
	if(pCmd->argc <= 0) return;
 8005dde:	bf00      	nop
}
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	2000000c 	.word	0x2000000c
 8005dec:	20000bdc 	.word	0x20000bdc
 8005df0:	08007564 	.word	0x08007564
 8005df4:	20000534 	.word	0x20000534
 8005df8:	08007580 	.word	0x08007580
 8005dfc:	08007598 	.word	0x08007598
 8005e00:	080075b0 	.word	0x080075b0

08005e04 <findSymbolExact>:

static int findSymbolExact(char * name)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
	int idx=0;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	60fb      	str	r3, [r7, #12]

		idx++;
		memcpy_P(&s_maria_table_record_copy, &(maria_table[idx]), sizeof(s_maria_table_record_copy));
	}
#else
	while(maria_table[idx].symaddr)
 8005e10:	e012      	b.n	8005e38 <findSymbolExact+0x34>
	{
		if(!ARD_strcmp(name,maria_table[idx].symbol))
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	4613      	mov	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	4a0f      	ldr	r2, [pc, #60]	@ (8005e5c <findSymbolExact+0x58>)
 8005e1e:	4413      	add	r3, r2
 8005e20:	4619      	mov	r1, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7fa f9d4 	bl	80001d0 <strcmp>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <findSymbolExact+0x2e>
		{
			return idx;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	e00f      	b.n	8005e52 <findSymbolExact+0x4e>
		}

		idx++;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3301      	adds	r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]
	while(maria_table[idx].symaddr)
 8005e38:	4908      	ldr	r1, [pc, #32]	@ (8005e5c <findSymbolExact+0x58>)
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	440b      	add	r3, r1
 8005e46:	3324      	adds	r3, #36	@ 0x24
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1e1      	bne.n	8005e12 <findSymbolExact+0xe>
	}
#endif
	return -1;
 8005e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	2000000c 	.word	0x2000000c

08005e60 <maria_prompt>:

void maria_prompt(int *pfd_r, int *pfd_w, MARIA_USER_DATA *user_data)
{
 8005e60:	b590      	push	{r4, r7, lr}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
	char add_cr[2] = {'\r',0};
 8005e6c:	230d      	movs	r3, #13
 8005e6e:	82bb      	strh	r3, [r7, #20]

	if(user_data->mariaFlags & MARIA_FLAGS_NOPROMPT) return;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	899b      	ldrh	r3, [r3, #12]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d12d      	bne.n	8005eda <maria_prompt+0x7a>

	if(MARIA_ADD_CR)
 8005e7e:	4b19      	ldr	r3, [pc, #100]	@ (8005ee4 <maria_prompt+0x84>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00d      	beq.n	8005ea2 <maria_prompt+0x42>
	{
		maria_write(*pfd_w,(void *)add_cr,ARD_strlen(add_cr),user_data);
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	681c      	ldr	r4, [r3, #0]
 8005e8a:	f107 0314 	add.w	r3, r7, #20
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fa f9a8 	bl	80001e4 <strlen>
 8005e94:	4602      	mov	r2, r0
 8005e96:	f107 0114 	add.w	r1, r7, #20
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f7ff f949 	bl	8005134 <maria_write>
	}
	add_cr[0]='\n';
 8005ea2:	230a      	movs	r3, #10
 8005ea4:	753b      	strb	r3, [r7, #20]
	maria_write(*pfd_w,(void *)add_cr,ARD_strlen(add_cr),user_data);
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	681c      	ldr	r4, [r3, #0]
 8005eaa:	f107 0314 	add.w	r3, r7, #20
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fa f998 	bl	80001e4 <strlen>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	f107 0114 	add.w	r1, r7, #20
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f7ff f939 	bl	8005134 <maria_write>
	maria_write(*pfd_w,(void *)prompt,ARD_strlen(prompt),user_data);
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	681c      	ldr	r4, [r3, #0]
 8005ec6:	4808      	ldr	r0, [pc, #32]	@ (8005ee8 <maria_prompt+0x88>)
 8005ec8:	f7fa f98c 	bl	80001e4 <strlen>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4905      	ldr	r1, [pc, #20]	@ (8005ee8 <maria_prompt+0x88>)
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f7ff f92e 	bl	8005134 <maria_write>
 8005ed8:	e000      	b.n	8005edc <maria_prompt+0x7c>
	if(user_data->mariaFlags & MARIA_FLAGS_NOPROMPT) return;
 8005eda:	bf00      	nop

#if defined (MARIA_TX_K)
	add_cr[0]=MARIA_TX_K;
	maria_write(*pfd_w,(void *)add_cr, 1,user_data);
#endif
}
 8005edc:	371c      	adds	r7, #28
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd90      	pop	{r4, r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20000bdc 	.word	0x20000bdc
 8005ee8:	20000578 	.word	0x20000578

08005eec <maria_handleVar>:
	prompt[7] = 0;
}
#endif

static int maria_handleVar(GENPTR pvar,MARIA_PARSED_LINE *pArgv)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
	int retval=0;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	60fb      	str	r3, [r7, #12]

	switch(pArgv->argc)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d027      	beq.n	8005f54 <maria_handleVar+0x68>
	case 2:
	default:
		/* assignements */
		/* example: var=0x100 */
		/* example: var = 0x100 */
		switch(pArgv->type[1])
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	2b03      	cmp	r3, #3
 8005f0e:	d80b      	bhi.n	8005f28 <maria_handleVar+0x3c>
 8005f10:	a201      	add	r2, pc, #4	@ (adr r2, 8005f18 <maria_handleVar+0x2c>)
 8005f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f16:	bf00      	nop
 8005f18:	08005f51 	.word	0x08005f51
 8005f1c:	08005f35 	.word	0x08005f35
 8005f20:	08005f43 	.word	0x08005f43
 8005f24:	08005f51 	.word	0x08005f51
		{
		default:
		case MARIA_TYPE_INT:
			*((int *)pvar) = pArgv->lValue[1];
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	601a      	str	r2, [r3, #0]
			break;
 8005f32:	e00e      	b.n	8005f52 <maria_handleVar+0x66>
		case MARIA_TYPE_CHAR:
			*((char *)pvar) = pArgv->lValue[1];
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	701a      	strb	r2, [r3, #0]
			break;
 8005f40:	e007      	b.n	8005f52 <maria_handleVar+0x66>
		case MARIA_TYPE_SHORT:
			*((short *)pvar) = pArgv->lValue[1];
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f48:	b21a      	sxth	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	801a      	strh	r2, [r3, #0]
			break;
 8005f4e:	e000      	b.n	8005f52 <maria_handleVar+0x66>
		case MARIA_TYPE_SYMBOL:
		case MARIA_TYPE_STRING:
			break;
 8005f50:	bf00      	nop
		}
		break;
 8005f52:	e000      	b.n	8005f56 <maria_handleVar+0x6a>
		break;
 8005f54:	bf00      	nop
	}

	switch(pArgv->type[1])
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	f893 30c5 	ldrb.w	r3, [r3, #197]	@ 0xc5
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d80a      	bhi.n	8005f78 <maria_handleVar+0x8c>
 8005f62:	a201      	add	r2, pc, #4	@ (adr r2, 8005f68 <maria_handleVar+0x7c>)
 8005f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f68:	08005f93 	.word	0x08005f93
 8005f6c:	08005f81 	.word	0x08005f81
 8005f70:	08005f89 	.word	0x08005f89
 8005f74:	08005f93 	.word	0x08005f93
	{
	default:
	case MARIA_TYPE_INT:
		retval = *((int *)pvar);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	60fb      	str	r3, [r7, #12]
		break;
 8005f7e:	e009      	b.n	8005f94 <maria_handleVar+0xa8>
	case MARIA_TYPE_CHAR:
		retval = *((char *)pvar);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	60fb      	str	r3, [r7, #12]
		break;
 8005f86:	e005      	b.n	8005f94 <maria_handleVar+0xa8>
	case MARIA_TYPE_SHORT:
		retval = *((short *)pvar);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f8e:	60fb      	str	r3, [r7, #12]
		break;
 8005f90:	e000      	b.n	8005f94 <maria_handleVar+0xa8>
	case MARIA_TYPE_SYMBOL:
	case MARIA_TYPE_STRING:
		break;
 8005f92:	bf00      	nop
	}
	return retval;
 8005f94:	68fb      	ldr	r3, [r7, #12]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop

08005fa4 <ISPRINT>:
	SREC_LEN_ERR		,
	SREC_WRONG_SREC_ERR	,
} SREC_ERR;

static int ISPRINT(int c)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
	if(c<' ') return 0;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b1f      	cmp	r3, #31
 8005fb0:	dc01      	bgt.n	8005fb6 <ISPRINT+0x12>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e005      	b.n	8005fc2 <ISPRINT+0x1e>
	if(c>'~') return 0;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b7e      	cmp	r3, #126	@ 0x7e
 8005fba:	dd01      	ble.n	8005fc0 <ISPRINT+0x1c>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	e000      	b.n	8005fc2 <ISPRINT+0x1e>
	return 1;
 8005fc0:	2301      	movs	r3, #1
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <hexnibble2bin>:

static int hexnibble2bin(char c)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b083      	sub	sp, #12
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	71fb      	strb	r3, [r7, #7]
	if(c>'f') return 0;
 8005fd8:	79fb      	ldrb	r3, [r7, #7]
 8005fda:	2b66      	cmp	r3, #102	@ 0x66
 8005fdc:	d901      	bls.n	8005fe2 <hexnibble2bin+0x14>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e012      	b.n	8006008 <hexnibble2bin+0x3a>
	if(c>='a') return (c-'a'+10);
 8005fe2:	79fb      	ldrb	r3, [r7, #7]
 8005fe4:	2b60      	cmp	r3, #96	@ 0x60
 8005fe6:	d902      	bls.n	8005fee <hexnibble2bin+0x20>
 8005fe8:	79fb      	ldrb	r3, [r7, #7]
 8005fea:	3b57      	subs	r3, #87	@ 0x57
 8005fec:	e00c      	b.n	8006008 <hexnibble2bin+0x3a>
	if(c>='A') return (c-'A'+10);
 8005fee:	79fb      	ldrb	r3, [r7, #7]
 8005ff0:	2b40      	cmp	r3, #64	@ 0x40
 8005ff2:	d902      	bls.n	8005ffa <hexnibble2bin+0x2c>
 8005ff4:	79fb      	ldrb	r3, [r7, #7]
 8005ff6:	3b37      	subs	r3, #55	@ 0x37
 8005ff8:	e006      	b.n	8006008 <hexnibble2bin+0x3a>
	if(c>='0') return (c-'0');
 8005ffa:	79fb      	ldrb	r3, [r7, #7]
 8005ffc:	2b2f      	cmp	r3, #47	@ 0x2f
 8005ffe:	d902      	bls.n	8006006 <hexnibble2bin+0x38>
 8006000:	79fb      	ldrb	r3, [r7, #7]
 8006002:	3b30      	subs	r3, #48	@ 0x30
 8006004:	e000      	b.n	8006008 <hexnibble2bin+0x3a>
	return 0;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <hexbyte2bin>:

static int hexbyte2bin(char *s)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
	volatile int v;

	v=hexnibble2bin(s[0]);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	4618      	mov	r0, r3
 8006022:	f7ff ffd4 	bl	8005fce <hexnibble2bin>
 8006026:	4603      	mov	r3, r0
 8006028:	60fb      	str	r3, [r7, #12]
	v<<=4;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	60fb      	str	r3, [r7, #12]
	v|=hexnibble2bin(s[1]);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3301      	adds	r3, #1
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	4618      	mov	r0, r3
 8006038:	f7ff ffc9 	bl	8005fce <hexnibble2bin>
 800603c:	4602      	mov	r2, r0
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
	return v;
 8006044:	68fb      	ldr	r3, [r7, #12]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <srecStore>:

int srecStore(char *s, unsigned long forced_address, SRECINFO *pSrecInfo )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08e      	sub	sp, #56	@ 0x38
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
	int           slen, i;
	char          *p=NULL;
 800605c:	2300      	movs	r3, #0
 800605e:	633b      	str	r3, [r7, #48]	@ 0x30
	unsigned char *pDat=NULL;
 8006060:	2300      	movs	r3, #0
 8006062:	62fb      	str	r3, [r7, #44]	@ 0x2c
	unsigned int  chk = 0;
 8006064:	2300      	movs	r3, #0
 8006066:	62bb      	str	r3, [r7, #40]	@ 0x28

	int            type;
	unsigned long  address;
	int            len;

	slen = ARD_strlen(s);
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f7fa f8bb 	bl	80001e4 <strlen>
 800606e:	4603      	mov	r3, r0
 8006070:	61fb      	str	r3, [r7, #28]

	p=s;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	633b      	str	r3, [r7, #48]	@ 0x30
	if((*p)!=START_CODE) {
 8006076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	2b53      	cmp	r3, #83	@ 0x53
 800607c:	d004      	beq.n	8006088 <srecStore+0x38>
		maria_printf_0("srecParse SREC_WRONG_SREC_ERR\n");
 800607e:	487a      	ldr	r0, [pc, #488]	@ (8006268 <srecStore+0x218>)
 8006080:	f7ff faaa 	bl	80055d8 <maria_printf>
		return SREC_WRONG_SREC_ERR;
 8006084:	2303      	movs	r3, #3
 8006086:	e0eb      	b.n	8006260 <srecStore+0x210>
	}

	p++;
 8006088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608a:	3301      	adds	r3, #1
 800608c:	633b      	str	r3, [r7, #48]	@ 0x30

	type=hexnibble2bin(*p);
 800608e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff ff9b 	bl	8005fce <hexnibble2bin>
 8006098:	61b8      	str	r0, [r7, #24]
	p++;
 800609a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609c:	3301      	adds	r3, #1
 800609e:	633b      	str	r3, [r7, #48]	@ 0x30

	len = hexbyte2bin(p);
 80060a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060a2:	f7ff ffb7 	bl	8006014 <hexbyte2bin>
 80060a6:	6238      	str	r0, [r7, #32]
	chk += len;
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060ac:	4413      	add	r3, r2
 80060ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	p+=2;
 80060b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b2:	3302      	adds	r3, #2
 80060b4:	633b      	str	r3, [r7, #48]	@ 0x30

	if(slen != (2 * len + 4)) {
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	3302      	adds	r3, #2
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d004      	beq.n	80060cc <srecStore+0x7c>
		maria_printf_0("srecParse SREC_LEN_ERR\n");
 80060c2:	486a      	ldr	r0, [pc, #424]	@ (800626c <srecStore+0x21c>)
 80060c4:	f7ff fa88 	bl	80055d8 <maria_printf>
		return SREC_LEN_ERR;
 80060c8:	2302      	movs	r3, #2
 80060ca:	e0c9      	b.n	8006260 <srecStore+0x210>
	}

	if(pSrecInfo != NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <srecStore+0x88>
	{
		pSrecInfo->dataSize = len;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a3a      	ldr	r2, [r7, #32]
 80060d6:	605a      	str	r2, [r3, #4]
	}

	address = 0;
 80060d8:	2300      	movs	r3, #0
 80060da:	627b      	str	r3, [r7, #36]	@ 0x24
	switch(type) {
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	2b09      	cmp	r3, #9
 80060e0:	bf8c      	ite	hi
 80060e2:	2201      	movhi	r2, #1
 80060e4:	2200      	movls	r2, #0
 80060e6:	b2d2      	uxtb	r2, r2
 80060e8:	2a00      	cmp	r2, #0
 80060ea:	d178      	bne.n	80061de <srecStore+0x18e>
 80060ec:	2201      	movs	r2, #1
 80060ee:	fa02 f303 	lsl.w	r3, r2, r3
 80060f2:	f240 2223 	movw	r2, #547	@ 0x223
 80060f6:	401a      	ands	r2, r3
 80060f8:	2a00      	cmp	r2, #0
 80060fa:	bf14      	ite	ne
 80060fc:	2201      	movne	r2, #1
 80060fe:	2200      	moveq	r2, #0
 8006100:	b2d2      	uxtb	r2, r2
 8006102:	2a00      	cmp	r2, #0
 8006104:	d13d      	bne.n	8006182 <srecStore+0x132>
 8006106:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800610a:	2a00      	cmp	r2, #0
 800610c:	bf14      	ite	ne
 800610e:	2201      	movne	r2, #1
 8006110:	2200      	moveq	r2, #0
 8006112:	b2d2      	uxtb	r2, r2
 8006114:	2a00      	cmp	r2, #0
 8006116:	d11e      	bne.n	8006156 <srecStore+0x106>
 8006118:	f003 0388 	and.w	r3, r3, #136	@ 0x88
 800611c:	2b00      	cmp	r3, #0
 800611e:	bf14      	ite	ne
 8006120:	2301      	movne	r3, #1
 8006122:	2300      	moveq	r3, #0
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d059      	beq.n	80061de <srecStore+0x18e>
		case 3: /* data sequence */
		case 7: /* end of block */
			b = hexbyte2bin(p);
 800612a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800612c:	f7ff ff72 	bl	8006014 <hexbyte2bin>
 8006130:	4603      	mov	r3, r0
 8006132:	617b      	str	r3, [r7, #20]
			address |= b; chk += b; p += 2;
 8006134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	4313      	orrs	r3, r2
 800613a:	627b      	str	r3, [r7, #36]	@ 0x24
 800613c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	4413      	add	r3, r2
 8006142:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006146:	3302      	adds	r3, #2
 8006148:	633b      	str	r3, [r7, #48]	@ 0x30
			address <<= 8;
 800614a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614c:	021b      	lsls	r3, r3, #8
 800614e:	627b      	str	r3, [r7, #36]	@ 0x24
			len --;
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	3b01      	subs	r3, #1
 8006154:	623b      	str	r3, [r7, #32]
			/* no break here !!!! */
		case 2: /* data sequence */
		case 8: /* end of block */
			b = hexbyte2bin(p);
 8006156:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006158:	f7ff ff5c 	bl	8006014 <hexbyte2bin>
 800615c:	4603      	mov	r3, r0
 800615e:	617b      	str	r3, [r7, #20]
			address |= b; chk += b; p += 2;
 8006160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	4313      	orrs	r3, r2
 8006166:	627b      	str	r3, [r7, #36]	@ 0x24
 8006168:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	4413      	add	r3, r2
 800616e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006172:	3302      	adds	r3, #2
 8006174:	633b      	str	r3, [r7, #48]	@ 0x30
			address <<= 8;
 8006176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006178:	021b      	lsls	r3, r3, #8
 800617a:	627b      	str	r3, [r7, #36]	@ 0x24
			len --;
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	3b01      	subs	r3, #1
 8006180:	623b      	str	r3, [r7, #32]
			/* no break here !!!! */
		case 0: /* header */
		case 1: /* data sequence */
		case 5: /* record count */
		case 9: /* end of block */
			b = hexbyte2bin(p);
 8006182:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006184:	f7ff ff46 	bl	8006014 <hexbyte2bin>
 8006188:	4603      	mov	r3, r0
 800618a:	617b      	str	r3, [r7, #20]
			address |= b; chk += b; p += 2;
 800618c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	4313      	orrs	r3, r2
 8006192:	627b      	str	r3, [r7, #36]	@ 0x24
 8006194:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	4413      	add	r3, r2
 800619a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	3302      	adds	r3, #2
 80061a0:	633b      	str	r3, [r7, #48]	@ 0x30
			address <<= 8;
 80061a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a4:	021b      	lsls	r3, r3, #8
 80061a6:	627b      	str	r3, [r7, #36]	@ 0x24
			len --;
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	623b      	str	r3, [r7, #32]
			b = hexbyte2bin(p);
 80061ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061b0:	f7ff ff30 	bl	8006014 <hexbyte2bin>
 80061b4:	4603      	mov	r3, r0
 80061b6:	617b      	str	r3, [r7, #20]
			address |= b; chk += b; p += 2;
 80061b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	4313      	orrs	r3, r2
 80061be:	627b      	str	r3, [r7, #36]	@ 0x24
 80061c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	4413      	add	r3, r2
 80061c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ca:	3302      	adds	r3, #2
 80061cc:	633b      	str	r3, [r7, #48]	@ 0x30
			len --;
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	3b01      	subs	r3, #1
 80061d2:	623b      	str	r3, [r7, #32]
		break;
 80061d4:	bf00      	nop
			maria_printf_0("srecParse SREC_WRONG_SREC_ERR\n");
			return SREC_WRONG_SREC_ERR;
		break;
	}

	if(pSrecInfo != NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d008      	beq.n	80061ee <srecStore+0x19e>
 80061dc:	e004      	b.n	80061e8 <srecStore+0x198>
			maria_printf_0("srecParse SREC_WRONG_SREC_ERR\n");
 80061de:	4822      	ldr	r0, [pc, #136]	@ (8006268 <srecStore+0x218>)
 80061e0:	f7ff f9fa 	bl	80055d8 <maria_printf>
			return SREC_WRONG_SREC_ERR;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e03b      	b.n	8006260 <srecStore+0x210>
	{
		pSrecInfo->address = address;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ec:	601a      	str	r2, [r3, #0]
		address &= 0xFFFFFFFFULL;
		address |= (forced_address & 0xFFFFFFFF00000000ULL);
		pDat = (unsigned char *)(address);
	}
#else
	if(forced_address)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <srecStore+0x1aa>
		pDat = (unsigned char *)(forced_address);
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061f8:	e001      	b.n	80061fe <srecStore+0x1ae>
	else
		pDat = (unsigned char *)(address);
 80061fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

	for(i=0; i < ( len - 1 ); i++) {
 80061fe:	2300      	movs	r3, #0
 8006200:	637b      	str	r3, [r7, #52]	@ 0x34
 8006202:	e014      	b.n	800622e <srecStore+0x1de>
		b = hexbyte2bin(p);
 8006204:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006206:	f7ff ff05 	bl	8006014 <hexbyte2bin>
 800620a:	4603      	mov	r3, r0
 800620c:	617b      	str	r3, [r7, #20]
		pDat[i] = b;
 800620e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006210:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006212:	4413      	add	r3, r2
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	701a      	strb	r2, [r3, #0]
		chk += b;
 800621a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	4413      	add	r3, r2
 8006220:	62bb      	str	r3, [r7, #40]	@ 0x28
		p += 2;
 8006222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006224:	3302      	adds	r3, #2
 8006226:	633b      	str	r3, [r7, #48]	@ 0x30
	for(i=0; i < ( len - 1 ); i++) {
 8006228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800622a:	3301      	adds	r3, #1
 800622c:	637b      	str	r3, [r7, #52]	@ 0x34
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	3b01      	subs	r3, #1
 8006232:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006234:	429a      	cmp	r2, r3
 8006236:	dbe5      	blt.n	8006204 <srecStore+0x1b4>
	}

	len --;
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	3b01      	subs	r3, #1
 800623c:	623b      	str	r3, [r7, #32]
	b = hexbyte2bin(p);
 800623e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006240:	f7ff fee8 	bl	8006014 <hexbyte2bin>
 8006244:	4603      	mov	r3, r0
 8006246:	617b      	str	r3, [r7, #20]
	chk += b;
 8006248:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	4413      	add	r3, r2
 800624e:	62bb      	str	r3, [r7, #40]	@ 0x28

	if((chk & 0xFF) != 0xFF) {
 8006250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2bff      	cmp	r3, #255	@ 0xff
 8006256:	d002      	beq.n	800625e <srecStore+0x20e>
		maria_printf_1("srecParse SREC_SREC_CHK_ERR: ignored\n");
 8006258:	4805      	ldr	r0, [pc, #20]	@ (8006270 <srecStore+0x220>)
 800625a:	f7ff f9bd 	bl	80055d8 <maria_printf>
	}

	return SREC_NO_ERR;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3738      	adds	r7, #56	@ 0x38
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	080075c4 	.word	0x080075c4
 800626c:	080075e4 	.word	0x080075e4
 8006270:	080075fc 	.word	0x080075fc

08006274 <dump>:

#if !defined TARGET_ARCH_HC08
int dump(unsigned long address, int size, int memory_space)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08e      	sub	sp, #56	@ 0x38
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
	unsigned char *p;
	unsigned char pval;
	int i, x = 0;
 8006280:	2300      	movs	r3, #0
 8006282:	62bb      	str	r3, [r7, #40]	@ 0x28

#if !defined(NO_MARIA_INFO)
	info1(Maria,"address=0x%X size=%d",address,size);
#endif

	if(size==0) size=16*10;
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <dump+0x1a>
 800628a:	23a0      	movs	r3, #160	@ 0xa0
 800628c:	60bb      	str	r3, [r7, #8]

	/* ensure address is multiple of 4 */
	p=(unsigned char *)(address & (~(0x3)));
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f023 0303 	bic.w	r3, r3, #3
 8006294:	637b      	str	r3, [r7, #52]	@ 0x34

	maria_printf_0("\n");
 8006296:	4840      	ldr	r0, [pc, #256]	@ (8006398 <dump+0x124>)
 8006298:	f7ff f99e 	bl	80055d8 <maria_printf>

	for(i=0;i<size;i++)
 800629c:	2300      	movs	r3, #0
 800629e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062a0:	e070      	b.n	8006384 <dump+0x110>
	{
		switch(memory_space)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d104      	bne.n	80062b2 <dump+0x3e>
		{
		case MEMSPACE_FLASH:
#if defined TARGET_ARCH_AVR
			pval = pgm_read_byte_near((unsigned int)p);
#else
			pval = *p;
 80062a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
#endif
			break;
 80062b0:	e004      	b.n	80062bc <dump+0x48>
		default:
		case MEMSPACE_RAM:
			pval = *p;
 80062b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			break;
 80062ba:	bf00      	nop
		}

		if(!(i%16))
 80062bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062be:	f003 030f 	and.w	r3, r3, #15
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d105      	bne.n	80062d2 <dump+0x5e>
		{
			maria_printf_1("0x%04X:  ",p);
 80062c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80062c8:	4834      	ldr	r0, [pc, #208]	@ (800639c <dump+0x128>)
 80062ca:	f7ff f985 	bl	80055d8 <maria_printf>
			x=0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		if(p < (unsigned char *)address)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d203      	bcs.n	80062e2 <dump+0x6e>
		{
			/* skip filler bytes */
			maria_printf_0("  ");
 80062da:	4831      	ldr	r0, [pc, #196]	@ (80063a0 <dump+0x12c>)
 80062dc:	f7ff f97c 	bl	80055d8 <maria_printf>
 80062e0:	e005      	b.n	80062ee <dump+0x7a>
		}
		else
		{
			maria_printf_1("%02x",pval);
 80062e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80062e6:	4619      	mov	r1, r3
 80062e8:	482e      	ldr	r0, [pc, #184]	@ (80063a4 <dump+0x130>)
 80062ea:	f7ff f975 	bl	80055d8 <maria_printf>
		}

		if(ISPRINT(pval))
 80062ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff fe56 	bl	8005fa4 <ISPRINT>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d007      	beq.n	800630e <dump+0x9a>
		{
			sCharDump[x]=pval;
 80062fe:	f107 0214 	add.w	r2, r7, #20
 8006302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006304:	4413      	add	r3, r2
 8006306:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800630a:	701a      	strb	r2, [r3, #0]
 800630c:	e005      	b.n	800631a <dump+0xa6>
		}
		else
		{
			sCharDump[x]='.';
 800630e:	f107 0214 	add.w	r2, r7, #20
 8006312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006314:	4413      	add	r3, r2
 8006316:	222e      	movs	r2, #46	@ 0x2e
 8006318:	701a      	strb	r2, [r3, #0]
		}
		sCharDump[x+1]=0;
 800631a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631c:	3301      	adds	r3, #1
 800631e:	3338      	adds	r3, #56	@ 0x38
 8006320:	443b      	add	r3, r7
 8006322:	2200      	movs	r2, #0
 8006324:	f803 2c24 	strb.w	r2, [r3, #-36]
		x++;
 8006328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632a:	3301      	adds	r3, #1
 800632c:	62bb      	str	r3, [r7, #40]	@ 0x28

		if((i%2)==1)
 800632e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006330:	2b00      	cmp	r3, #0
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	bfb8      	it	lt
 8006338:	425b      	neglt	r3, r3
 800633a:	2b01      	cmp	r3, #1
 800633c:	d102      	bne.n	8006344 <dump+0xd0>
		{
			maria_printf_0(" ");
 800633e:	481a      	ldr	r0, [pc, #104]	@ (80063a8 <dump+0x134>)
 8006340:	f7ff f94a 	bl	80055d8 <maria_printf>
		}

		if(((i%16)==15)||(i==(size-1)))
 8006344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006346:	425a      	negs	r2, r3
 8006348:	f003 030f 	and.w	r3, r3, #15
 800634c:	f002 020f 	and.w	r2, r2, #15
 8006350:	bf58      	it	pl
 8006352:	4253      	negpl	r3, r2
 8006354:	2b0f      	cmp	r3, #15
 8006356:	d004      	beq.n	8006362 <dump+0xee>
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	3b01      	subs	r3, #1
 800635c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800635e:	429a      	cmp	r2, r3
 8006360:	d10a      	bne.n	8006378 <dump+0x104>
		{
			maria_printf_0(" * ");
 8006362:	4812      	ldr	r0, [pc, #72]	@ (80063ac <dump+0x138>)
 8006364:	f7ff f938 	bl	80055d8 <maria_printf>
			maria_printf_0(sCharDump);
 8006368:	f107 0314 	add.w	r3, r7, #20
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff f933 	bl	80055d8 <maria_printf>
			maria_printf_0("\n");
 8006372:	4809      	ldr	r0, [pc, #36]	@ (8006398 <dump+0x124>)
 8006374:	f7ff f930 	bl	80055d8 <maria_printf>
		}

		p++;
 8006378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800637a:	3301      	adds	r3, #1
 800637c:	637b      	str	r3, [r7, #52]	@ 0x34
	for(i=0;i<size;i++)
 800637e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006380:	3301      	adds	r3, #1
 8006382:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006384:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	429a      	cmp	r2, r3
 800638a:	db8a      	blt.n	80062a2 <dump+0x2e>
	}
	return 0;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3738      	adds	r7, #56	@ 0x38
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	08007624 	.word	0x08007624
 800639c:	08007628 	.word	0x08007628
 80063a0:	08007634 	.word	0x08007634
 80063a4:	08007638 	.word	0x08007638
 80063a8:	08007640 	.word	0x08007640
 80063ac:	08007644 	.word	0x08007644

080063b0 <dumpulong>:


#if !defined TARGET_ARCH_HC08

int dumpulong(unsigned long address, int size, int memory_space)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
	int            i;
	unsigned long  *p;
	unsigned long  pval;

	if(size==0) size = 16;
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <dumpulong+0x16>
 80063c2:	2310      	movs	r3, #16
 80063c4:	60bb      	str	r3, [r7, #8]
	/* ensure address is multiple of 4 */
	p=(unsigned long *)(address & (~(0x3)));
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f023 0303 	bic.w	r3, r3, #3
 80063cc:	61bb      	str	r3, [r7, #24]

	maria_printf_0("\n");
 80063ce:	4812      	ldr	r0, [pc, #72]	@ (8006418 <dumpulong+0x68>)
 80063d0:	f7ff f902 	bl	80055d8 <maria_printf>

	for(i=0;i<size;i++)
 80063d4:	2300      	movs	r3, #0
 80063d6:	61fb      	str	r3, [r7, #28]
 80063d8:	e015      	b.n	8006406 <dumpulong+0x56>
	{
		switch(memory_space)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d103      	bne.n	80063e8 <dumpulong+0x38>
		case MEMSPACE_FLASH:
#if defined TARGET_ARCH_AVR
			maria_printf_0("utility is not available in this architecture\n");
			return 0;
#else
			pval = *p;
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	617b      	str	r3, [r7, #20]
#endif
			break;
 80063e6:	e003      	b.n	80063f0 <dumpulong+0x40>
		default:
		case MEMSPACE_RAM:
			pval = *p;
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	617b      	str	r3, [r7, #20]
			break;
 80063ee:	bf00      	nop
		}

		maria_printf_1("0x%04X:  0x%08X\n", p, pval);
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	69b9      	ldr	r1, [r7, #24]
 80063f4:	4809      	ldr	r0, [pc, #36]	@ (800641c <dumpulong+0x6c>)
 80063f6:	f7ff f8ef 	bl	80055d8 <maria_printf>
		p++;
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	3304      	adds	r3, #4
 80063fe:	61bb      	str	r3, [r7, #24]
	for(i=0;i<size;i++)
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	3301      	adds	r3, #1
 8006404:	61fb      	str	r3, [r7, #28]
 8006406:	69fa      	ldr	r2, [r7, #28]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	429a      	cmp	r2, r3
 800640c:	dbe5      	blt.n	80063da <dumpulong+0x2a>
	}
	return 0;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3720      	adds	r7, #32
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	08007624 	.word	0x08007624
 800641c:	08007648 	.word	0x08007648

08006420 <dumplong>:
int dumplong(unsigned long address, int size, int memory_space)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b088      	sub	sp, #32
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
	int            		i;
	long int 			*p;
	long int 			pval;
	if(size==0) size = 16;
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <dumplong+0x16>
 8006432:	2310      	movs	r3, #16
 8006434:	60bb      	str	r3, [r7, #8]
	p=(long int *)(address & (~(0x3)));
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f023 0303 	bic.w	r3, r3, #3
 800643c:	61bb      	str	r3, [r7, #24]
	maria_printf_0("\n");
 800643e:	4812      	ldr	r0, [pc, #72]	@ (8006488 <dumplong+0x68>)
 8006440:	f7ff f8ca 	bl	80055d8 <maria_printf>
	for(i=0;i<size;i++)
 8006444:	2300      	movs	r3, #0
 8006446:	61fb      	str	r3, [r7, #28]
 8006448:	e015      	b.n	8006476 <dumplong+0x56>
	{
		switch(memory_space)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d103      	bne.n	8006458 <dumplong+0x38>
		case MEMSPACE_FLASH:
#if defined TARGET_ARCH_AVR
			maria_printf_0("utility is not available in this architecture\n");
			return 0;
#else
			pval = *p;
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	617b      	str	r3, [r7, #20]
#endif
			break;
 8006456:	e003      	b.n	8006460 <dumplong+0x40>
		default:
		case MEMSPACE_RAM:
			pval = *p;
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	617b      	str	r3, [r7, #20]
			break;
 800645e:	bf00      	nop
		}
		maria_printf_1("0x%04X:  %ld\n", p, pval);
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	69b9      	ldr	r1, [r7, #24]
 8006464:	4809      	ldr	r0, [pc, #36]	@ (800648c <dumplong+0x6c>)
 8006466:	f7ff f8b7 	bl	80055d8 <maria_printf>
		p++;
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	3304      	adds	r3, #4
 800646e:	61bb      	str	r3, [r7, #24]
	for(i=0;i<size;i++)
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	3301      	adds	r3, #1
 8006474:	61fb      	str	r3, [r7, #28]
 8006476:	69fa      	ldr	r2, [r7, #28]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	429a      	cmp	r2, r3
 800647c:	dbe5      	blt.n	800644a <dumplong+0x2a>
	}
	return 0;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3720      	adds	r7, #32
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	08007624 	.word	0x08007624
 800648c:	0800765c 	.word	0x0800765c

08006490 <memfillbyte>:
#endif

#if !defined TARGET_ARCH_HC08
int memfillbyte(unsigned char *p, int size, unsigned char v, int incr)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	603b      	str	r3, [r7, #0]
 800649c:	4613      	mov	r3, r2
 800649e:	71fb      	strb	r3, [r7, #7]
	int i;

	if(size == 0) size = 16;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <memfillbyte+0x1a>
 80064a6:	2310      	movs	r3, #16
 80064a8:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < size; i++)
 80064aa:	2300      	movs	r3, #0
 80064ac:	617b      	str	r3, [r7, #20]
 80064ae:	e00d      	b.n	80064cc <memfillbyte+0x3c>
	{
		*p = v;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	79fa      	ldrb	r2, [r7, #7]
 80064b4:	701a      	strb	r2, [r3, #0]
		p++;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3301      	adds	r3, #1
 80064ba:	60fb      	str	r3, [r7, #12]
		v += incr;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	79fb      	ldrb	r3, [r7, #7]
 80064c2:	4413      	add	r3, r2
 80064c4:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < size; i++)
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	3301      	adds	r3, #1
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	dbed      	blt.n	80064b0 <memfillbyte+0x20>
	}
	return size;
 80064d4:	68bb      	ldr	r3, [r7, #8]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	371c      	adds	r7, #28
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <memfillshort>:

int memfillshort(unsigned short *p, int size, unsigned short v, int incr)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b087      	sub	sp, #28
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	603b      	str	r3, [r7, #0]
 80064ee:	4613      	mov	r3, r2
 80064f0:	80fb      	strh	r3, [r7, #6]
	int i;

	if(size == 0) size = 16;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <memfillshort+0x1a>
 80064f8:	2310      	movs	r3, #16
 80064fa:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < size; i++)
 80064fc:	2300      	movs	r3, #0
 80064fe:	617b      	str	r3, [r7, #20]
 8006500:	e00d      	b.n	800651e <memfillshort+0x3c>
	{
		*p = v;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	88fa      	ldrh	r2, [r7, #6]
 8006506:	801a      	strh	r2, [r3, #0]
		p++;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3302      	adds	r3, #2
 800650c:	60fb      	str	r3, [r7, #12]
		v += incr;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	b29a      	uxth	r2, r3
 8006512:	88fb      	ldrh	r3, [r7, #6]
 8006514:	4413      	add	r3, r2
 8006516:	80fb      	strh	r3, [r7, #6]
	for (i = 0; i < size; i++)
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	3301      	adds	r3, #1
 800651c:	617b      	str	r3, [r7, #20]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	429a      	cmp	r2, r3
 8006524:	dbed      	blt.n	8006502 <memfillshort+0x20>
	}
	return size;
 8006526:	68bb      	ldr	r3, [r7, #8]
}
 8006528:	4618      	mov	r0, r3
 800652a:	371c      	adds	r7, #28
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <memfilllong>:

int memfilllong(unsigned long *p, int size, unsigned long v, int incr)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	603b      	str	r3, [r7, #0]
	int i;

	if(size == 0) size = 16;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <memfilllong+0x18>
 8006548:	2310      	movs	r3, #16
 800654a:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < size; i++)
 800654c:	2300      	movs	r3, #0
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	e00c      	b.n	800656c <memfilllong+0x38>
	{
		*p = v;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	601a      	str	r2, [r3, #0]
		p++;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3304      	adds	r3, #4
 800655c:	60fb      	str	r3, [r7, #12]
		v += incr;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	4413      	add	r3, r2
 8006564:	607b      	str	r3, [r7, #4]
	for (i = 0; i < size; i++)
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	3301      	adds	r3, #1
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	429a      	cmp	r2, r3
 8006572:	dbee      	blt.n	8006552 <memfilllong+0x1e>
	}
	return size;
 8006574:	68bb      	ldr	r3, [r7, #8]
}
 8006576:	4618      	mov	r0, r3
 8006578:	371c      	adds	r7, #28
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <rem>:
	return 0;
}
#endif /* TARGET_ARCH_I386 || TARGET_ARCH_X64 */

int rem(void)
{
 8006582:	b480      	push	{r7}
 8006584:	af00      	add	r7, sp, #0
	return 0;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <retval>:

int retval(int i, int j)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	6039      	str	r1, [r7, #0]
	return 0;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <Unknown_symbol>:

int Unknown_symbol(void)
{
 80065aa:	b480      	push	{r7}
 80065ac:	af00      	add	r7, sp, #0
	return 0;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
	...

080065bc <showSym>:

int showSym(char *symbol)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
#if defined MARIA_TABLE_ON_FLASH
	uint16_t         idx = 0;
	memcpy_P(&s_maria_table_record_copy, &(maria_table[idx]), sizeof(s_maria_table_record_copy));
	pRecord = &(s_maria_table_record_copy);
#else
	pRecord = maria_table;
 80065c4:	4b18      	ldr	r3, [pc, #96]	@ (8006628 <showSym+0x6c>)
 80065c6:	617b      	str	r3, [r7, #20]
#endif


	while(pRecord->symaddr)
 80065c8:	e025      	b.n	8006616 <showSym+0x5a>
	{
		pTypeSym="";
 80065ca:	4b18      	ldr	r3, [pc, #96]	@ (800662c <showSym+0x70>)
 80065cc:	613b      	str	r3, [r7, #16]
		if(pRecord->symtype==MARIA_SYMTYPE_FUNCTION) pTypeSym="()";
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <showSym+0x1e>
 80065d6:	4b16      	ldr	r3, [pc, #88]	@ (8006630 <showSym+0x74>)
 80065d8:	613b      	str	r3, [r7, #16]

		if(symbol==NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d107      	bne.n	80065f0 <showSym+0x34>
		{
#if defined (__GNUC__)
			/* show every symbol */
			maria_printf_3("%p %s%s\n",pRecord->symaddr,pRecord->symbol,pTypeSym);
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	4812      	ldr	r0, [pc, #72]	@ (8006634 <showSym+0x78>)
 80065ea:	f7fe fff5 	bl	80055d8 <maria_printf>
 80065ee:	e00f      	b.n	8006610 <showSym+0x54>
#error "Unknown compiler"
#endif
		}
		else
		{
			p=ARD_strstr(pRecord->symbol,symbol);
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 fa91 	bl	8006b1c <strstr>
 80065fa:	60f8      	str	r0, [r7, #12]
			if(p!=NULL)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d006      	beq.n	8006610 <showSym+0x54>
			{
#if defined (__GNUC__)
				maria_printf_3("%p %s%s\n",pRecord->symaddr,pRecord->symbol,pTypeSym);
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	480a      	ldr	r0, [pc, #40]	@ (8006634 <showSym+0x78>)
 800660c:	f7fe ffe4 	bl	80055d8 <maria_printf>
#if defined MARIA_TABLE_ON_FLASH
		idx++;
		ARD_memcpy_P(&s_maria_table_record_copy, &(maria_table[idx]), sizeof(s_maria_table_record_copy));
		pRecord = &(s_maria_table_record_copy);
#else
		pRecord++;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	3328      	adds	r3, #40	@ 0x28
 8006614:	617b      	str	r3, [r7, #20]
	while(pRecord->symaddr)
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1d5      	bne.n	80065ca <showSym+0xe>
#endif
	}
	return 0;
 800661e:	2300      	movs	r3, #0

}
 8006620:	4618      	mov	r0, r3
 8006622:	3718      	adds	r7, #24
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	2000000c 	.word	0x2000000c
 800662c:	0800766c 	.word	0x0800766c
 8006630:	08007670 	.word	0x08007670
 8006634:	08007674 	.word	0x08007674

08006638 <fillMemory>:

#if !defined( TARGET_ARCH_HC08 )
int fillMemory(unsigned char *address, char *hexstring)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
	unsigned char *p = address;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	617b      	str	r3, [r7, #20]
	char          sTmp[3];
	int           i, l = ARD_strlen(hexstring);
 8006646:	6838      	ldr	r0, [r7, #0]
 8006648:	f7f9 fdcc 	bl	80001e4 <strlen>
 800664c:	4603      	mov	r3, r0
 800664e:	60fb      	str	r3, [r7, #12]

	for(i=0; i<l; i+=2)
 8006650:	2300      	movs	r3, #0
 8006652:	613b      	str	r3, [r7, #16]
 8006654:	e01d      	b.n	8006692 <fillMemory+0x5a>
	{
		sTmp[0]=hexstring[i];
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	4413      	add	r3, r2
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	723b      	strb	r3, [r7, #8]
		sTmp[1]=hexstring[i+1];
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	3301      	adds	r3, #1
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	4413      	add	r3, r2
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	727b      	strb	r3, [r7, #9]
		sTmp[2]=0; /* terminate substring */
 800666c:	2300      	movs	r3, #0
 800666e:	72bb      	strb	r3, [r7, #10]
		*p = ARD_strtol(sTmp,NULL,16);
 8006670:	f107 0308 	add.w	r3, r7, #8
 8006674:	2210      	movs	r2, #16
 8006676:	2100      	movs	r1, #0
 8006678:	4618      	mov	r0, r3
 800667a:	f000 f96b 	bl	8006954 <strtol>
 800667e:	4603      	mov	r3, r0
 8006680:	b2da      	uxtb	r2, r3
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	701a      	strb	r2, [r3, #0]
		p++;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	3301      	adds	r3, #1
 800668a:	617b      	str	r3, [r7, #20]
	for(i=0; i<l; i+=2)
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	3302      	adds	r3, #2
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	429a      	cmp	r2, r3
 8006698:	dbdd      	blt.n	8006656 <fillMemory+0x1e>
	}
	return 0;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3718      	adds	r7, #24
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <showMaria>:
#endif

int showMaria(void)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
	int     	i, j;
	uint8_t 	*p;

	maria_printf("g_active_fd_index = %d\n\n", g_active_fd_index);
 80066aa:	4b3c      	ldr	r3, [pc, #240]	@ (800679c <showMaria+0xf8>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4619      	mov	r1, r3
 80066b0:	483b      	ldr	r0, [pc, #236]	@ (80067a0 <showMaria+0xfc>)
 80066b2:	f7fe ff91 	bl	80055d8 <maria_printf>
	for(i=0; i<MARIA_MAX_FDS; i++)
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]
 80066ba:	e067      	b.n	800678c <showMaria+0xe8>
	{
		maria_printf("maria_data[%d].r_fd = %d\n", i, maria_data[i].r_fd);
 80066bc:	4939      	ldr	r1, [pc, #228]	@ (80067a4 <showMaria+0x100>)
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	4613      	mov	r3, r2
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	4413      	add	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	440b      	add	r3, r1
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	461a      	mov	r2, r3
 80066ce:	68f9      	ldr	r1, [r7, #12]
 80066d0:	4835      	ldr	r0, [pc, #212]	@ (80067a8 <showMaria+0x104>)
 80066d2:	f7fe ff81 	bl	80055d8 <maria_printf>
		maria_printf("maria_data[%d].w_fd = %d\n", i, maria_data[i].w_fd);
 80066d6:	4933      	ldr	r1, [pc, #204]	@ (80067a4 <showMaria+0x100>)
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	4613      	mov	r3, r2
 80066dc:	00db      	lsls	r3, r3, #3
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	440b      	add	r3, r1
 80066e4:	3304      	adds	r3, #4
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	461a      	mov	r2, r3
 80066ea:	68f9      	ldr	r1, [r7, #12]
 80066ec:	482f      	ldr	r0, [pc, #188]	@ (80067ac <showMaria+0x108>)
 80066ee:	f7fe ff73 	bl	80055d8 <maria_printf>
		maria_printf("maria_data[%d].ud:\n", i);
 80066f2:	68f9      	ldr	r1, [r7, #12]
 80066f4:	482e      	ldr	r0, [pc, #184]	@ (80067b0 <showMaria+0x10c>)
 80066f6:	f7fe ff6f 	bl	80055d8 <maria_printf>
#if !defined(ARDUINO)
		maria_printf("    .fdInstance = %d\n", maria_data[i].ud.fdInstance);
 80066fa:	492a      	ldr	r1, [pc, #168]	@ (80067a4 <showMaria+0x100>)
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4613      	mov	r3, r2
 8006700:	00db      	lsls	r3, r3, #3
 8006702:	4413      	add	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	440b      	add	r3, r1
 8006708:	3310      	adds	r3, #16
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4619      	mov	r1, r3
 800670e:	4829      	ldr	r0, [pc, #164]	@ (80067b4 <showMaria+0x110>)
 8006710:	f7fe ff62 	bl	80055d8 <maria_printf>
		maria_printf("    .fdTag = %d\n", maria_data[i].ud.fdTag);
 8006714:	4923      	ldr	r1, [pc, #140]	@ (80067a4 <showMaria+0x100>)
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	4613      	mov	r3, r2
 800671a:	00db      	lsls	r3, r3, #3
 800671c:	4413      	add	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	440b      	add	r3, r1
 8006722:	330c      	adds	r3, #12
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4619      	mov	r1, r3
 8006728:	4823      	ldr	r0, [pc, #140]	@ (80067b8 <showMaria+0x114>)
 800672a:	f7fe ff55 	bl	80055d8 <maria_printf>
#endif /* ARDUINO */
		maria_printf("    .fdType = %d\n", maria_data[i].ud.fdType);
 800672e:	491d      	ldr	r1, [pc, #116]	@ (80067a4 <showMaria+0x100>)
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4613      	mov	r3, r2
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	4413      	add	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	440b      	add	r3, r1
 800673c:	3308      	adds	r3, #8
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4619      	mov	r1, r3
 8006742:	481e      	ldr	r0, [pc, #120]	@ (80067bc <showMaria+0x118>)
 8006744:	f7fe ff48 	bl	80055d8 <maria_printf>
#if !defined(ARDUINO)
		j = sizeof(maria_data[i].ud.fdInstance) + sizeof(maria_data[i].ud.fdTag) + sizeof(maria_data[i].ud.fdType);
 8006748:	230c      	movs	r3, #12
 800674a:	60bb      	str	r3, [r7, #8]
#else
		j = sizeof(maria_data[i].ud.fdType);
#endif /* ARDUINO */
		maria_printf("    ");
 800674c:	481c      	ldr	r0, [pc, #112]	@ (80067c0 <showMaria+0x11c>)
 800674e:	f7fe ff43 	bl	80055d8 <maria_printf>
		for(; j<sizeof(maria_data[i]); j++)
 8006752:	e012      	b.n	800677a <showMaria+0xd6>
		{
			p = (uint8_t *)(&maria_data[i]);
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4613      	mov	r3, r2
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	4413      	add	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4a11      	ldr	r2, [pc, #68]	@ (80067a4 <showMaria+0x100>)
 8006760:	4413      	add	r3, r2
 8006762:	607b      	str	r3, [r7, #4]
			maria_printf("%02X", p[j]);
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	4413      	add	r3, r2
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	4619      	mov	r1, r3
 800676e:	4815      	ldr	r0, [pc, #84]	@ (80067c4 <showMaria+0x120>)
 8006770:	f7fe ff32 	bl	80055d8 <maria_printf>
		for(; j<sizeof(maria_data[i]); j++)
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	3301      	adds	r3, #1
 8006778:	60bb      	str	r3, [r7, #8]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2b23      	cmp	r3, #35	@ 0x23
 800677e:	d9e9      	bls.n	8006754 <showMaria+0xb0>
		}
		maria_printf("\n\n");
 8006780:	4811      	ldr	r0, [pc, #68]	@ (80067c8 <showMaria+0x124>)
 8006782:	f7fe ff29 	bl	80055d8 <maria_printf>
	for(i=0; i<MARIA_MAX_FDS; i++)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3301      	adds	r3, #1
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2b00      	cmp	r3, #0
 8006790:	dd94      	ble.n	80066bc <showMaria+0x18>
	}
	return MARIA_MAX_FDS;
 8006792:	2301      	movs	r3, #1
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	20000574 	.word	0x20000574
 80067a0:	08007680 	.word	0x08007680
 80067a4:	200008b4 	.word	0x200008b4
 80067a8:	0800769c 	.word	0x0800769c
 80067ac:	080076b8 	.word	0x080076b8
 80067b0:	080076d4 	.word	0x080076d4
 80067b4:	080076e8 	.word	0x080076e8
 80067b8:	08007700 	.word	0x08007700
 80067bc:	08007714 	.word	0x08007714
 80067c0:	08007728 	.word	0x08007728
 80067c4:	08007730 	.word	0x08007730
 80067c8:	08007738 	.word	0x08007738

080067cc <dumppkt>:

/* prints a packet dump in hexadecimal */
/* sprefix string (optional) is printed before the hexadecimal dump as a user defined title */
int dumppkt(unsigned long address, int len, char *sprefix)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
	int    		i;
	uint8_t     *p = (uint8_t *)address;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	613b      	str	r3, [r7, #16]

	if(sprefix != NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <dumppkt+0x1e>
	{
		maria_printf("%s", sprefix);
 80067e2:	6879      	ldr	r1, [r7, #4]
 80067e4:	480f      	ldr	r0, [pc, #60]	@ (8006824 <dumppkt+0x58>)
 80067e6:	f7fe fef7 	bl	80055d8 <maria_printf>
	}

	if(p != NULL)
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d011      	beq.n	8006814 <dumppkt+0x48>
	{
		for(i=0; i<len; i++)
 80067f0:	2300      	movs	r3, #0
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	e00a      	b.n	800680c <dumppkt+0x40>
		{
			maria_printf("%02X ", p[i]);
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	4413      	add	r3, r2
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	4619      	mov	r1, r3
 8006800:	4809      	ldr	r0, [pc, #36]	@ (8006828 <dumppkt+0x5c>)
 8006802:	f7fe fee9 	bl	80055d8 <maria_printf>
		for(i=0; i<len; i++)
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	3301      	adds	r3, #1
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	429a      	cmp	r2, r3
 8006812:	dbf0      	blt.n	80067f6 <dumppkt+0x2a>
		}
	}
	maria_printf("\n");
 8006814:	4805      	ldr	r0, [pc, #20]	@ (800682c <dumppkt+0x60>)
 8006816:	f7fe fedf 	bl	80055d8 <maria_printf>

	return len;
 800681a:	68bb      	ldr	r3, [r7, #8]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	0800773c 	.word	0x0800773c
 8006828:	08007740 	.word	0x08007740
 800682c:	08007624 	.word	0x08007624

08006830 <printArgs>:

int printArgs(unsigned long ptr, char *ptr2)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
	maria_printf("ptr=%ld  0x%lX\n", ptr, ptr);
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	6879      	ldr	r1, [r7, #4]
 800683e:	4806      	ldr	r0, [pc, #24]	@ (8006858 <printArgs+0x28>)
 8006840:	f7fe feca 	bl	80055d8 <maria_printf>
	maria_printf("ptr2=%p\n", ptr2);
 8006844:	6839      	ldr	r1, [r7, #0]
 8006846:	4805      	ldr	r0, [pc, #20]	@ (800685c <printArgs+0x2c>)
 8006848:	f7fe fec6 	bl	80055d8 <maria_printf>
	return 55;
 800684c:	2337      	movs	r3, #55	@ 0x37
}
 800684e:	4618      	mov	r0, r3
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	08007748 	.word	0x08007748
 800685c:	08007758 	.word	0x08007758

08006860 <_strtol_l.constprop.0>:
 8006860:	2b24      	cmp	r3, #36	@ 0x24
 8006862:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006866:	4686      	mov	lr, r0
 8006868:	4690      	mov	r8, r2
 800686a:	d801      	bhi.n	8006870 <_strtol_l.constprop.0+0x10>
 800686c:	2b01      	cmp	r3, #1
 800686e:	d106      	bne.n	800687e <_strtol_l.constprop.0+0x1e>
 8006870:	f000 f96a 	bl	8006b48 <__errno>
 8006874:	2316      	movs	r3, #22
 8006876:	6003      	str	r3, [r0, #0]
 8006878:	2000      	movs	r0, #0
 800687a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800687e:	4834      	ldr	r0, [pc, #208]	@ (8006950 <_strtol_l.constprop.0+0xf0>)
 8006880:	460d      	mov	r5, r1
 8006882:	462a      	mov	r2, r5
 8006884:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006888:	5d06      	ldrb	r6, [r0, r4]
 800688a:	f016 0608 	ands.w	r6, r6, #8
 800688e:	d1f8      	bne.n	8006882 <_strtol_l.constprop.0+0x22>
 8006890:	2c2d      	cmp	r4, #45	@ 0x2d
 8006892:	d12d      	bne.n	80068f0 <_strtol_l.constprop.0+0x90>
 8006894:	782c      	ldrb	r4, [r5, #0]
 8006896:	2601      	movs	r6, #1
 8006898:	1c95      	adds	r5, r2, #2
 800689a:	f033 0210 	bics.w	r2, r3, #16
 800689e:	d109      	bne.n	80068b4 <_strtol_l.constprop.0+0x54>
 80068a0:	2c30      	cmp	r4, #48	@ 0x30
 80068a2:	d12a      	bne.n	80068fa <_strtol_l.constprop.0+0x9a>
 80068a4:	782a      	ldrb	r2, [r5, #0]
 80068a6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80068aa:	2a58      	cmp	r2, #88	@ 0x58
 80068ac:	d125      	bne.n	80068fa <_strtol_l.constprop.0+0x9a>
 80068ae:	786c      	ldrb	r4, [r5, #1]
 80068b0:	2310      	movs	r3, #16
 80068b2:	3502      	adds	r5, #2
 80068b4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80068b8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80068bc:	2200      	movs	r2, #0
 80068be:	fbbc f9f3 	udiv	r9, ip, r3
 80068c2:	4610      	mov	r0, r2
 80068c4:	fb03 ca19 	mls	sl, r3, r9, ip
 80068c8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80068cc:	2f09      	cmp	r7, #9
 80068ce:	d81b      	bhi.n	8006908 <_strtol_l.constprop.0+0xa8>
 80068d0:	463c      	mov	r4, r7
 80068d2:	42a3      	cmp	r3, r4
 80068d4:	dd27      	ble.n	8006926 <_strtol_l.constprop.0+0xc6>
 80068d6:	1c57      	adds	r7, r2, #1
 80068d8:	d007      	beq.n	80068ea <_strtol_l.constprop.0+0x8a>
 80068da:	4581      	cmp	r9, r0
 80068dc:	d320      	bcc.n	8006920 <_strtol_l.constprop.0+0xc0>
 80068de:	d101      	bne.n	80068e4 <_strtol_l.constprop.0+0x84>
 80068e0:	45a2      	cmp	sl, r4
 80068e2:	db1d      	blt.n	8006920 <_strtol_l.constprop.0+0xc0>
 80068e4:	fb00 4003 	mla	r0, r0, r3, r4
 80068e8:	2201      	movs	r2, #1
 80068ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068ee:	e7eb      	b.n	80068c8 <_strtol_l.constprop.0+0x68>
 80068f0:	2c2b      	cmp	r4, #43	@ 0x2b
 80068f2:	bf04      	itt	eq
 80068f4:	782c      	ldrbeq	r4, [r5, #0]
 80068f6:	1c95      	addeq	r5, r2, #2
 80068f8:	e7cf      	b.n	800689a <_strtol_l.constprop.0+0x3a>
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1da      	bne.n	80068b4 <_strtol_l.constprop.0+0x54>
 80068fe:	2c30      	cmp	r4, #48	@ 0x30
 8006900:	bf0c      	ite	eq
 8006902:	2308      	moveq	r3, #8
 8006904:	230a      	movne	r3, #10
 8006906:	e7d5      	b.n	80068b4 <_strtol_l.constprop.0+0x54>
 8006908:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800690c:	2f19      	cmp	r7, #25
 800690e:	d801      	bhi.n	8006914 <_strtol_l.constprop.0+0xb4>
 8006910:	3c37      	subs	r4, #55	@ 0x37
 8006912:	e7de      	b.n	80068d2 <_strtol_l.constprop.0+0x72>
 8006914:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006918:	2f19      	cmp	r7, #25
 800691a:	d804      	bhi.n	8006926 <_strtol_l.constprop.0+0xc6>
 800691c:	3c57      	subs	r4, #87	@ 0x57
 800691e:	e7d8      	b.n	80068d2 <_strtol_l.constprop.0+0x72>
 8006920:	f04f 32ff 	mov.w	r2, #4294967295
 8006924:	e7e1      	b.n	80068ea <_strtol_l.constprop.0+0x8a>
 8006926:	1c53      	adds	r3, r2, #1
 8006928:	d108      	bne.n	800693c <_strtol_l.constprop.0+0xdc>
 800692a:	2322      	movs	r3, #34	@ 0x22
 800692c:	f8ce 3000 	str.w	r3, [lr]
 8006930:	4660      	mov	r0, ip
 8006932:	f1b8 0f00 	cmp.w	r8, #0
 8006936:	d0a0      	beq.n	800687a <_strtol_l.constprop.0+0x1a>
 8006938:	1e69      	subs	r1, r5, #1
 800693a:	e006      	b.n	800694a <_strtol_l.constprop.0+0xea>
 800693c:	b106      	cbz	r6, 8006940 <_strtol_l.constprop.0+0xe0>
 800693e:	4240      	negs	r0, r0
 8006940:	f1b8 0f00 	cmp.w	r8, #0
 8006944:	d099      	beq.n	800687a <_strtol_l.constprop.0+0x1a>
 8006946:	2a00      	cmp	r2, #0
 8006948:	d1f6      	bne.n	8006938 <_strtol_l.constprop.0+0xd8>
 800694a:	f8c8 1000 	str.w	r1, [r8]
 800694e:	e794      	b.n	800687a <_strtol_l.constprop.0+0x1a>
 8006950:	080077ad 	.word	0x080077ad

08006954 <strtol>:
 8006954:	4613      	mov	r3, r2
 8006956:	460a      	mov	r2, r1
 8006958:	4601      	mov	r1, r0
 800695a:	4802      	ldr	r0, [pc, #8]	@ (8006964 <strtol+0x10>)
 800695c:	6800      	ldr	r0, [r0, #0]
 800695e:	f7ff bf7f 	b.w	8006860 <_strtol_l.constprop.0>
 8006962:	bf00      	nop
 8006964:	20000580 	.word	0x20000580

08006968 <_strtoul_l.constprop.0>:
 8006968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800696c:	4e34      	ldr	r6, [pc, #208]	@ (8006a40 <_strtoul_l.constprop.0+0xd8>)
 800696e:	4686      	mov	lr, r0
 8006970:	460d      	mov	r5, r1
 8006972:	4628      	mov	r0, r5
 8006974:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006978:	5d37      	ldrb	r7, [r6, r4]
 800697a:	f017 0708 	ands.w	r7, r7, #8
 800697e:	d1f8      	bne.n	8006972 <_strtoul_l.constprop.0+0xa>
 8006980:	2c2d      	cmp	r4, #45	@ 0x2d
 8006982:	d12f      	bne.n	80069e4 <_strtoul_l.constprop.0+0x7c>
 8006984:	782c      	ldrb	r4, [r5, #0]
 8006986:	2701      	movs	r7, #1
 8006988:	1c85      	adds	r5, r0, #2
 800698a:	f033 0010 	bics.w	r0, r3, #16
 800698e:	d109      	bne.n	80069a4 <_strtoul_l.constprop.0+0x3c>
 8006990:	2c30      	cmp	r4, #48	@ 0x30
 8006992:	d12c      	bne.n	80069ee <_strtoul_l.constprop.0+0x86>
 8006994:	7828      	ldrb	r0, [r5, #0]
 8006996:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800699a:	2858      	cmp	r0, #88	@ 0x58
 800699c:	d127      	bne.n	80069ee <_strtoul_l.constprop.0+0x86>
 800699e:	786c      	ldrb	r4, [r5, #1]
 80069a0:	2310      	movs	r3, #16
 80069a2:	3502      	adds	r5, #2
 80069a4:	f04f 38ff 	mov.w	r8, #4294967295
 80069a8:	2600      	movs	r6, #0
 80069aa:	fbb8 f8f3 	udiv	r8, r8, r3
 80069ae:	fb03 f908 	mul.w	r9, r3, r8
 80069b2:	ea6f 0909 	mvn.w	r9, r9
 80069b6:	4630      	mov	r0, r6
 80069b8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80069bc:	f1bc 0f09 	cmp.w	ip, #9
 80069c0:	d81c      	bhi.n	80069fc <_strtoul_l.constprop.0+0x94>
 80069c2:	4664      	mov	r4, ip
 80069c4:	42a3      	cmp	r3, r4
 80069c6:	dd2a      	ble.n	8006a1e <_strtoul_l.constprop.0+0xb6>
 80069c8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80069cc:	d007      	beq.n	80069de <_strtoul_l.constprop.0+0x76>
 80069ce:	4580      	cmp	r8, r0
 80069d0:	d322      	bcc.n	8006a18 <_strtoul_l.constprop.0+0xb0>
 80069d2:	d101      	bne.n	80069d8 <_strtoul_l.constprop.0+0x70>
 80069d4:	45a1      	cmp	r9, r4
 80069d6:	db1f      	blt.n	8006a18 <_strtoul_l.constprop.0+0xb0>
 80069d8:	fb00 4003 	mla	r0, r0, r3, r4
 80069dc:	2601      	movs	r6, #1
 80069de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069e2:	e7e9      	b.n	80069b8 <_strtoul_l.constprop.0+0x50>
 80069e4:	2c2b      	cmp	r4, #43	@ 0x2b
 80069e6:	bf04      	itt	eq
 80069e8:	782c      	ldrbeq	r4, [r5, #0]
 80069ea:	1c85      	addeq	r5, r0, #2
 80069ec:	e7cd      	b.n	800698a <_strtoul_l.constprop.0+0x22>
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1d8      	bne.n	80069a4 <_strtoul_l.constprop.0+0x3c>
 80069f2:	2c30      	cmp	r4, #48	@ 0x30
 80069f4:	bf0c      	ite	eq
 80069f6:	2308      	moveq	r3, #8
 80069f8:	230a      	movne	r3, #10
 80069fa:	e7d3      	b.n	80069a4 <_strtoul_l.constprop.0+0x3c>
 80069fc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8006a00:	f1bc 0f19 	cmp.w	ip, #25
 8006a04:	d801      	bhi.n	8006a0a <_strtoul_l.constprop.0+0xa2>
 8006a06:	3c37      	subs	r4, #55	@ 0x37
 8006a08:	e7dc      	b.n	80069c4 <_strtoul_l.constprop.0+0x5c>
 8006a0a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8006a0e:	f1bc 0f19 	cmp.w	ip, #25
 8006a12:	d804      	bhi.n	8006a1e <_strtoul_l.constprop.0+0xb6>
 8006a14:	3c57      	subs	r4, #87	@ 0x57
 8006a16:	e7d5      	b.n	80069c4 <_strtoul_l.constprop.0+0x5c>
 8006a18:	f04f 36ff 	mov.w	r6, #4294967295
 8006a1c:	e7df      	b.n	80069de <_strtoul_l.constprop.0+0x76>
 8006a1e:	1c73      	adds	r3, r6, #1
 8006a20:	d106      	bne.n	8006a30 <_strtoul_l.constprop.0+0xc8>
 8006a22:	2322      	movs	r3, #34	@ 0x22
 8006a24:	f8ce 3000 	str.w	r3, [lr]
 8006a28:	4630      	mov	r0, r6
 8006a2a:	b932      	cbnz	r2, 8006a3a <_strtoul_l.constprop.0+0xd2>
 8006a2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a30:	b107      	cbz	r7, 8006a34 <_strtoul_l.constprop.0+0xcc>
 8006a32:	4240      	negs	r0, r0
 8006a34:	2a00      	cmp	r2, #0
 8006a36:	d0f9      	beq.n	8006a2c <_strtoul_l.constprop.0+0xc4>
 8006a38:	b106      	cbz	r6, 8006a3c <_strtoul_l.constprop.0+0xd4>
 8006a3a:	1e69      	subs	r1, r5, #1
 8006a3c:	6011      	str	r1, [r2, #0]
 8006a3e:	e7f5      	b.n	8006a2c <_strtoul_l.constprop.0+0xc4>
 8006a40:	080077ad 	.word	0x080077ad

08006a44 <strtoul>:
 8006a44:	4613      	mov	r3, r2
 8006a46:	460a      	mov	r2, r1
 8006a48:	4601      	mov	r1, r0
 8006a4a:	4802      	ldr	r0, [pc, #8]	@ (8006a54 <strtoul+0x10>)
 8006a4c:	6800      	ldr	r0, [r0, #0]
 8006a4e:	f7ff bf8b 	b.w	8006968 <_strtoul_l.constprop.0>
 8006a52:	bf00      	nop
 8006a54:	20000580 	.word	0x20000580

08006a58 <siprintf>:
 8006a58:	b40e      	push	{r1, r2, r3}
 8006a5a:	b500      	push	{lr}
 8006a5c:	b09c      	sub	sp, #112	@ 0x70
 8006a5e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006a60:	9002      	str	r0, [sp, #8]
 8006a62:	9006      	str	r0, [sp, #24]
 8006a64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006a68:	4809      	ldr	r0, [pc, #36]	@ (8006a90 <siprintf+0x38>)
 8006a6a:	9107      	str	r1, [sp, #28]
 8006a6c:	9104      	str	r1, [sp, #16]
 8006a6e:	4909      	ldr	r1, [pc, #36]	@ (8006a94 <siprintf+0x3c>)
 8006a70:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a74:	9105      	str	r1, [sp, #20]
 8006a76:	6800      	ldr	r0, [r0, #0]
 8006a78:	9301      	str	r3, [sp, #4]
 8006a7a:	a902      	add	r1, sp, #8
 8006a7c:	f000 f9f2 	bl	8006e64 <_svfiprintf_r>
 8006a80:	9b02      	ldr	r3, [sp, #8]
 8006a82:	2200      	movs	r2, #0
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	b01c      	add	sp, #112	@ 0x70
 8006a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a8c:	b003      	add	sp, #12
 8006a8e:	4770      	bx	lr
 8006a90:	20000580 	.word	0x20000580
 8006a94:	ffff0208 	.word	0xffff0208

08006a98 <_vsniprintf_r>:
 8006a98:	b530      	push	{r4, r5, lr}
 8006a9a:	4614      	mov	r4, r2
 8006a9c:	2c00      	cmp	r4, #0
 8006a9e:	b09b      	sub	sp, #108	@ 0x6c
 8006aa0:	4605      	mov	r5, r0
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	da05      	bge.n	8006ab2 <_vsniprintf_r+0x1a>
 8006aa6:	238b      	movs	r3, #139	@ 0x8b
 8006aa8:	6003      	str	r3, [r0, #0]
 8006aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8006aae:	b01b      	add	sp, #108	@ 0x6c
 8006ab0:	bd30      	pop	{r4, r5, pc}
 8006ab2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006ab6:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006aba:	bf14      	ite	ne
 8006abc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ac0:	4623      	moveq	r3, r4
 8006ac2:	9302      	str	r3, [sp, #8]
 8006ac4:	9305      	str	r3, [sp, #20]
 8006ac6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006aca:	9100      	str	r1, [sp, #0]
 8006acc:	9104      	str	r1, [sp, #16]
 8006ace:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006ad2:	4669      	mov	r1, sp
 8006ad4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006ad6:	f000 f9c5 	bl	8006e64 <_svfiprintf_r>
 8006ada:	1c43      	adds	r3, r0, #1
 8006adc:	bfbc      	itt	lt
 8006ade:	238b      	movlt	r3, #139	@ 0x8b
 8006ae0:	602b      	strlt	r3, [r5, #0]
 8006ae2:	2c00      	cmp	r4, #0
 8006ae4:	d0e3      	beq.n	8006aae <_vsniprintf_r+0x16>
 8006ae6:	9b00      	ldr	r3, [sp, #0]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	701a      	strb	r2, [r3, #0]
 8006aec:	e7df      	b.n	8006aae <_vsniprintf_r+0x16>
	...

08006af0 <vsniprintf>:
 8006af0:	b507      	push	{r0, r1, r2, lr}
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	4613      	mov	r3, r2
 8006af6:	460a      	mov	r2, r1
 8006af8:	4601      	mov	r1, r0
 8006afa:	4803      	ldr	r0, [pc, #12]	@ (8006b08 <vsniprintf+0x18>)
 8006afc:	6800      	ldr	r0, [r0, #0]
 8006afe:	f7ff ffcb 	bl	8006a98 <_vsniprintf_r>
 8006b02:	b003      	add	sp, #12
 8006b04:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b08:	20000580 	.word	0x20000580

08006b0c <memset>:
 8006b0c:	4402      	add	r2, r0
 8006b0e:	4603      	mov	r3, r0
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d100      	bne.n	8006b16 <memset+0xa>
 8006b14:	4770      	bx	lr
 8006b16:	f803 1b01 	strb.w	r1, [r3], #1
 8006b1a:	e7f9      	b.n	8006b10 <memset+0x4>

08006b1c <strstr>:
 8006b1c:	780a      	ldrb	r2, [r1, #0]
 8006b1e:	b570      	push	{r4, r5, r6, lr}
 8006b20:	b96a      	cbnz	r2, 8006b3e <strstr+0x22>
 8006b22:	bd70      	pop	{r4, r5, r6, pc}
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d109      	bne.n	8006b3c <strstr+0x20>
 8006b28:	460c      	mov	r4, r1
 8006b2a:	4605      	mov	r5, r0
 8006b2c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0f6      	beq.n	8006b22 <strstr+0x6>
 8006b34:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006b38:	429e      	cmp	r6, r3
 8006b3a:	d0f7      	beq.n	8006b2c <strstr+0x10>
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	7803      	ldrb	r3, [r0, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1ef      	bne.n	8006b24 <strstr+0x8>
 8006b44:	4618      	mov	r0, r3
 8006b46:	e7ec      	b.n	8006b22 <strstr+0x6>

08006b48 <__errno>:
 8006b48:	4b01      	ldr	r3, [pc, #4]	@ (8006b50 <__errno+0x8>)
 8006b4a:	6818      	ldr	r0, [r3, #0]
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	20000580 	.word	0x20000580

08006b54 <__libc_init_array>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	4d0d      	ldr	r5, [pc, #52]	@ (8006b8c <__libc_init_array+0x38>)
 8006b58:	4c0d      	ldr	r4, [pc, #52]	@ (8006b90 <__libc_init_array+0x3c>)
 8006b5a:	1b64      	subs	r4, r4, r5
 8006b5c:	10a4      	asrs	r4, r4, #2
 8006b5e:	2600      	movs	r6, #0
 8006b60:	42a6      	cmp	r6, r4
 8006b62:	d109      	bne.n	8006b78 <__libc_init_array+0x24>
 8006b64:	4d0b      	ldr	r5, [pc, #44]	@ (8006b94 <__libc_init_array+0x40>)
 8006b66:	4c0c      	ldr	r4, [pc, #48]	@ (8006b98 <__libc_init_array+0x44>)
 8006b68:	f000 fc66 	bl	8007438 <_init>
 8006b6c:	1b64      	subs	r4, r4, r5
 8006b6e:	10a4      	asrs	r4, r4, #2
 8006b70:	2600      	movs	r6, #0
 8006b72:	42a6      	cmp	r6, r4
 8006b74:	d105      	bne.n	8006b82 <__libc_init_array+0x2e>
 8006b76:	bd70      	pop	{r4, r5, r6, pc}
 8006b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b7c:	4798      	blx	r3
 8006b7e:	3601      	adds	r6, #1
 8006b80:	e7ee      	b.n	8006b60 <__libc_init_array+0xc>
 8006b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b86:	4798      	blx	r3
 8006b88:	3601      	adds	r6, #1
 8006b8a:	e7f2      	b.n	8006b72 <__libc_init_array+0x1e>
 8006b8c:	080078e8 	.word	0x080078e8
 8006b90:	080078e8 	.word	0x080078e8
 8006b94:	080078e8 	.word	0x080078e8
 8006b98:	080078ec 	.word	0x080078ec

08006b9c <__retarget_lock_acquire_recursive>:
 8006b9c:	4770      	bx	lr

08006b9e <__retarget_lock_release_recursive>:
 8006b9e:	4770      	bx	lr

08006ba0 <memcpy>:
 8006ba0:	440a      	add	r2, r1
 8006ba2:	4291      	cmp	r1, r2
 8006ba4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ba8:	d100      	bne.n	8006bac <memcpy+0xc>
 8006baa:	4770      	bx	lr
 8006bac:	b510      	push	{r4, lr}
 8006bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bb6:	4291      	cmp	r1, r2
 8006bb8:	d1f9      	bne.n	8006bae <memcpy+0xe>
 8006bba:	bd10      	pop	{r4, pc}

08006bbc <_free_r>:
 8006bbc:	b538      	push	{r3, r4, r5, lr}
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	2900      	cmp	r1, #0
 8006bc2:	d041      	beq.n	8006c48 <_free_r+0x8c>
 8006bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bc8:	1f0c      	subs	r4, r1, #4
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	bfb8      	it	lt
 8006bce:	18e4      	addlt	r4, r4, r3
 8006bd0:	f000 f8e0 	bl	8006d94 <__malloc_lock>
 8006bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8006c4c <_free_r+0x90>)
 8006bd6:	6813      	ldr	r3, [r2, #0]
 8006bd8:	b933      	cbnz	r3, 8006be8 <_free_r+0x2c>
 8006bda:	6063      	str	r3, [r4, #4]
 8006bdc:	6014      	str	r4, [r2, #0]
 8006bde:	4628      	mov	r0, r5
 8006be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006be4:	f000 b8dc 	b.w	8006da0 <__malloc_unlock>
 8006be8:	42a3      	cmp	r3, r4
 8006bea:	d908      	bls.n	8006bfe <_free_r+0x42>
 8006bec:	6820      	ldr	r0, [r4, #0]
 8006bee:	1821      	adds	r1, r4, r0
 8006bf0:	428b      	cmp	r3, r1
 8006bf2:	bf01      	itttt	eq
 8006bf4:	6819      	ldreq	r1, [r3, #0]
 8006bf6:	685b      	ldreq	r3, [r3, #4]
 8006bf8:	1809      	addeq	r1, r1, r0
 8006bfa:	6021      	streq	r1, [r4, #0]
 8006bfc:	e7ed      	b.n	8006bda <_free_r+0x1e>
 8006bfe:	461a      	mov	r2, r3
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	b10b      	cbz	r3, 8006c08 <_free_r+0x4c>
 8006c04:	42a3      	cmp	r3, r4
 8006c06:	d9fa      	bls.n	8006bfe <_free_r+0x42>
 8006c08:	6811      	ldr	r1, [r2, #0]
 8006c0a:	1850      	adds	r0, r2, r1
 8006c0c:	42a0      	cmp	r0, r4
 8006c0e:	d10b      	bne.n	8006c28 <_free_r+0x6c>
 8006c10:	6820      	ldr	r0, [r4, #0]
 8006c12:	4401      	add	r1, r0
 8006c14:	1850      	adds	r0, r2, r1
 8006c16:	4283      	cmp	r3, r0
 8006c18:	6011      	str	r1, [r2, #0]
 8006c1a:	d1e0      	bne.n	8006bde <_free_r+0x22>
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	6053      	str	r3, [r2, #4]
 8006c22:	4408      	add	r0, r1
 8006c24:	6010      	str	r0, [r2, #0]
 8006c26:	e7da      	b.n	8006bde <_free_r+0x22>
 8006c28:	d902      	bls.n	8006c30 <_free_r+0x74>
 8006c2a:	230c      	movs	r3, #12
 8006c2c:	602b      	str	r3, [r5, #0]
 8006c2e:	e7d6      	b.n	8006bde <_free_r+0x22>
 8006c30:	6820      	ldr	r0, [r4, #0]
 8006c32:	1821      	adds	r1, r4, r0
 8006c34:	428b      	cmp	r3, r1
 8006c36:	bf04      	itt	eq
 8006c38:	6819      	ldreq	r1, [r3, #0]
 8006c3a:	685b      	ldreq	r3, [r3, #4]
 8006c3c:	6063      	str	r3, [r4, #4]
 8006c3e:	bf04      	itt	eq
 8006c40:	1809      	addeq	r1, r1, r0
 8006c42:	6021      	streq	r1, [r4, #0]
 8006c44:	6054      	str	r4, [r2, #4]
 8006c46:	e7ca      	b.n	8006bde <_free_r+0x22>
 8006c48:	bd38      	pop	{r3, r4, r5, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20000d24 	.word	0x20000d24

08006c50 <sbrk_aligned>:
 8006c50:	b570      	push	{r4, r5, r6, lr}
 8006c52:	4e0f      	ldr	r6, [pc, #60]	@ (8006c90 <sbrk_aligned+0x40>)
 8006c54:	460c      	mov	r4, r1
 8006c56:	6831      	ldr	r1, [r6, #0]
 8006c58:	4605      	mov	r5, r0
 8006c5a:	b911      	cbnz	r1, 8006c62 <sbrk_aligned+0x12>
 8006c5c:	f000 fba6 	bl	80073ac <_sbrk_r>
 8006c60:	6030      	str	r0, [r6, #0]
 8006c62:	4621      	mov	r1, r4
 8006c64:	4628      	mov	r0, r5
 8006c66:	f000 fba1 	bl	80073ac <_sbrk_r>
 8006c6a:	1c43      	adds	r3, r0, #1
 8006c6c:	d103      	bne.n	8006c76 <sbrk_aligned+0x26>
 8006c6e:	f04f 34ff 	mov.w	r4, #4294967295
 8006c72:	4620      	mov	r0, r4
 8006c74:	bd70      	pop	{r4, r5, r6, pc}
 8006c76:	1cc4      	adds	r4, r0, #3
 8006c78:	f024 0403 	bic.w	r4, r4, #3
 8006c7c:	42a0      	cmp	r0, r4
 8006c7e:	d0f8      	beq.n	8006c72 <sbrk_aligned+0x22>
 8006c80:	1a21      	subs	r1, r4, r0
 8006c82:	4628      	mov	r0, r5
 8006c84:	f000 fb92 	bl	80073ac <_sbrk_r>
 8006c88:	3001      	adds	r0, #1
 8006c8a:	d1f2      	bne.n	8006c72 <sbrk_aligned+0x22>
 8006c8c:	e7ef      	b.n	8006c6e <sbrk_aligned+0x1e>
 8006c8e:	bf00      	nop
 8006c90:	20000d20 	.word	0x20000d20

08006c94 <_malloc_r>:
 8006c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c98:	1ccd      	adds	r5, r1, #3
 8006c9a:	f025 0503 	bic.w	r5, r5, #3
 8006c9e:	3508      	adds	r5, #8
 8006ca0:	2d0c      	cmp	r5, #12
 8006ca2:	bf38      	it	cc
 8006ca4:	250c      	movcc	r5, #12
 8006ca6:	2d00      	cmp	r5, #0
 8006ca8:	4606      	mov	r6, r0
 8006caa:	db01      	blt.n	8006cb0 <_malloc_r+0x1c>
 8006cac:	42a9      	cmp	r1, r5
 8006cae:	d904      	bls.n	8006cba <_malloc_r+0x26>
 8006cb0:	230c      	movs	r3, #12
 8006cb2:	6033      	str	r3, [r6, #0]
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d90 <_malloc_r+0xfc>
 8006cbe:	f000 f869 	bl	8006d94 <__malloc_lock>
 8006cc2:	f8d8 3000 	ldr.w	r3, [r8]
 8006cc6:	461c      	mov	r4, r3
 8006cc8:	bb44      	cbnz	r4, 8006d1c <_malloc_r+0x88>
 8006cca:	4629      	mov	r1, r5
 8006ccc:	4630      	mov	r0, r6
 8006cce:	f7ff ffbf 	bl	8006c50 <sbrk_aligned>
 8006cd2:	1c43      	adds	r3, r0, #1
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	d158      	bne.n	8006d8a <_malloc_r+0xf6>
 8006cd8:	f8d8 4000 	ldr.w	r4, [r8]
 8006cdc:	4627      	mov	r7, r4
 8006cde:	2f00      	cmp	r7, #0
 8006ce0:	d143      	bne.n	8006d6a <_malloc_r+0xd6>
 8006ce2:	2c00      	cmp	r4, #0
 8006ce4:	d04b      	beq.n	8006d7e <_malloc_r+0xea>
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	4639      	mov	r1, r7
 8006cea:	4630      	mov	r0, r6
 8006cec:	eb04 0903 	add.w	r9, r4, r3
 8006cf0:	f000 fb5c 	bl	80073ac <_sbrk_r>
 8006cf4:	4581      	cmp	r9, r0
 8006cf6:	d142      	bne.n	8006d7e <_malloc_r+0xea>
 8006cf8:	6821      	ldr	r1, [r4, #0]
 8006cfa:	1a6d      	subs	r5, r5, r1
 8006cfc:	4629      	mov	r1, r5
 8006cfe:	4630      	mov	r0, r6
 8006d00:	f7ff ffa6 	bl	8006c50 <sbrk_aligned>
 8006d04:	3001      	adds	r0, #1
 8006d06:	d03a      	beq.n	8006d7e <_malloc_r+0xea>
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	442b      	add	r3, r5
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	bb62      	cbnz	r2, 8006d70 <_malloc_r+0xdc>
 8006d16:	f8c8 7000 	str.w	r7, [r8]
 8006d1a:	e00f      	b.n	8006d3c <_malloc_r+0xa8>
 8006d1c:	6822      	ldr	r2, [r4, #0]
 8006d1e:	1b52      	subs	r2, r2, r5
 8006d20:	d420      	bmi.n	8006d64 <_malloc_r+0xd0>
 8006d22:	2a0b      	cmp	r2, #11
 8006d24:	d917      	bls.n	8006d56 <_malloc_r+0xc2>
 8006d26:	1961      	adds	r1, r4, r5
 8006d28:	42a3      	cmp	r3, r4
 8006d2a:	6025      	str	r5, [r4, #0]
 8006d2c:	bf18      	it	ne
 8006d2e:	6059      	strne	r1, [r3, #4]
 8006d30:	6863      	ldr	r3, [r4, #4]
 8006d32:	bf08      	it	eq
 8006d34:	f8c8 1000 	streq.w	r1, [r8]
 8006d38:	5162      	str	r2, [r4, r5]
 8006d3a:	604b      	str	r3, [r1, #4]
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	f000 f82f 	bl	8006da0 <__malloc_unlock>
 8006d42:	f104 000b 	add.w	r0, r4, #11
 8006d46:	1d23      	adds	r3, r4, #4
 8006d48:	f020 0007 	bic.w	r0, r0, #7
 8006d4c:	1ac2      	subs	r2, r0, r3
 8006d4e:	bf1c      	itt	ne
 8006d50:	1a1b      	subne	r3, r3, r0
 8006d52:	50a3      	strne	r3, [r4, r2]
 8006d54:	e7af      	b.n	8006cb6 <_malloc_r+0x22>
 8006d56:	6862      	ldr	r2, [r4, #4]
 8006d58:	42a3      	cmp	r3, r4
 8006d5a:	bf0c      	ite	eq
 8006d5c:	f8c8 2000 	streq.w	r2, [r8]
 8006d60:	605a      	strne	r2, [r3, #4]
 8006d62:	e7eb      	b.n	8006d3c <_malloc_r+0xa8>
 8006d64:	4623      	mov	r3, r4
 8006d66:	6864      	ldr	r4, [r4, #4]
 8006d68:	e7ae      	b.n	8006cc8 <_malloc_r+0x34>
 8006d6a:	463c      	mov	r4, r7
 8006d6c:	687f      	ldr	r7, [r7, #4]
 8006d6e:	e7b6      	b.n	8006cde <_malloc_r+0x4a>
 8006d70:	461a      	mov	r2, r3
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	42a3      	cmp	r3, r4
 8006d76:	d1fb      	bne.n	8006d70 <_malloc_r+0xdc>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	6053      	str	r3, [r2, #4]
 8006d7c:	e7de      	b.n	8006d3c <_malloc_r+0xa8>
 8006d7e:	230c      	movs	r3, #12
 8006d80:	6033      	str	r3, [r6, #0]
 8006d82:	4630      	mov	r0, r6
 8006d84:	f000 f80c 	bl	8006da0 <__malloc_unlock>
 8006d88:	e794      	b.n	8006cb4 <_malloc_r+0x20>
 8006d8a:	6005      	str	r5, [r0, #0]
 8006d8c:	e7d6      	b.n	8006d3c <_malloc_r+0xa8>
 8006d8e:	bf00      	nop
 8006d90:	20000d24 	.word	0x20000d24

08006d94 <__malloc_lock>:
 8006d94:	4801      	ldr	r0, [pc, #4]	@ (8006d9c <__malloc_lock+0x8>)
 8006d96:	f7ff bf01 	b.w	8006b9c <__retarget_lock_acquire_recursive>
 8006d9a:	bf00      	nop
 8006d9c:	20000d1c 	.word	0x20000d1c

08006da0 <__malloc_unlock>:
 8006da0:	4801      	ldr	r0, [pc, #4]	@ (8006da8 <__malloc_unlock+0x8>)
 8006da2:	f7ff befc 	b.w	8006b9e <__retarget_lock_release_recursive>
 8006da6:	bf00      	nop
 8006da8:	20000d1c 	.word	0x20000d1c

08006dac <__ssputs_r>:
 8006dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006db0:	688e      	ldr	r6, [r1, #8]
 8006db2:	461f      	mov	r7, r3
 8006db4:	42be      	cmp	r6, r7
 8006db6:	680b      	ldr	r3, [r1, #0]
 8006db8:	4682      	mov	sl, r0
 8006dba:	460c      	mov	r4, r1
 8006dbc:	4690      	mov	r8, r2
 8006dbe:	d82d      	bhi.n	8006e1c <__ssputs_r+0x70>
 8006dc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006dc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006dc8:	d026      	beq.n	8006e18 <__ssputs_r+0x6c>
 8006dca:	6965      	ldr	r5, [r4, #20]
 8006dcc:	6909      	ldr	r1, [r1, #16]
 8006dce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dd2:	eba3 0901 	sub.w	r9, r3, r1
 8006dd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006dda:	1c7b      	adds	r3, r7, #1
 8006ddc:	444b      	add	r3, r9
 8006dde:	106d      	asrs	r5, r5, #1
 8006de0:	429d      	cmp	r5, r3
 8006de2:	bf38      	it	cc
 8006de4:	461d      	movcc	r5, r3
 8006de6:	0553      	lsls	r3, r2, #21
 8006de8:	d527      	bpl.n	8006e3a <__ssputs_r+0x8e>
 8006dea:	4629      	mov	r1, r5
 8006dec:	f7ff ff52 	bl	8006c94 <_malloc_r>
 8006df0:	4606      	mov	r6, r0
 8006df2:	b360      	cbz	r0, 8006e4e <__ssputs_r+0xa2>
 8006df4:	6921      	ldr	r1, [r4, #16]
 8006df6:	464a      	mov	r2, r9
 8006df8:	f7ff fed2 	bl	8006ba0 <memcpy>
 8006dfc:	89a3      	ldrh	r3, [r4, #12]
 8006dfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e06:	81a3      	strh	r3, [r4, #12]
 8006e08:	6126      	str	r6, [r4, #16]
 8006e0a:	6165      	str	r5, [r4, #20]
 8006e0c:	444e      	add	r6, r9
 8006e0e:	eba5 0509 	sub.w	r5, r5, r9
 8006e12:	6026      	str	r6, [r4, #0]
 8006e14:	60a5      	str	r5, [r4, #8]
 8006e16:	463e      	mov	r6, r7
 8006e18:	42be      	cmp	r6, r7
 8006e1a:	d900      	bls.n	8006e1e <__ssputs_r+0x72>
 8006e1c:	463e      	mov	r6, r7
 8006e1e:	6820      	ldr	r0, [r4, #0]
 8006e20:	4632      	mov	r2, r6
 8006e22:	4641      	mov	r1, r8
 8006e24:	f000 faa8 	bl	8007378 <memmove>
 8006e28:	68a3      	ldr	r3, [r4, #8]
 8006e2a:	1b9b      	subs	r3, r3, r6
 8006e2c:	60a3      	str	r3, [r4, #8]
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	4433      	add	r3, r6
 8006e32:	6023      	str	r3, [r4, #0]
 8006e34:	2000      	movs	r0, #0
 8006e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e3a:	462a      	mov	r2, r5
 8006e3c:	f000 fac6 	bl	80073cc <_realloc_r>
 8006e40:	4606      	mov	r6, r0
 8006e42:	2800      	cmp	r0, #0
 8006e44:	d1e0      	bne.n	8006e08 <__ssputs_r+0x5c>
 8006e46:	6921      	ldr	r1, [r4, #16]
 8006e48:	4650      	mov	r0, sl
 8006e4a:	f7ff feb7 	bl	8006bbc <_free_r>
 8006e4e:	230c      	movs	r3, #12
 8006e50:	f8ca 3000 	str.w	r3, [sl]
 8006e54:	89a3      	ldrh	r3, [r4, #12]
 8006e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e5a:	81a3      	strh	r3, [r4, #12]
 8006e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e60:	e7e9      	b.n	8006e36 <__ssputs_r+0x8a>
	...

08006e64 <_svfiprintf_r>:
 8006e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e68:	4698      	mov	r8, r3
 8006e6a:	898b      	ldrh	r3, [r1, #12]
 8006e6c:	061b      	lsls	r3, r3, #24
 8006e6e:	b09d      	sub	sp, #116	@ 0x74
 8006e70:	4607      	mov	r7, r0
 8006e72:	460d      	mov	r5, r1
 8006e74:	4614      	mov	r4, r2
 8006e76:	d510      	bpl.n	8006e9a <_svfiprintf_r+0x36>
 8006e78:	690b      	ldr	r3, [r1, #16]
 8006e7a:	b973      	cbnz	r3, 8006e9a <_svfiprintf_r+0x36>
 8006e7c:	2140      	movs	r1, #64	@ 0x40
 8006e7e:	f7ff ff09 	bl	8006c94 <_malloc_r>
 8006e82:	6028      	str	r0, [r5, #0]
 8006e84:	6128      	str	r0, [r5, #16]
 8006e86:	b930      	cbnz	r0, 8006e96 <_svfiprintf_r+0x32>
 8006e88:	230c      	movs	r3, #12
 8006e8a:	603b      	str	r3, [r7, #0]
 8006e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e90:	b01d      	add	sp, #116	@ 0x74
 8006e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e96:	2340      	movs	r3, #64	@ 0x40
 8006e98:	616b      	str	r3, [r5, #20]
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e9e:	2320      	movs	r3, #32
 8006ea0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ea4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ea8:	2330      	movs	r3, #48	@ 0x30
 8006eaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007048 <_svfiprintf_r+0x1e4>
 8006eae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006eb2:	f04f 0901 	mov.w	r9, #1
 8006eb6:	4623      	mov	r3, r4
 8006eb8:	469a      	mov	sl, r3
 8006eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ebe:	b10a      	cbz	r2, 8006ec4 <_svfiprintf_r+0x60>
 8006ec0:	2a25      	cmp	r2, #37	@ 0x25
 8006ec2:	d1f9      	bne.n	8006eb8 <_svfiprintf_r+0x54>
 8006ec4:	ebba 0b04 	subs.w	fp, sl, r4
 8006ec8:	d00b      	beq.n	8006ee2 <_svfiprintf_r+0x7e>
 8006eca:	465b      	mov	r3, fp
 8006ecc:	4622      	mov	r2, r4
 8006ece:	4629      	mov	r1, r5
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	f7ff ff6b 	bl	8006dac <__ssputs_r>
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	f000 80a7 	beq.w	800702a <_svfiprintf_r+0x1c6>
 8006edc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ede:	445a      	add	r2, fp
 8006ee0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 809f 	beq.w	800702a <_svfiprintf_r+0x1c6>
 8006eec:	2300      	movs	r3, #0
 8006eee:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ef6:	f10a 0a01 	add.w	sl, sl, #1
 8006efa:	9304      	str	r3, [sp, #16]
 8006efc:	9307      	str	r3, [sp, #28]
 8006efe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f02:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f04:	4654      	mov	r4, sl
 8006f06:	2205      	movs	r2, #5
 8006f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f0c:	484e      	ldr	r0, [pc, #312]	@ (8007048 <_svfiprintf_r+0x1e4>)
 8006f0e:	f7f9 f977 	bl	8000200 <memchr>
 8006f12:	9a04      	ldr	r2, [sp, #16]
 8006f14:	b9d8      	cbnz	r0, 8006f4e <_svfiprintf_r+0xea>
 8006f16:	06d0      	lsls	r0, r2, #27
 8006f18:	bf44      	itt	mi
 8006f1a:	2320      	movmi	r3, #32
 8006f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f20:	0711      	lsls	r1, r2, #28
 8006f22:	bf44      	itt	mi
 8006f24:	232b      	movmi	r3, #43	@ 0x2b
 8006f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f30:	d015      	beq.n	8006f5e <_svfiprintf_r+0xfa>
 8006f32:	9a07      	ldr	r2, [sp, #28]
 8006f34:	4654      	mov	r4, sl
 8006f36:	2000      	movs	r0, #0
 8006f38:	f04f 0c0a 	mov.w	ip, #10
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f42:	3b30      	subs	r3, #48	@ 0x30
 8006f44:	2b09      	cmp	r3, #9
 8006f46:	d94b      	bls.n	8006fe0 <_svfiprintf_r+0x17c>
 8006f48:	b1b0      	cbz	r0, 8006f78 <_svfiprintf_r+0x114>
 8006f4a:	9207      	str	r2, [sp, #28]
 8006f4c:	e014      	b.n	8006f78 <_svfiprintf_r+0x114>
 8006f4e:	eba0 0308 	sub.w	r3, r0, r8
 8006f52:	fa09 f303 	lsl.w	r3, r9, r3
 8006f56:	4313      	orrs	r3, r2
 8006f58:	9304      	str	r3, [sp, #16]
 8006f5a:	46a2      	mov	sl, r4
 8006f5c:	e7d2      	b.n	8006f04 <_svfiprintf_r+0xa0>
 8006f5e:	9b03      	ldr	r3, [sp, #12]
 8006f60:	1d19      	adds	r1, r3, #4
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	9103      	str	r1, [sp, #12]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	bfbb      	ittet	lt
 8006f6a:	425b      	neglt	r3, r3
 8006f6c:	f042 0202 	orrlt.w	r2, r2, #2
 8006f70:	9307      	strge	r3, [sp, #28]
 8006f72:	9307      	strlt	r3, [sp, #28]
 8006f74:	bfb8      	it	lt
 8006f76:	9204      	strlt	r2, [sp, #16]
 8006f78:	7823      	ldrb	r3, [r4, #0]
 8006f7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f7c:	d10a      	bne.n	8006f94 <_svfiprintf_r+0x130>
 8006f7e:	7863      	ldrb	r3, [r4, #1]
 8006f80:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f82:	d132      	bne.n	8006fea <_svfiprintf_r+0x186>
 8006f84:	9b03      	ldr	r3, [sp, #12]
 8006f86:	1d1a      	adds	r2, r3, #4
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	9203      	str	r2, [sp, #12]
 8006f8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f90:	3402      	adds	r4, #2
 8006f92:	9305      	str	r3, [sp, #20]
 8006f94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007058 <_svfiprintf_r+0x1f4>
 8006f98:	7821      	ldrb	r1, [r4, #0]
 8006f9a:	2203      	movs	r2, #3
 8006f9c:	4650      	mov	r0, sl
 8006f9e:	f7f9 f92f 	bl	8000200 <memchr>
 8006fa2:	b138      	cbz	r0, 8006fb4 <_svfiprintf_r+0x150>
 8006fa4:	9b04      	ldr	r3, [sp, #16]
 8006fa6:	eba0 000a 	sub.w	r0, r0, sl
 8006faa:	2240      	movs	r2, #64	@ 0x40
 8006fac:	4082      	lsls	r2, r0
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	3401      	adds	r4, #1
 8006fb2:	9304      	str	r3, [sp, #16]
 8006fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fb8:	4824      	ldr	r0, [pc, #144]	@ (800704c <_svfiprintf_r+0x1e8>)
 8006fba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006fbe:	2206      	movs	r2, #6
 8006fc0:	f7f9 f91e 	bl	8000200 <memchr>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	d036      	beq.n	8007036 <_svfiprintf_r+0x1d2>
 8006fc8:	4b21      	ldr	r3, [pc, #132]	@ (8007050 <_svfiprintf_r+0x1ec>)
 8006fca:	bb1b      	cbnz	r3, 8007014 <_svfiprintf_r+0x1b0>
 8006fcc:	9b03      	ldr	r3, [sp, #12]
 8006fce:	3307      	adds	r3, #7
 8006fd0:	f023 0307 	bic.w	r3, r3, #7
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	9303      	str	r3, [sp, #12]
 8006fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fda:	4433      	add	r3, r6
 8006fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fde:	e76a      	b.n	8006eb6 <_svfiprintf_r+0x52>
 8006fe0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fe4:	460c      	mov	r4, r1
 8006fe6:	2001      	movs	r0, #1
 8006fe8:	e7a8      	b.n	8006f3c <_svfiprintf_r+0xd8>
 8006fea:	2300      	movs	r3, #0
 8006fec:	3401      	adds	r4, #1
 8006fee:	9305      	str	r3, [sp, #20]
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	f04f 0c0a 	mov.w	ip, #10
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ffc:	3a30      	subs	r2, #48	@ 0x30
 8006ffe:	2a09      	cmp	r2, #9
 8007000:	d903      	bls.n	800700a <_svfiprintf_r+0x1a6>
 8007002:	2b00      	cmp	r3, #0
 8007004:	d0c6      	beq.n	8006f94 <_svfiprintf_r+0x130>
 8007006:	9105      	str	r1, [sp, #20]
 8007008:	e7c4      	b.n	8006f94 <_svfiprintf_r+0x130>
 800700a:	fb0c 2101 	mla	r1, ip, r1, r2
 800700e:	4604      	mov	r4, r0
 8007010:	2301      	movs	r3, #1
 8007012:	e7f0      	b.n	8006ff6 <_svfiprintf_r+0x192>
 8007014:	ab03      	add	r3, sp, #12
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	462a      	mov	r2, r5
 800701a:	4b0e      	ldr	r3, [pc, #56]	@ (8007054 <_svfiprintf_r+0x1f0>)
 800701c:	a904      	add	r1, sp, #16
 800701e:	4638      	mov	r0, r7
 8007020:	f3af 8000 	nop.w
 8007024:	1c42      	adds	r2, r0, #1
 8007026:	4606      	mov	r6, r0
 8007028:	d1d6      	bne.n	8006fd8 <_svfiprintf_r+0x174>
 800702a:	89ab      	ldrh	r3, [r5, #12]
 800702c:	065b      	lsls	r3, r3, #25
 800702e:	f53f af2d 	bmi.w	8006e8c <_svfiprintf_r+0x28>
 8007032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007034:	e72c      	b.n	8006e90 <_svfiprintf_r+0x2c>
 8007036:	ab03      	add	r3, sp, #12
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	462a      	mov	r2, r5
 800703c:	4b05      	ldr	r3, [pc, #20]	@ (8007054 <_svfiprintf_r+0x1f0>)
 800703e:	a904      	add	r1, sp, #16
 8007040:	4638      	mov	r0, r7
 8007042:	f000 f879 	bl	8007138 <_printf_i>
 8007046:	e7ed      	b.n	8007024 <_svfiprintf_r+0x1c0>
 8007048:	080078ad 	.word	0x080078ad
 800704c:	080078b7 	.word	0x080078b7
 8007050:	00000000 	.word	0x00000000
 8007054:	08006dad 	.word	0x08006dad
 8007058:	080078b3 	.word	0x080078b3

0800705c <_printf_common>:
 800705c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007060:	4616      	mov	r6, r2
 8007062:	4698      	mov	r8, r3
 8007064:	688a      	ldr	r2, [r1, #8]
 8007066:	690b      	ldr	r3, [r1, #16]
 8007068:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800706c:	4293      	cmp	r3, r2
 800706e:	bfb8      	it	lt
 8007070:	4613      	movlt	r3, r2
 8007072:	6033      	str	r3, [r6, #0]
 8007074:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007078:	4607      	mov	r7, r0
 800707a:	460c      	mov	r4, r1
 800707c:	b10a      	cbz	r2, 8007082 <_printf_common+0x26>
 800707e:	3301      	adds	r3, #1
 8007080:	6033      	str	r3, [r6, #0]
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	0699      	lsls	r1, r3, #26
 8007086:	bf42      	ittt	mi
 8007088:	6833      	ldrmi	r3, [r6, #0]
 800708a:	3302      	addmi	r3, #2
 800708c:	6033      	strmi	r3, [r6, #0]
 800708e:	6825      	ldr	r5, [r4, #0]
 8007090:	f015 0506 	ands.w	r5, r5, #6
 8007094:	d106      	bne.n	80070a4 <_printf_common+0x48>
 8007096:	f104 0a19 	add.w	sl, r4, #25
 800709a:	68e3      	ldr	r3, [r4, #12]
 800709c:	6832      	ldr	r2, [r6, #0]
 800709e:	1a9b      	subs	r3, r3, r2
 80070a0:	42ab      	cmp	r3, r5
 80070a2:	dc26      	bgt.n	80070f2 <_printf_common+0x96>
 80070a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80070a8:	6822      	ldr	r2, [r4, #0]
 80070aa:	3b00      	subs	r3, #0
 80070ac:	bf18      	it	ne
 80070ae:	2301      	movne	r3, #1
 80070b0:	0692      	lsls	r2, r2, #26
 80070b2:	d42b      	bmi.n	800710c <_printf_common+0xb0>
 80070b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80070b8:	4641      	mov	r1, r8
 80070ba:	4638      	mov	r0, r7
 80070bc:	47c8      	blx	r9
 80070be:	3001      	adds	r0, #1
 80070c0:	d01e      	beq.n	8007100 <_printf_common+0xa4>
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	6922      	ldr	r2, [r4, #16]
 80070c6:	f003 0306 	and.w	r3, r3, #6
 80070ca:	2b04      	cmp	r3, #4
 80070cc:	bf02      	ittt	eq
 80070ce:	68e5      	ldreq	r5, [r4, #12]
 80070d0:	6833      	ldreq	r3, [r6, #0]
 80070d2:	1aed      	subeq	r5, r5, r3
 80070d4:	68a3      	ldr	r3, [r4, #8]
 80070d6:	bf0c      	ite	eq
 80070d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070dc:	2500      	movne	r5, #0
 80070de:	4293      	cmp	r3, r2
 80070e0:	bfc4      	itt	gt
 80070e2:	1a9b      	subgt	r3, r3, r2
 80070e4:	18ed      	addgt	r5, r5, r3
 80070e6:	2600      	movs	r6, #0
 80070e8:	341a      	adds	r4, #26
 80070ea:	42b5      	cmp	r5, r6
 80070ec:	d11a      	bne.n	8007124 <_printf_common+0xc8>
 80070ee:	2000      	movs	r0, #0
 80070f0:	e008      	b.n	8007104 <_printf_common+0xa8>
 80070f2:	2301      	movs	r3, #1
 80070f4:	4652      	mov	r2, sl
 80070f6:	4641      	mov	r1, r8
 80070f8:	4638      	mov	r0, r7
 80070fa:	47c8      	blx	r9
 80070fc:	3001      	adds	r0, #1
 80070fe:	d103      	bne.n	8007108 <_printf_common+0xac>
 8007100:	f04f 30ff 	mov.w	r0, #4294967295
 8007104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007108:	3501      	adds	r5, #1
 800710a:	e7c6      	b.n	800709a <_printf_common+0x3e>
 800710c:	18e1      	adds	r1, r4, r3
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	2030      	movs	r0, #48	@ 0x30
 8007112:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007116:	4422      	add	r2, r4
 8007118:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800711c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007120:	3302      	adds	r3, #2
 8007122:	e7c7      	b.n	80070b4 <_printf_common+0x58>
 8007124:	2301      	movs	r3, #1
 8007126:	4622      	mov	r2, r4
 8007128:	4641      	mov	r1, r8
 800712a:	4638      	mov	r0, r7
 800712c:	47c8      	blx	r9
 800712e:	3001      	adds	r0, #1
 8007130:	d0e6      	beq.n	8007100 <_printf_common+0xa4>
 8007132:	3601      	adds	r6, #1
 8007134:	e7d9      	b.n	80070ea <_printf_common+0x8e>
	...

08007138 <_printf_i>:
 8007138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800713c:	7e0f      	ldrb	r7, [r1, #24]
 800713e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007140:	2f78      	cmp	r7, #120	@ 0x78
 8007142:	4691      	mov	r9, r2
 8007144:	4680      	mov	r8, r0
 8007146:	460c      	mov	r4, r1
 8007148:	469a      	mov	sl, r3
 800714a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800714e:	d807      	bhi.n	8007160 <_printf_i+0x28>
 8007150:	2f62      	cmp	r7, #98	@ 0x62
 8007152:	d80a      	bhi.n	800716a <_printf_i+0x32>
 8007154:	2f00      	cmp	r7, #0
 8007156:	f000 80d2 	beq.w	80072fe <_printf_i+0x1c6>
 800715a:	2f58      	cmp	r7, #88	@ 0x58
 800715c:	f000 80b9 	beq.w	80072d2 <_printf_i+0x19a>
 8007160:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007164:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007168:	e03a      	b.n	80071e0 <_printf_i+0xa8>
 800716a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800716e:	2b15      	cmp	r3, #21
 8007170:	d8f6      	bhi.n	8007160 <_printf_i+0x28>
 8007172:	a101      	add	r1, pc, #4	@ (adr r1, 8007178 <_printf_i+0x40>)
 8007174:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007178:	080071d1 	.word	0x080071d1
 800717c:	080071e5 	.word	0x080071e5
 8007180:	08007161 	.word	0x08007161
 8007184:	08007161 	.word	0x08007161
 8007188:	08007161 	.word	0x08007161
 800718c:	08007161 	.word	0x08007161
 8007190:	080071e5 	.word	0x080071e5
 8007194:	08007161 	.word	0x08007161
 8007198:	08007161 	.word	0x08007161
 800719c:	08007161 	.word	0x08007161
 80071a0:	08007161 	.word	0x08007161
 80071a4:	080072e5 	.word	0x080072e5
 80071a8:	0800720f 	.word	0x0800720f
 80071ac:	0800729f 	.word	0x0800729f
 80071b0:	08007161 	.word	0x08007161
 80071b4:	08007161 	.word	0x08007161
 80071b8:	08007307 	.word	0x08007307
 80071bc:	08007161 	.word	0x08007161
 80071c0:	0800720f 	.word	0x0800720f
 80071c4:	08007161 	.word	0x08007161
 80071c8:	08007161 	.word	0x08007161
 80071cc:	080072a7 	.word	0x080072a7
 80071d0:	6833      	ldr	r3, [r6, #0]
 80071d2:	1d1a      	adds	r2, r3, #4
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	6032      	str	r2, [r6, #0]
 80071d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071e0:	2301      	movs	r3, #1
 80071e2:	e09d      	b.n	8007320 <_printf_i+0x1e8>
 80071e4:	6833      	ldr	r3, [r6, #0]
 80071e6:	6820      	ldr	r0, [r4, #0]
 80071e8:	1d19      	adds	r1, r3, #4
 80071ea:	6031      	str	r1, [r6, #0]
 80071ec:	0606      	lsls	r6, r0, #24
 80071ee:	d501      	bpl.n	80071f4 <_printf_i+0xbc>
 80071f0:	681d      	ldr	r5, [r3, #0]
 80071f2:	e003      	b.n	80071fc <_printf_i+0xc4>
 80071f4:	0645      	lsls	r5, r0, #25
 80071f6:	d5fb      	bpl.n	80071f0 <_printf_i+0xb8>
 80071f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071fc:	2d00      	cmp	r5, #0
 80071fe:	da03      	bge.n	8007208 <_printf_i+0xd0>
 8007200:	232d      	movs	r3, #45	@ 0x2d
 8007202:	426d      	negs	r5, r5
 8007204:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007208:	4859      	ldr	r0, [pc, #356]	@ (8007370 <_printf_i+0x238>)
 800720a:	230a      	movs	r3, #10
 800720c:	e011      	b.n	8007232 <_printf_i+0xfa>
 800720e:	6821      	ldr	r1, [r4, #0]
 8007210:	6833      	ldr	r3, [r6, #0]
 8007212:	0608      	lsls	r0, r1, #24
 8007214:	f853 5b04 	ldr.w	r5, [r3], #4
 8007218:	d402      	bmi.n	8007220 <_printf_i+0xe8>
 800721a:	0649      	lsls	r1, r1, #25
 800721c:	bf48      	it	mi
 800721e:	b2ad      	uxthmi	r5, r5
 8007220:	2f6f      	cmp	r7, #111	@ 0x6f
 8007222:	4853      	ldr	r0, [pc, #332]	@ (8007370 <_printf_i+0x238>)
 8007224:	6033      	str	r3, [r6, #0]
 8007226:	bf14      	ite	ne
 8007228:	230a      	movne	r3, #10
 800722a:	2308      	moveq	r3, #8
 800722c:	2100      	movs	r1, #0
 800722e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007232:	6866      	ldr	r6, [r4, #4]
 8007234:	60a6      	str	r6, [r4, #8]
 8007236:	2e00      	cmp	r6, #0
 8007238:	bfa2      	ittt	ge
 800723a:	6821      	ldrge	r1, [r4, #0]
 800723c:	f021 0104 	bicge.w	r1, r1, #4
 8007240:	6021      	strge	r1, [r4, #0]
 8007242:	b90d      	cbnz	r5, 8007248 <_printf_i+0x110>
 8007244:	2e00      	cmp	r6, #0
 8007246:	d04b      	beq.n	80072e0 <_printf_i+0x1a8>
 8007248:	4616      	mov	r6, r2
 800724a:	fbb5 f1f3 	udiv	r1, r5, r3
 800724e:	fb03 5711 	mls	r7, r3, r1, r5
 8007252:	5dc7      	ldrb	r7, [r0, r7]
 8007254:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007258:	462f      	mov	r7, r5
 800725a:	42bb      	cmp	r3, r7
 800725c:	460d      	mov	r5, r1
 800725e:	d9f4      	bls.n	800724a <_printf_i+0x112>
 8007260:	2b08      	cmp	r3, #8
 8007262:	d10b      	bne.n	800727c <_printf_i+0x144>
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	07df      	lsls	r7, r3, #31
 8007268:	d508      	bpl.n	800727c <_printf_i+0x144>
 800726a:	6923      	ldr	r3, [r4, #16]
 800726c:	6861      	ldr	r1, [r4, #4]
 800726e:	4299      	cmp	r1, r3
 8007270:	bfde      	ittt	le
 8007272:	2330      	movle	r3, #48	@ 0x30
 8007274:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007278:	f106 36ff 	addle.w	r6, r6, #4294967295
 800727c:	1b92      	subs	r2, r2, r6
 800727e:	6122      	str	r2, [r4, #16]
 8007280:	f8cd a000 	str.w	sl, [sp]
 8007284:	464b      	mov	r3, r9
 8007286:	aa03      	add	r2, sp, #12
 8007288:	4621      	mov	r1, r4
 800728a:	4640      	mov	r0, r8
 800728c:	f7ff fee6 	bl	800705c <_printf_common>
 8007290:	3001      	adds	r0, #1
 8007292:	d14a      	bne.n	800732a <_printf_i+0x1f2>
 8007294:	f04f 30ff 	mov.w	r0, #4294967295
 8007298:	b004      	add	sp, #16
 800729a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	f043 0320 	orr.w	r3, r3, #32
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	4833      	ldr	r0, [pc, #204]	@ (8007374 <_printf_i+0x23c>)
 80072a8:	2778      	movs	r7, #120	@ 0x78
 80072aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	6831      	ldr	r1, [r6, #0]
 80072b2:	061f      	lsls	r7, r3, #24
 80072b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80072b8:	d402      	bmi.n	80072c0 <_printf_i+0x188>
 80072ba:	065f      	lsls	r7, r3, #25
 80072bc:	bf48      	it	mi
 80072be:	b2ad      	uxthmi	r5, r5
 80072c0:	6031      	str	r1, [r6, #0]
 80072c2:	07d9      	lsls	r1, r3, #31
 80072c4:	bf44      	itt	mi
 80072c6:	f043 0320 	orrmi.w	r3, r3, #32
 80072ca:	6023      	strmi	r3, [r4, #0]
 80072cc:	b11d      	cbz	r5, 80072d6 <_printf_i+0x19e>
 80072ce:	2310      	movs	r3, #16
 80072d0:	e7ac      	b.n	800722c <_printf_i+0xf4>
 80072d2:	4827      	ldr	r0, [pc, #156]	@ (8007370 <_printf_i+0x238>)
 80072d4:	e7e9      	b.n	80072aa <_printf_i+0x172>
 80072d6:	6823      	ldr	r3, [r4, #0]
 80072d8:	f023 0320 	bic.w	r3, r3, #32
 80072dc:	6023      	str	r3, [r4, #0]
 80072de:	e7f6      	b.n	80072ce <_printf_i+0x196>
 80072e0:	4616      	mov	r6, r2
 80072e2:	e7bd      	b.n	8007260 <_printf_i+0x128>
 80072e4:	6833      	ldr	r3, [r6, #0]
 80072e6:	6825      	ldr	r5, [r4, #0]
 80072e8:	6961      	ldr	r1, [r4, #20]
 80072ea:	1d18      	adds	r0, r3, #4
 80072ec:	6030      	str	r0, [r6, #0]
 80072ee:	062e      	lsls	r6, r5, #24
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	d501      	bpl.n	80072f8 <_printf_i+0x1c0>
 80072f4:	6019      	str	r1, [r3, #0]
 80072f6:	e002      	b.n	80072fe <_printf_i+0x1c6>
 80072f8:	0668      	lsls	r0, r5, #25
 80072fa:	d5fb      	bpl.n	80072f4 <_printf_i+0x1bc>
 80072fc:	8019      	strh	r1, [r3, #0]
 80072fe:	2300      	movs	r3, #0
 8007300:	6123      	str	r3, [r4, #16]
 8007302:	4616      	mov	r6, r2
 8007304:	e7bc      	b.n	8007280 <_printf_i+0x148>
 8007306:	6833      	ldr	r3, [r6, #0]
 8007308:	1d1a      	adds	r2, r3, #4
 800730a:	6032      	str	r2, [r6, #0]
 800730c:	681e      	ldr	r6, [r3, #0]
 800730e:	6862      	ldr	r2, [r4, #4]
 8007310:	2100      	movs	r1, #0
 8007312:	4630      	mov	r0, r6
 8007314:	f7f8 ff74 	bl	8000200 <memchr>
 8007318:	b108      	cbz	r0, 800731e <_printf_i+0x1e6>
 800731a:	1b80      	subs	r0, r0, r6
 800731c:	6060      	str	r0, [r4, #4]
 800731e:	6863      	ldr	r3, [r4, #4]
 8007320:	6123      	str	r3, [r4, #16]
 8007322:	2300      	movs	r3, #0
 8007324:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007328:	e7aa      	b.n	8007280 <_printf_i+0x148>
 800732a:	6923      	ldr	r3, [r4, #16]
 800732c:	4632      	mov	r2, r6
 800732e:	4649      	mov	r1, r9
 8007330:	4640      	mov	r0, r8
 8007332:	47d0      	blx	sl
 8007334:	3001      	adds	r0, #1
 8007336:	d0ad      	beq.n	8007294 <_printf_i+0x15c>
 8007338:	6823      	ldr	r3, [r4, #0]
 800733a:	079b      	lsls	r3, r3, #30
 800733c:	d413      	bmi.n	8007366 <_printf_i+0x22e>
 800733e:	68e0      	ldr	r0, [r4, #12]
 8007340:	9b03      	ldr	r3, [sp, #12]
 8007342:	4298      	cmp	r0, r3
 8007344:	bfb8      	it	lt
 8007346:	4618      	movlt	r0, r3
 8007348:	e7a6      	b.n	8007298 <_printf_i+0x160>
 800734a:	2301      	movs	r3, #1
 800734c:	4632      	mov	r2, r6
 800734e:	4649      	mov	r1, r9
 8007350:	4640      	mov	r0, r8
 8007352:	47d0      	blx	sl
 8007354:	3001      	adds	r0, #1
 8007356:	d09d      	beq.n	8007294 <_printf_i+0x15c>
 8007358:	3501      	adds	r5, #1
 800735a:	68e3      	ldr	r3, [r4, #12]
 800735c:	9903      	ldr	r1, [sp, #12]
 800735e:	1a5b      	subs	r3, r3, r1
 8007360:	42ab      	cmp	r3, r5
 8007362:	dcf2      	bgt.n	800734a <_printf_i+0x212>
 8007364:	e7eb      	b.n	800733e <_printf_i+0x206>
 8007366:	2500      	movs	r5, #0
 8007368:	f104 0619 	add.w	r6, r4, #25
 800736c:	e7f5      	b.n	800735a <_printf_i+0x222>
 800736e:	bf00      	nop
 8007370:	080078be 	.word	0x080078be
 8007374:	080078cf 	.word	0x080078cf

08007378 <memmove>:
 8007378:	4288      	cmp	r0, r1
 800737a:	b510      	push	{r4, lr}
 800737c:	eb01 0402 	add.w	r4, r1, r2
 8007380:	d902      	bls.n	8007388 <memmove+0x10>
 8007382:	4284      	cmp	r4, r0
 8007384:	4623      	mov	r3, r4
 8007386:	d807      	bhi.n	8007398 <memmove+0x20>
 8007388:	1e43      	subs	r3, r0, #1
 800738a:	42a1      	cmp	r1, r4
 800738c:	d008      	beq.n	80073a0 <memmove+0x28>
 800738e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007392:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007396:	e7f8      	b.n	800738a <memmove+0x12>
 8007398:	4402      	add	r2, r0
 800739a:	4601      	mov	r1, r0
 800739c:	428a      	cmp	r2, r1
 800739e:	d100      	bne.n	80073a2 <memmove+0x2a>
 80073a0:	bd10      	pop	{r4, pc}
 80073a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073aa:	e7f7      	b.n	800739c <memmove+0x24>

080073ac <_sbrk_r>:
 80073ac:	b538      	push	{r3, r4, r5, lr}
 80073ae:	4d06      	ldr	r5, [pc, #24]	@ (80073c8 <_sbrk_r+0x1c>)
 80073b0:	2300      	movs	r3, #0
 80073b2:	4604      	mov	r4, r0
 80073b4:	4608      	mov	r0, r1
 80073b6:	602b      	str	r3, [r5, #0]
 80073b8:	f7f9 fbb8 	bl	8000b2c <_sbrk>
 80073bc:	1c43      	adds	r3, r0, #1
 80073be:	d102      	bne.n	80073c6 <_sbrk_r+0x1a>
 80073c0:	682b      	ldr	r3, [r5, #0]
 80073c2:	b103      	cbz	r3, 80073c6 <_sbrk_r+0x1a>
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	20000d18 	.word	0x20000d18

080073cc <_realloc_r>:
 80073cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d0:	4680      	mov	r8, r0
 80073d2:	4615      	mov	r5, r2
 80073d4:	460c      	mov	r4, r1
 80073d6:	b921      	cbnz	r1, 80073e2 <_realloc_r+0x16>
 80073d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073dc:	4611      	mov	r1, r2
 80073de:	f7ff bc59 	b.w	8006c94 <_malloc_r>
 80073e2:	b92a      	cbnz	r2, 80073f0 <_realloc_r+0x24>
 80073e4:	f7ff fbea 	bl	8006bbc <_free_r>
 80073e8:	2400      	movs	r4, #0
 80073ea:	4620      	mov	r0, r4
 80073ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073f0:	f000 f81a 	bl	8007428 <_malloc_usable_size_r>
 80073f4:	4285      	cmp	r5, r0
 80073f6:	4606      	mov	r6, r0
 80073f8:	d802      	bhi.n	8007400 <_realloc_r+0x34>
 80073fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80073fe:	d8f4      	bhi.n	80073ea <_realloc_r+0x1e>
 8007400:	4629      	mov	r1, r5
 8007402:	4640      	mov	r0, r8
 8007404:	f7ff fc46 	bl	8006c94 <_malloc_r>
 8007408:	4607      	mov	r7, r0
 800740a:	2800      	cmp	r0, #0
 800740c:	d0ec      	beq.n	80073e8 <_realloc_r+0x1c>
 800740e:	42b5      	cmp	r5, r6
 8007410:	462a      	mov	r2, r5
 8007412:	4621      	mov	r1, r4
 8007414:	bf28      	it	cs
 8007416:	4632      	movcs	r2, r6
 8007418:	f7ff fbc2 	bl	8006ba0 <memcpy>
 800741c:	4621      	mov	r1, r4
 800741e:	4640      	mov	r0, r8
 8007420:	f7ff fbcc 	bl	8006bbc <_free_r>
 8007424:	463c      	mov	r4, r7
 8007426:	e7e0      	b.n	80073ea <_realloc_r+0x1e>

08007428 <_malloc_usable_size_r>:
 8007428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800742c:	1f18      	subs	r0, r3, #4
 800742e:	2b00      	cmp	r3, #0
 8007430:	bfbc      	itt	lt
 8007432:	580b      	ldrlt	r3, [r1, r0]
 8007434:	18c0      	addlt	r0, r0, r3
 8007436:	4770      	bx	lr

08007438 <_init>:
 8007438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743a:	bf00      	nop
 800743c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743e:	bc08      	pop	{r3}
 8007440:	469e      	mov	lr, r3
 8007442:	4770      	bx	lr

08007444 <_fini>:
 8007444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007446:	bf00      	nop
 8007448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800744a:	bc08      	pop	{r3}
 800744c:	469e      	mov	lr, r3
 800744e:	4770      	bx	lr
